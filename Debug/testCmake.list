
testCmake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ad0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007c58  08007c58  00017c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c74  08007c74  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007c74  08007c74  00017c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c7c  08007c7c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c7c  08007c7c  00017c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c80  08007c80  00017c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00007884  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20007900  20007900  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      0000004c  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a0ad  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004eef  00000000  00000000  0003a1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013a0  00000000  00000000  0003f098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f46  00000000  00000000  00040438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023349  00000000  00000000  0004137e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001769b  00000000  00000000  000646c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cc54e  00000000  00000000  0007bd62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000049d8  00000000  00000000  001482b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000014a  00000000  00000000  0014cc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loclists 00001118  00000000  00000000  0014cdd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295
 8000198:	f04f 30ff 	movne.w	r0, #4294967295
 800019c:	f000 b80c 	b.w	80001b8 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f007 fbec 	bl	8007984 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__aeabi_idiv0>:
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop

080001bc <deregister_tm_clones>:
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <deregister_tm_clones+0x10>)
 80001be:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <deregister_tm_clones+0x14>)
 80001c0:	4283      	cmp	r3, r0
 80001c2:	d002      	beq.n	80001ca <deregister_tm_clones+0xe>
 80001c4:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <deregister_tm_clones+0x18>)
 80001c6:	b103      	cbz	r3, 80001ca <deregister_tm_clones+0xe>
 80001c8:	4718      	bx	r3
 80001ca:	4770      	bx	lr
 80001cc:	2000007c 	.word	0x2000007c
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	00000000 	.word	0x00000000

080001d8 <register_tm_clones>:
 80001d8:	4805      	ldr	r0, [pc, #20]	; (80001f0 <register_tm_clones+0x18>)
 80001da:	4b06      	ldr	r3, [pc, #24]	; (80001f4 <register_tm_clones+0x1c>)
 80001dc:	1a1b      	subs	r3, r3, r0
 80001de:	0fd9      	lsrs	r1, r3, #31
 80001e0:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001e4:	1049      	asrs	r1, r1, #1
 80001e6:	d002      	beq.n	80001ee <register_tm_clones+0x16>
 80001e8:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <register_tm_clones+0x20>)
 80001ea:	b103      	cbz	r3, 80001ee <register_tm_clones+0x16>
 80001ec:	4718      	bx	r3
 80001ee:	4770      	bx	lr
 80001f0:	2000007c 	.word	0x2000007c
 80001f4:	2000007c 	.word	0x2000007c
 80001f8:	00000000 	.word	0x00000000

080001fc <__do_global_dtors_aux>:
 80001fc:	b510      	push	{r4, lr}
 80001fe:	4c06      	ldr	r4, [pc, #24]	; (8000218 <__do_global_dtors_aux+0x1c>)
 8000200:	7823      	ldrb	r3, [r4, #0]
 8000202:	b943      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x1a>
 8000204:	f7ff ffda 	bl	80001bc <deregister_tm_clones>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x20>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x16>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x24>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	08007c40 	.word	0x08007c40

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b05      	ldr	r3, [pc, #20]	; (800023c <frame_dummy+0x18>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4905      	ldr	r1, [pc, #20]	; (8000240 <frame_dummy+0x1c>)
 800022c:	4805      	ldr	r0, [pc, #20]	; (8000244 <frame_dummy+0x20>)
 800022e:	f3af 8000 	nop.w
 8000232:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000236:	f7ff bfcf 	b.w	80001d8 <register_tm_clones>
 800023a:	bf00      	nop
 800023c:	00000000 	.word	0x00000000
 8000240:	20000080 	.word	0x20000080
 8000244:	08007c40 	.word	0x08007c40

08000248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024c:	f000 fbfa 	bl	8000a44 <HAL_Init>

  /* USER CODE BEGIN Init */
  myVar[3] = 99;
 8000250:	4b08      	ldr	r3, [pc, #32]	; (8000274 <main+0x2c>)
 8000252:	2263      	movs	r2, #99	; 0x63
 8000254:	60da      	str	r2, [r3, #12]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000256:	f000 f80f 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025a:	f000 f90b 	bl	8000474 <MX_GPIO_Init>
  MX_I2C1_Init();
 800025e:	f000 f875 	bl	800034c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000262:	f000 f8a1 	bl	80003a8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000266:	f000 f8cf 	bl	8000408 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800026a:	f006 ff47 	bl	80070fc <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800026e:	f006 ff6b 	bl	8007148 <MX_USB_HOST_Process>
 8000272:	e7fc      	b.n	800026e <main+0x26>
 8000274:	2000018c 	.word	0x2000018c

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b094      	sub	sp, #80	; 0x50
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0320 	add.w	r3, r7, #32
 8000282:	2230      	movs	r2, #48	; 0x30
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f007 faee 	bl	8007868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	f107 030c 	add.w	r3, r7, #12
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
 800029a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800029c:	2300      	movs	r3, #0
 800029e:	60bb      	str	r3, [r7, #8]
 80002a0:	4b28      	ldr	r3, [pc, #160]	; (8000344 <SystemClock_Config+0xcc>)
 80002a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002a4:	4a27      	ldr	r2, [pc, #156]	; (8000344 <SystemClock_Config+0xcc>)
 80002a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002aa:	6413      	str	r3, [r2, #64]	; 0x40
 80002ac:	4b25      	ldr	r3, [pc, #148]	; (8000344 <SystemClock_Config+0xcc>)
 80002ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002b4:	60bb      	str	r3, [r7, #8]
 80002b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002b8:	2300      	movs	r3, #0
 80002ba:	607b      	str	r3, [r7, #4]
 80002bc:	4b22      	ldr	r3, [pc, #136]	; (8000348 <SystemClock_Config+0xd0>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a21      	ldr	r2, [pc, #132]	; (8000348 <SystemClock_Config+0xd0>)
 80002c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002c6:	6013      	str	r3, [r2, #0]
 80002c8:	4b1f      	ldr	r3, [pc, #124]	; (8000348 <SystemClock_Config+0xd0>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80002d0:	607b      	str	r3, [r7, #4]
 80002d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002d4:	2301      	movs	r3, #1
 80002d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002de:	2302      	movs	r3, #2
 80002e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80002e8:	2308      	movs	r3, #8
 80002ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80002ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80002f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002f2:	2302      	movs	r3, #2
 80002f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80002f6:	2307      	movs	r3, #7
 80002f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fa:	f107 0320 	add.w	r3, r7, #32
 80002fe:	4618      	mov	r0, r3
 8000300:	f003 f8ec 	bl	80034dc <HAL_RCC_OscConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800030a:	f000 f9b1 	bl	8000670 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030e:	230f      	movs	r3, #15
 8000310:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000312:	2302      	movs	r3, #2
 8000314:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800031a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800031e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000324:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000326:	f107 030c 	add.w	r3, r7, #12
 800032a:	2105      	movs	r1, #5
 800032c:	4618      	mov	r0, r3
 800032e:	f003 fb4d 	bl	80039cc <HAL_RCC_ClockConfig>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000338:	f000 f99a 	bl	8000670 <Error_Handler>
  }
}
 800033c:	bf00      	nop
 800033e:	3750      	adds	r7, #80	; 0x50
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	40023800 	.word	0x40023800
 8000348:	40007000 	.word	0x40007000

0800034c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000350:	4b12      	ldr	r3, [pc, #72]	; (800039c <MX_I2C1_Init+0x50>)
 8000352:	4a13      	ldr	r2, [pc, #76]	; (80003a0 <MX_I2C1_Init+0x54>)
 8000354:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000356:	4b11      	ldr	r3, [pc, #68]	; (800039c <MX_I2C1_Init+0x50>)
 8000358:	4a12      	ldr	r2, [pc, #72]	; (80003a4 <MX_I2C1_Init+0x58>)
 800035a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <MX_I2C1_Init+0x50>)
 800035e:	2200      	movs	r2, #0
 8000360:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <MX_I2C1_Init+0x50>)
 8000364:	2200      	movs	r2, #0
 8000366:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <MX_I2C1_Init+0x50>)
 800036a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800036e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000370:	4b0a      	ldr	r3, [pc, #40]	; (800039c <MX_I2C1_Init+0x50>)
 8000372:	2200      	movs	r2, #0
 8000374:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000376:	4b09      	ldr	r3, [pc, #36]	; (800039c <MX_I2C1_Init+0x50>)
 8000378:	2200      	movs	r2, #0
 800037a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800037c:	4b07      	ldr	r3, [pc, #28]	; (800039c <MX_I2C1_Init+0x50>)
 800037e:	2200      	movs	r2, #0
 8000380:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000382:	4b06      	ldr	r3, [pc, #24]	; (800039c <MX_I2C1_Init+0x50>)
 8000384:	2200      	movs	r2, #0
 8000386:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000388:	4804      	ldr	r0, [pc, #16]	; (800039c <MX_I2C1_Init+0x50>)
 800038a:	f002 fac3 	bl	8002914 <HAL_I2C_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000394:	f000 f96c 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}
 800039c:	20000098 	.word	0x20000098
 80003a0:	40005400 	.word	0x40005400
 80003a4:	000186a0 	.word	0x000186a0

080003a8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80003ac:	4b13      	ldr	r3, [pc, #76]	; (80003fc <MX_I2S3_Init+0x54>)
 80003ae:	4a14      	ldr	r2, [pc, #80]	; (8000400 <MX_I2S3_Init+0x58>)
 80003b0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80003b2:	4b12      	ldr	r3, [pc, #72]	; (80003fc <MX_I2S3_Init+0x54>)
 80003b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003b8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80003ba:	4b10      	ldr	r3, [pc, #64]	; (80003fc <MX_I2S3_Init+0x54>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80003c0:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <MX_I2S3_Init+0x54>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80003c6:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <MX_I2S3_Init+0x54>)
 80003c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003cc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80003ce:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <MX_I2S3_Init+0x54>)
 80003d0:	4a0c      	ldr	r2, [pc, #48]	; (8000404 <MX_I2S3_Init+0x5c>)
 80003d2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <MX_I2S3_Init+0x54>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80003da:	4b08      	ldr	r3, [pc, #32]	; (80003fc <MX_I2S3_Init+0x54>)
 80003dc:	2200      	movs	r2, #0
 80003de:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <MX_I2S3_Init+0x54>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80003e6:	4805      	ldr	r0, [pc, #20]	; (80003fc <MX_I2S3_Init+0x54>)
 80003e8:	f002 fbd8 	bl	8002b9c <HAL_I2S_Init>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80003f2:	f000 f93d 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	200000ec 	.word	0x200000ec
 8000400:	40003c00 	.word	0x40003c00
 8000404:	00017700 	.word	0x00017700

08000408 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800040c:	4b17      	ldr	r3, [pc, #92]	; (800046c <MX_SPI1_Init+0x64>)
 800040e:	4a18      	ldr	r2, [pc, #96]	; (8000470 <MX_SPI1_Init+0x68>)
 8000410:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000412:	4b16      	ldr	r3, [pc, #88]	; (800046c <MX_SPI1_Init+0x64>)
 8000414:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000418:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800041a:	4b14      	ldr	r3, [pc, #80]	; (800046c <MX_SPI1_Init+0x64>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000420:	4b12      	ldr	r3, [pc, #72]	; (800046c <MX_SPI1_Init+0x64>)
 8000422:	2200      	movs	r2, #0
 8000424:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000426:	4b11      	ldr	r3, [pc, #68]	; (800046c <MX_SPI1_Init+0x64>)
 8000428:	2200      	movs	r2, #0
 800042a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <MX_SPI1_Init+0x64>)
 800042e:	2200      	movs	r2, #0
 8000430:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000432:	4b0e      	ldr	r3, [pc, #56]	; (800046c <MX_SPI1_Init+0x64>)
 8000434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000438:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800043a:	4b0c      	ldr	r3, [pc, #48]	; (800046c <MX_SPI1_Init+0x64>)
 800043c:	2200      	movs	r2, #0
 800043e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000440:	4b0a      	ldr	r3, [pc, #40]	; (800046c <MX_SPI1_Init+0x64>)
 8000442:	2200      	movs	r2, #0
 8000444:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000446:	4b09      	ldr	r3, [pc, #36]	; (800046c <MX_SPI1_Init+0x64>)
 8000448:	2200      	movs	r2, #0
 800044a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800044c:	4b07      	ldr	r3, [pc, #28]	; (800046c <MX_SPI1_Init+0x64>)
 800044e:	2200      	movs	r2, #0
 8000450:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000452:	4b06      	ldr	r3, [pc, #24]	; (800046c <MX_SPI1_Init+0x64>)
 8000454:	220a      	movs	r2, #10
 8000456:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000458:	4804      	ldr	r0, [pc, #16]	; (800046c <MX_SPI1_Init+0x64>)
 800045a:	f003 fe03 	bl	8004064 <HAL_SPI_Init>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000464:	f000 f904 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20000134 	.word	0x20000134
 8000470:	40013000 	.word	0x40013000

08000474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b08c      	sub	sp, #48	; 0x30
 8000478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047a:	f107 031c 	add.w	r3, r7, #28
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
 8000488:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800048a:	2300      	movs	r3, #0
 800048c:	61bb      	str	r3, [r7, #24]
 800048e:	4b72      	ldr	r3, [pc, #456]	; (8000658 <MX_GPIO_Init+0x1e4>)
 8000490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000492:	4a71      	ldr	r2, [pc, #452]	; (8000658 <MX_GPIO_Init+0x1e4>)
 8000494:	f043 0310 	orr.w	r3, r3, #16
 8000498:	6313      	str	r3, [r2, #48]	; 0x30
 800049a:	4b6f      	ldr	r3, [pc, #444]	; (8000658 <MX_GPIO_Init+0x1e4>)
 800049c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049e:	f003 0310 	and.w	r3, r3, #16
 80004a2:	61bb      	str	r3, [r7, #24]
 80004a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a6:	2300      	movs	r3, #0
 80004a8:	617b      	str	r3, [r7, #20]
 80004aa:	4b6b      	ldr	r3, [pc, #428]	; (8000658 <MX_GPIO_Init+0x1e4>)
 80004ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ae:	4a6a      	ldr	r2, [pc, #424]	; (8000658 <MX_GPIO_Init+0x1e4>)
 80004b0:	f043 0304 	orr.w	r3, r3, #4
 80004b4:	6313      	str	r3, [r2, #48]	; 0x30
 80004b6:	4b68      	ldr	r3, [pc, #416]	; (8000658 <MX_GPIO_Init+0x1e4>)
 80004b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ba:	f003 0304 	and.w	r3, r3, #4
 80004be:	617b      	str	r3, [r7, #20]
 80004c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004c2:	2300      	movs	r3, #0
 80004c4:	613b      	str	r3, [r7, #16]
 80004c6:	4b64      	ldr	r3, [pc, #400]	; (8000658 <MX_GPIO_Init+0x1e4>)
 80004c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ca:	4a63      	ldr	r2, [pc, #396]	; (8000658 <MX_GPIO_Init+0x1e4>)
 80004cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004d0:	6313      	str	r3, [r2, #48]	; 0x30
 80004d2:	4b61      	ldr	r3, [pc, #388]	; (8000658 <MX_GPIO_Init+0x1e4>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004da:	613b      	str	r3, [r7, #16]
 80004dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	4b5d      	ldr	r3, [pc, #372]	; (8000658 <MX_GPIO_Init+0x1e4>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	4a5c      	ldr	r2, [pc, #368]	; (8000658 <MX_GPIO_Init+0x1e4>)
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	6313      	str	r3, [r2, #48]	; 0x30
 80004ee:	4b5a      	ldr	r3, [pc, #360]	; (8000658 <MX_GPIO_Init+0x1e4>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	60bb      	str	r3, [r7, #8]
 80004fe:	4b56      	ldr	r3, [pc, #344]	; (8000658 <MX_GPIO_Init+0x1e4>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	4a55      	ldr	r2, [pc, #340]	; (8000658 <MX_GPIO_Init+0x1e4>)
 8000504:	f043 0302 	orr.w	r3, r3, #2
 8000508:	6313      	str	r3, [r2, #48]	; 0x30
 800050a:	4b53      	ldr	r3, [pc, #332]	; (8000658 <MX_GPIO_Init+0x1e4>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	f003 0302 	and.w	r3, r3, #2
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	607b      	str	r3, [r7, #4]
 800051a:	4b4f      	ldr	r3, [pc, #316]	; (8000658 <MX_GPIO_Init+0x1e4>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a4e      	ldr	r2, [pc, #312]	; (8000658 <MX_GPIO_Init+0x1e4>)
 8000520:	f043 0308 	orr.w	r3, r3, #8
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4b4c      	ldr	r3, [pc, #304]	; (8000658 <MX_GPIO_Init+0x1e4>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0308 	and.w	r3, r3, #8
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	2108      	movs	r1, #8
 8000536:	4849      	ldr	r0, [pc, #292]	; (800065c <MX_GPIO_Init+0x1e8>)
 8000538:	f000 fdc8 	bl	80010cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	2101      	movs	r1, #1
 8000540:	4847      	ldr	r0, [pc, #284]	; (8000660 <MX_GPIO_Init+0x1ec>)
 8000542:	f000 fdc3 	bl	80010cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000546:	2200      	movs	r2, #0
 8000548:	f24f 0110 	movw	r1, #61456	; 0xf010
 800054c:	4845      	ldr	r0, [pc, #276]	; (8000664 <MX_GPIO_Init+0x1f0>)
 800054e:	f000 fdbd 	bl	80010cc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000552:	2308      	movs	r3, #8
 8000554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000556:	2301      	movs	r3, #1
 8000558:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	2300      	movs	r3, #0
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055e:	2300      	movs	r3, #0
 8000560:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000562:	f107 031c 	add.w	r3, r7, #28
 8000566:	4619      	mov	r1, r3
 8000568:	483c      	ldr	r0, [pc, #240]	; (800065c <MX_GPIO_Init+0x1e8>)
 800056a:	f000 fc13 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800056e:	2301      	movs	r3, #1
 8000570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000572:	2301      	movs	r3, #1
 8000574:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057a:	2300      	movs	r3, #0
 800057c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	4619      	mov	r1, r3
 8000584:	4836      	ldr	r0, [pc, #216]	; (8000660 <MX_GPIO_Init+0x1ec>)
 8000586:	f000 fc05 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800058a:	2308      	movs	r3, #8
 800058c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058e:	2302      	movs	r3, #2
 8000590:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	2300      	movs	r3, #0
 8000598:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800059a:	2305      	movs	r3, #5
 800059c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	4619      	mov	r1, r3
 80005a4:	482e      	ldr	r0, [pc, #184]	; (8000660 <MX_GPIO_Init+0x1ec>)
 80005a6:	f000 fbf5 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005aa:	2301      	movs	r3, #1
 80005ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005ae:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80005b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005b8:	f107 031c 	add.w	r3, r7, #28
 80005bc:	4619      	mov	r1, r3
 80005be:	482a      	ldr	r0, [pc, #168]	; (8000668 <MX_GPIO_Init+0x1f4>)
 80005c0:	f000 fbe8 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80005c4:	2304      	movs	r3, #4
 80005c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c8:	2300      	movs	r3, #0
 80005ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80005d0:	f107 031c 	add.w	r3, r7, #28
 80005d4:	4619      	mov	r1, r3
 80005d6:	4825      	ldr	r0, [pc, #148]	; (800066c <MX_GPIO_Init+0x1f8>)
 80005d8:	f000 fbdc 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80005dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e2:	2302      	movs	r3, #2
 80005e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ea:	2300      	movs	r3, #0
 80005ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005ee:	2305      	movs	r3, #5
 80005f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	4619      	mov	r1, r3
 80005f8:	481c      	ldr	r0, [pc, #112]	; (800066c <MX_GPIO_Init+0x1f8>)
 80005fa:	f000 fbcb 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005fe:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000602:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000604:	2301      	movs	r3, #1
 8000606:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2300      	movs	r3, #0
 800060e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4619      	mov	r1, r3
 8000616:	4813      	ldr	r0, [pc, #76]	; (8000664 <MX_GPIO_Init+0x1f0>)
 8000618:	f000 fbbc 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800061c:	2320      	movs	r3, #32
 800061e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000620:	2300      	movs	r3, #0
 8000622:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4619      	mov	r1, r3
 800062e:	480d      	ldr	r0, [pc, #52]	; (8000664 <MX_GPIO_Init+0x1f0>)
 8000630:	f000 fbb0 	bl	8000d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000634:	2302      	movs	r3, #2
 8000636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000638:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800063c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	4619      	mov	r1, r3
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <MX_GPIO_Init+0x1e8>)
 800064a:	f000 fba3 	bl	8000d94 <HAL_GPIO_Init>

}
 800064e:	bf00      	nop
 8000650:	3730      	adds	r7, #48	; 0x30
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800
 800065c:	40021000 	.word	0x40021000
 8000660:	40020800 	.word	0x40020800
 8000664:	40020c00 	.word	0x40020c00
 8000668:	40020000 	.word	0x40020000
 800066c:	40020400 	.word	0x40020400

08000670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000674:	b672      	cpsid	i
}
 8000676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000678:	bf00      	nop
 800067a:	e7fd      	b.n	8000678 <Error_Handler+0x8>

0800067c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <HAL_MspInit+0x4c>)
 8000688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068a:	4a0f      	ldr	r2, [pc, #60]	; (80006c8 <HAL_MspInit+0x4c>)
 800068c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000690:	6453      	str	r3, [r2, #68]	; 0x44
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <HAL_MspInit+0x4c>)
 8000694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <HAL_MspInit+0x4c>)
 80006a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a6:	4a08      	ldr	r2, [pc, #32]	; (80006c8 <HAL_MspInit+0x4c>)
 80006a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ac:	6413      	str	r3, [r2, #64]	; 0x40
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <HAL_MspInit+0x4c>)
 80006b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006ba:	2007      	movs	r0, #7
 80006bc:	f000 fb28 	bl	8000d10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800

080006cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a19      	ldr	r2, [pc, #100]	; (8000750 <HAL_I2C_MspInit+0x84>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d12c      	bne.n	8000748 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	4b18      	ldr	r3, [pc, #96]	; (8000754 <HAL_I2C_MspInit+0x88>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a17      	ldr	r2, [pc, #92]	; (8000754 <HAL_I2C_MspInit+0x88>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <HAL_I2C_MspInit+0x88>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800070a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800070e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000710:	2312      	movs	r3, #18
 8000712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000714:	2301      	movs	r3, #1
 8000716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000718:	2300      	movs	r3, #0
 800071a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800071c:	2304      	movs	r3, #4
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	4619      	mov	r1, r3
 8000726:	480c      	ldr	r0, [pc, #48]	; (8000758 <HAL_I2C_MspInit+0x8c>)
 8000728:	f000 fb34 	bl	8000d94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <HAL_I2C_MspInit+0x88>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	4a07      	ldr	r2, [pc, #28]	; (8000754 <HAL_I2C_MspInit+0x88>)
 8000736:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800073a:	6413      	str	r3, [r2, #64]	; 0x40
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <HAL_I2C_MspInit+0x88>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	; 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40005400 	.word	0x40005400
 8000754:	40023800 	.word	0x40023800
 8000758:	40020400 	.word	0x40020400

0800075c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08e      	sub	sp, #56	; 0x38
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a31      	ldr	r2, [pc, #196]	; (800084c <HAL_I2S_MspInit+0xf0>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d15a      	bne.n	8000842 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800078c:	2301      	movs	r3, #1
 800078e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000790:	23c0      	movs	r3, #192	; 0xc0
 8000792:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000794:	2302      	movs	r3, #2
 8000796:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4618      	mov	r0, r3
 800079e:	f003 fb21 	bl	8003de4 <HAL_RCCEx_PeriphCLKConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80007a8:	f7ff ff62 	bl	8000670 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	4b27      	ldr	r3, [pc, #156]	; (8000850 <HAL_I2S_MspInit+0xf4>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	4a26      	ldr	r2, [pc, #152]	; (8000850 <HAL_I2S_MspInit+0xf4>)
 80007b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ba:	6413      	str	r3, [r2, #64]	; 0x40
 80007bc:	4b24      	ldr	r3, [pc, #144]	; (8000850 <HAL_I2S_MspInit+0xf4>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	4b20      	ldr	r3, [pc, #128]	; (8000850 <HAL_I2S_MspInit+0xf4>)
 80007ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d0:	4a1f      	ldr	r2, [pc, #124]	; (8000850 <HAL_I2S_MspInit+0xf4>)
 80007d2:	f043 0301 	orr.w	r3, r3, #1
 80007d6:	6313      	str	r3, [r2, #48]	; 0x30
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <HAL_I2S_MspInit+0xf4>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007dc:	f003 0301 	and.w	r3, r3, #1
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	4b19      	ldr	r3, [pc, #100]	; (8000850 <HAL_I2S_MspInit+0xf4>)
 80007ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ec:	4a18      	ldr	r2, [pc, #96]	; (8000850 <HAL_I2S_MspInit+0xf4>)
 80007ee:	f043 0304 	orr.w	r3, r3, #4
 80007f2:	6313      	str	r3, [r2, #48]	; 0x30
 80007f4:	4b16      	ldr	r3, [pc, #88]	; (8000850 <HAL_I2S_MspInit+0xf4>)
 80007f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f8:	f003 0304 	and.w	r3, r3, #4
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000800:	2310      	movs	r3, #16
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000810:	2306      	movs	r3, #6
 8000812:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000818:	4619      	mov	r1, r3
 800081a:	480e      	ldr	r0, [pc, #56]	; (8000854 <HAL_I2S_MspInit+0xf8>)
 800081c:	f000 faba 	bl	8000d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000820:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000832:	2306      	movs	r3, #6
 8000834:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083a:	4619      	mov	r1, r3
 800083c:	4806      	ldr	r0, [pc, #24]	; (8000858 <HAL_I2S_MspInit+0xfc>)
 800083e:	f000 faa9 	bl	8000d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000842:	bf00      	nop
 8000844:	3738      	adds	r7, #56	; 0x38
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40003c00 	.word	0x40003c00
 8000850:	40023800 	.word	0x40023800
 8000854:	40020000 	.word	0x40020000
 8000858:	40020800 	.word	0x40020800

0800085c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a19      	ldr	r2, [pc, #100]	; (80008e0 <HAL_SPI_MspInit+0x84>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d12b      	bne.n	80008d6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <HAL_SPI_MspInit+0x88>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	4a17      	ldr	r2, [pc, #92]	; (80008e4 <HAL_SPI_MspInit+0x88>)
 8000888:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800088c:	6453      	str	r3, [r2, #68]	; 0x44
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <HAL_SPI_MspInit+0x88>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000892:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <HAL_SPI_MspInit+0x88>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a10      	ldr	r2, [pc, #64]	; (80008e4 <HAL_SPI_MspInit+0x88>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <HAL_SPI_MspInit+0x88>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008b6:	23e0      	movs	r3, #224	; 0xe0
 80008b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008c6:	2305      	movs	r3, #5
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <HAL_SPI_MspInit+0x8c>)
 80008d2:	f000 fa5f 	bl	8000d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008d6:	bf00      	nop
 80008d8:	3728      	adds	r7, #40	; 0x28
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40013000 	.word	0x40013000
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020000 	.word	0x40020000

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <NMI_Handler+0x4>

080008f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <MemManage_Handler+0x4>

08000904 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <BusFault_Handler+0x4>

0800090c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <UsageFault_Handler+0x4>

08000914 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000942:	f000 f8d1 	bl	8000ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000950:	4802      	ldr	r0, [pc, #8]	; (800095c <OTG_FS_IRQHandler+0x10>)
 8000952:	f000 fe3f 	bl	80015d4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200074b4 	.word	0x200074b4

08000960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000968:	4a14      	ldr	r2, [pc, #80]	; (80009bc <_sbrk+0x5c>)
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <_sbrk+0x60>)
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000974:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <_sbrk+0x64>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d102      	bne.n	8000982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <_sbrk+0x64>)
 800097e:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <_sbrk+0x68>)
 8000980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <_sbrk+0x64>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	429a      	cmp	r2, r3
 800098e:	d207      	bcs.n	80009a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000990:	f006 ff82 	bl	8007898 <__errno>
 8000994:	4603      	mov	r3, r0
 8000996:	220c      	movs	r2, #12
 8000998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800099a:	f04f 33ff 	mov.w	r3, #4294967295
 800099e:	e009      	b.n	80009b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <_sbrk+0x64>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009a6:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	4a05      	ldr	r2, [pc, #20]	; (80009c4 <_sbrk+0x64>)
 80009b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009b2:	68fb      	ldr	r3, [r7, #12]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20020000 	.word	0x20020000
 80009c0:	00000400 	.word	0x00000400
 80009c4:	200070d0 	.word	0x200070d0
 80009c8:	20007900 	.word	0x20007900

080009cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <SystemInit+0x20>)
 80009d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009d6:	4a05      	ldr	r2, [pc, #20]	; (80009ec <SystemInit+0x20>)
 80009d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009f4:	480d      	ldr	r0, [pc, #52]	; (8000a2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009f6:	490e      	ldr	r1, [pc, #56]	; (8000a30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009fc:	e002      	b.n	8000a04 <LoopCopyDataInit>

080009fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a02:	3304      	adds	r3, #4

08000a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a08:	d3f9      	bcc.n	80009fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0a:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a0c:	4c0b      	ldr	r4, [pc, #44]	; (8000a3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a10:	e001      	b.n	8000a16 <LoopFillZerobss>

08000a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a14:	3204      	adds	r2, #4

08000a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a18:	d3fb      	bcc.n	8000a12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a1a:	f7ff ffd7 	bl	80009cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a1e:	f006 ff41 	bl	80078a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a22:	f7ff fc11 	bl	8000248 <main>
  bx  lr    
 8000a26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a30:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000a34:	08007c84 	.word	0x08007c84
  ldr r2, =_sbss
 8000a38:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000a3c:	20007900 	.word	0x20007900

08000a40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a40:	e7fe      	b.n	8000a40 <ADC_IRQHandler>
	...

08000a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	; (8000a84 <HAL_Init+0x40>)
 8000a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <HAL_Init+0x40>)
 8000a5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <HAL_Init+0x40>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a07      	ldr	r2, [pc, #28]	; (8000a84 <HAL_Init+0x40>)
 8000a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a6c:	2003      	movs	r0, #3
 8000a6e:	f000 f94f 	bl	8000d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a72:	2000      	movs	r0, #0
 8000a74:	f000 f808 	bl	8000a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a78:	f7ff fe00 	bl	800067c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023c00 	.word	0x40023c00

08000a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <HAL_InitTick+0x54>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <HAL_InitTick+0x58>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 f967 	bl	8000d7a <HAL_SYSTICK_Config>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00e      	b.n	8000ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b0f      	cmp	r3, #15
 8000aba:	d80a      	bhi.n	8000ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000abc:	2200      	movs	r2, #0
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f000 f92f 	bl	8000d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac8:	4a06      	ldr	r2, [pc, #24]	; (8000ae4 <HAL_InitTick+0x5c>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e000      	b.n	8000ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	20000004 	.word	0x20000004

08000ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_IncTick+0x20>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_IncTick+0x24>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <HAL_IncTick+0x24>)
 8000afa:	6013      	str	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	200070d4 	.word	0x200070d4

08000b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return uwTick;
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <HAL_GetTick+0x14>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	200070d4 	.word	0x200070d4

08000b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b30:	f7ff ffee 	bl	8000b10 <HAL_GetTick>
 8000b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b40:	d005      	beq.n	8000b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <HAL_Delay+0x44>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	461a      	mov	r2, r3
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b4e:	bf00      	nop
 8000b50:	f7ff ffde 	bl	8000b10 <HAL_GetTick>
 8000b54:	4602      	mov	r2, r0
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d8f7      	bhi.n	8000b50 <HAL_Delay+0x28>
  {
  }
}
 8000b60:	bf00      	nop
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000008 	.word	0x20000008

08000b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba2:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	60d3      	str	r3, [r2, #12]
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	f003 0307 	and.w	r3, r3, #7
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	db0b      	blt.n	8000bfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	f003 021f 	and.w	r2, r3, #31
 8000bec:	4907      	ldr	r1, [pc, #28]	; (8000c0c <__NVIC_EnableIRQ+0x38>)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	095b      	lsrs	r3, r3, #5
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000e100 	.word	0xe000e100

08000c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	db0a      	blt.n	8000c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	490c      	ldr	r1, [pc, #48]	; (8000c5c <__NVIC_SetPriority+0x4c>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	0112      	lsls	r2, r2, #4
 8000c30:	b2d2      	uxtb	r2, r2
 8000c32:	440b      	add	r3, r1
 8000c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c38:	e00a      	b.n	8000c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4908      	ldr	r1, [pc, #32]	; (8000c60 <__NVIC_SetPriority+0x50>)
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	3b04      	subs	r3, #4
 8000c48:	0112      	lsls	r2, r2, #4
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	440b      	add	r3, r1
 8000c4e:	761a      	strb	r2, [r3, #24]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000e100 	.word	0xe000e100
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	; 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	f1c3 0307 	rsb	r3, r3, #7
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	bf28      	it	cs
 8000c82:	2304      	movcs	r3, #4
 8000c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	2b06      	cmp	r3, #6
 8000c8c:	d902      	bls.n	8000c94 <NVIC_EncodePriority+0x30>
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3b03      	subs	r3, #3
 8000c92:	e000      	b.n	8000c96 <NVIC_EncodePriority+0x32>
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	f04f 32ff 	mov.w	r2, #4294967295
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43da      	mvns	r2, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cac:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	43d9      	mvns	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	4313      	orrs	r3, r2
         );
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3724      	adds	r7, #36	; 0x24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
	...

08000ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cdc:	d301      	bcc.n	8000ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00f      	b.n	8000d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <SysTick_Config+0x40>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cea:	210f      	movs	r1, #15
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f7ff ff8e 	bl	8000c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <SysTick_Config+0x40>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfa:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <SysTick_Config+0x40>)
 8000cfc:	2207      	movs	r2, #7
 8000cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	e000e010 	.word	0xe000e010

08000d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff ff29 	bl	8000b70 <__NVIC_SetPriorityGrouping>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b086      	sub	sp, #24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
 8000d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d38:	f7ff ff3e 	bl	8000bb8 <__NVIC_GetPriorityGrouping>
 8000d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	68b9      	ldr	r1, [r7, #8]
 8000d42:	6978      	ldr	r0, [r7, #20]
 8000d44:	f7ff ff8e 	bl	8000c64 <NVIC_EncodePriority>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff5d 	bl	8000c10 <__NVIC_SetPriority>
}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	4603      	mov	r3, r0
 8000d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff31 	bl	8000bd4 <__NVIC_EnableIRQ>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f7ff ffa2 	bl	8000ccc <SysTick_Config>
 8000d88:	4603      	mov	r3, r0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b089      	sub	sp, #36	; 0x24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
 8000dae:	e16b      	b.n	8001088 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000db0:	2201      	movs	r2, #1
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	f040 815a 	bne.w	8001082 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 0303 	and.w	r3, r3, #3
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d005      	beq.n	8000de6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d130      	bne.n	8000e48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	2203      	movs	r2, #3
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43db      	mvns	r3, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	68da      	ldr	r2, [r3, #12]
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	091b      	lsrs	r3, r3, #4
 8000e32:	f003 0201 	and.w	r2, r3, #1
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	2b03      	cmp	r3, #3
 8000e52:	d017      	beq.n	8000e84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	2203      	movs	r2, #3
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	689a      	ldr	r2, [r3, #8]
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0303 	and.w	r3, r3, #3
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d123      	bne.n	8000ed8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	08da      	lsrs	r2, r3, #3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3208      	adds	r2, #8
 8000e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	f003 0307 	and.w	r3, r3, #7
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	220f      	movs	r2, #15
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	691a      	ldr	r2, [r3, #16]
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	08da      	lsrs	r2, r3, #3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3208      	adds	r2, #8
 8000ed2:	69b9      	ldr	r1, [r7, #24]
 8000ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0203 	and.w	r2, r3, #3
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	f000 80b4 	beq.w	8001082 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b60      	ldr	r3, [pc, #384]	; (80010a0 <HAL_GPIO_Init+0x30c>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	4a5f      	ldr	r2, [pc, #380]	; (80010a0 <HAL_GPIO_Init+0x30c>)
 8000f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f28:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2a:	4b5d      	ldr	r3, [pc, #372]	; (80010a0 <HAL_GPIO_Init+0x30c>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f36:	4a5b      	ldr	r2, [pc, #364]	; (80010a4 <HAL_GPIO_Init+0x310>)
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	089b      	lsrs	r3, r3, #2
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f003 0303 	and.w	r3, r3, #3
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	220f      	movs	r2, #15
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a52      	ldr	r2, [pc, #328]	; (80010a8 <HAL_GPIO_Init+0x314>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d02b      	beq.n	8000fba <HAL_GPIO_Init+0x226>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a51      	ldr	r2, [pc, #324]	; (80010ac <HAL_GPIO_Init+0x318>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d025      	beq.n	8000fb6 <HAL_GPIO_Init+0x222>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a50      	ldr	r2, [pc, #320]	; (80010b0 <HAL_GPIO_Init+0x31c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d01f      	beq.n	8000fb2 <HAL_GPIO_Init+0x21e>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4f      	ldr	r2, [pc, #316]	; (80010b4 <HAL_GPIO_Init+0x320>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d019      	beq.n	8000fae <HAL_GPIO_Init+0x21a>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4e      	ldr	r2, [pc, #312]	; (80010b8 <HAL_GPIO_Init+0x324>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d013      	beq.n	8000faa <HAL_GPIO_Init+0x216>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4d      	ldr	r2, [pc, #308]	; (80010bc <HAL_GPIO_Init+0x328>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d00d      	beq.n	8000fa6 <HAL_GPIO_Init+0x212>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4c      	ldr	r2, [pc, #304]	; (80010c0 <HAL_GPIO_Init+0x32c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d007      	beq.n	8000fa2 <HAL_GPIO_Init+0x20e>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4b      	ldr	r2, [pc, #300]	; (80010c4 <HAL_GPIO_Init+0x330>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d101      	bne.n	8000f9e <HAL_GPIO_Init+0x20a>
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	e00e      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000f9e:	2308      	movs	r3, #8
 8000fa0:	e00c      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000fa2:	2306      	movs	r3, #6
 8000fa4:	e00a      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000fa6:	2305      	movs	r3, #5
 8000fa8:	e008      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000faa:	2304      	movs	r3, #4
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e004      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e002      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	69fa      	ldr	r2, [r7, #28]
 8000fbe:	f002 0203 	and.w	r2, r2, #3
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	4093      	lsls	r3, r2
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fcc:	4935      	ldr	r1, [pc, #212]	; (80010a4 <HAL_GPIO_Init+0x310>)
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fda:	4b3b      	ldr	r3, [pc, #236]	; (80010c8 <HAL_GPIO_Init+0x334>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ffe:	4a32      	ldr	r2, [pc, #200]	; (80010c8 <HAL_GPIO_Init+0x334>)
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001004:	4b30      	ldr	r3, [pc, #192]	; (80010c8 <HAL_GPIO_Init+0x334>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001028:	4a27      	ldr	r2, [pc, #156]	; (80010c8 <HAL_GPIO_Init+0x334>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800102e:	4b26      	ldr	r3, [pc, #152]	; (80010c8 <HAL_GPIO_Init+0x334>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001052:	4a1d      	ldr	r2, [pc, #116]	; (80010c8 <HAL_GPIO_Init+0x334>)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001058:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <HAL_GPIO_Init+0x334>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800107c:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <HAL_GPIO_Init+0x334>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3301      	adds	r3, #1
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	2b0f      	cmp	r3, #15
 800108c:	f67f ae90 	bls.w	8000db0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3724      	adds	r7, #36	; 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40013800 	.word	0x40013800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40020800 	.word	0x40020800
 80010b4:	40020c00 	.word	0x40020c00
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40021400 	.word	0x40021400
 80010c0:	40021800 	.word	0x40021800
 80010c4:	40021c00 	.word	0x40021c00
 80010c8:	40013c00 	.word	0x40013c00

080010cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	807b      	strh	r3, [r7, #2]
 80010d8:	4613      	mov	r3, r2
 80010da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010dc:	787b      	ldrb	r3, [r7, #1]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010e2:	887a      	ldrh	r2, [r7, #2]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010e8:	e003      	b.n	80010f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	041a      	lsls	r2, r3, #16
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	619a      	str	r2, [r3, #24]
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80010fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001100:	b08f      	sub	sp, #60	; 0x3c
 8001102:	af0a      	add	r7, sp, #40	; 0x28
 8001104:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d101      	bne.n	8001110 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e054      	b.n	80011ba <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d106      	bne.n	8001130 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f006 f844 	bl	80071b8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2203      	movs	r2, #3
 8001134:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800113c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001140:	2b00      	cmp	r3, #0
 8001142:	d102      	bne.n	800114a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f003 f883 	bl	800425a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	687e      	ldr	r6, [r7, #4]
 800115c:	466d      	mov	r5, sp
 800115e:	f106 0410 	add.w	r4, r6, #16
 8001162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001164:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001168:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800116a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800116e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001172:	1d33      	adds	r3, r6, #4
 8001174:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001176:	6838      	ldr	r0, [r7, #0]
 8001178:	f002 fffd 	bl	8004176 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2101      	movs	r1, #1
 8001182:	4618      	mov	r0, r3
 8001184:	f003 f87a 	bl	800427c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	687e      	ldr	r6, [r7, #4]
 8001190:	466d      	mov	r5, sp
 8001192:	f106 0410 	add.w	r4, r6, #16
 8001196:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001198:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800119a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800119c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800119e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80011a6:	1d33      	adds	r3, r6, #4
 80011a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011aa:	6838      	ldr	r0, [r7, #0]
 80011ac:	f003 fa02 	bl	80045b4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2201      	movs	r2, #1
 80011b4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011c2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80011c2:	b590      	push	{r4, r7, lr}
 80011c4:	b089      	sub	sp, #36	; 0x24
 80011c6:	af04      	add	r7, sp, #16
 80011c8:	6078      	str	r0, [r7, #4]
 80011ca:	4608      	mov	r0, r1
 80011cc:	4611      	mov	r1, r2
 80011ce:	461a      	mov	r2, r3
 80011d0:	4603      	mov	r3, r0
 80011d2:	70fb      	strb	r3, [r7, #3]
 80011d4:	460b      	mov	r3, r1
 80011d6:	70bb      	strb	r3, [r7, #2]
 80011d8:	4613      	mov	r3, r2
 80011da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d101      	bne.n	80011ea <HAL_HCD_HC_Init+0x28>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e076      	b.n	80012d8 <HAL_HCD_HC_Init+0x116>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80011f2:	78fb      	ldrb	r3, [r7, #3]
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	212c      	movs	r1, #44	; 0x2c
 80011f8:	fb01 f303 	mul.w	r3, r1, r3
 80011fc:	4413      	add	r3, r2
 80011fe:	333d      	adds	r3, #61	; 0x3d
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001204:	78fb      	ldrb	r3, [r7, #3]
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	212c      	movs	r1, #44	; 0x2c
 800120a:	fb01 f303 	mul.w	r3, r1, r3
 800120e:	4413      	add	r3, r2
 8001210:	3338      	adds	r3, #56	; 0x38
 8001212:	787a      	ldrb	r2, [r7, #1]
 8001214:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001216:	78fb      	ldrb	r3, [r7, #3]
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	212c      	movs	r1, #44	; 0x2c
 800121c:	fb01 f303 	mul.w	r3, r1, r3
 8001220:	4413      	add	r3, r2
 8001222:	3340      	adds	r3, #64	; 0x40
 8001224:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001226:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001228:	78fb      	ldrb	r3, [r7, #3]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	212c      	movs	r1, #44	; 0x2c
 800122e:	fb01 f303 	mul.w	r3, r1, r3
 8001232:	4413      	add	r3, r2
 8001234:	3339      	adds	r3, #57	; 0x39
 8001236:	78fa      	ldrb	r2, [r7, #3]
 8001238:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800123a:	78fb      	ldrb	r3, [r7, #3]
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	212c      	movs	r1, #44	; 0x2c
 8001240:	fb01 f303 	mul.w	r3, r1, r3
 8001244:	4413      	add	r3, r2
 8001246:	333f      	adds	r3, #63	; 0x3f
 8001248:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800124c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800124e:	78fb      	ldrb	r3, [r7, #3]
 8001250:	78ba      	ldrb	r2, [r7, #2]
 8001252:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001256:	b2d0      	uxtb	r0, r2
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	212c      	movs	r1, #44	; 0x2c
 800125c:	fb01 f303 	mul.w	r3, r1, r3
 8001260:	4413      	add	r3, r2
 8001262:	333a      	adds	r3, #58	; 0x3a
 8001264:	4602      	mov	r2, r0
 8001266:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001268:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800126c:	2b00      	cmp	r3, #0
 800126e:	da09      	bge.n	8001284 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001270:	78fb      	ldrb	r3, [r7, #3]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	212c      	movs	r1, #44	; 0x2c
 8001276:	fb01 f303 	mul.w	r3, r1, r3
 800127a:	4413      	add	r3, r2
 800127c:	333b      	adds	r3, #59	; 0x3b
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
 8001282:	e008      	b.n	8001296 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001284:	78fb      	ldrb	r3, [r7, #3]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	212c      	movs	r1, #44	; 0x2c
 800128a:	fb01 f303 	mul.w	r3, r1, r3
 800128e:	4413      	add	r3, r2
 8001290:	333b      	adds	r3, #59	; 0x3b
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001296:	78fb      	ldrb	r3, [r7, #3]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	212c      	movs	r1, #44	; 0x2c
 800129c:	fb01 f303 	mul.w	r3, r1, r3
 80012a0:	4413      	add	r3, r2
 80012a2:	333c      	adds	r3, #60	; 0x3c
 80012a4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80012a8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6818      	ldr	r0, [r3, #0]
 80012ae:	787c      	ldrb	r4, [r7, #1]
 80012b0:	78ba      	ldrb	r2, [r7, #2]
 80012b2:	78f9      	ldrb	r1, [r7, #3]
 80012b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80012b6:	9302      	str	r3, [sp, #8]
 80012b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	4623      	mov	r3, r4
 80012c6:	f003 fafb 	bl	80048c0 <USB_HC_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd90      	pop	{r4, r7, pc}

080012e0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80012ec:	2300      	movs	r3, #0
 80012ee:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d101      	bne.n	80012fe <HAL_HCD_HC_Halt+0x1e>
 80012fa:	2302      	movs	r3, #2
 80012fc:	e00f      	b.n	800131e <HAL_HCD_HC_Halt+0x3e>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	78fa      	ldrb	r2, [r7, #3]
 800130c:	4611      	mov	r1, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f003 fd4b 	bl	8004daa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800131c:	7bfb      	ldrb	r3, [r7, #15]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	4608      	mov	r0, r1
 8001332:	4611      	mov	r1, r2
 8001334:	461a      	mov	r2, r3
 8001336:	4603      	mov	r3, r0
 8001338:	70fb      	strb	r3, [r7, #3]
 800133a:	460b      	mov	r3, r1
 800133c:	70bb      	strb	r3, [r7, #2]
 800133e:	4613      	mov	r3, r2
 8001340:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001342:	78fb      	ldrb	r3, [r7, #3]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	212c      	movs	r1, #44	; 0x2c
 8001348:	fb01 f303 	mul.w	r3, r1, r3
 800134c:	4413      	add	r3, r2
 800134e:	333b      	adds	r3, #59	; 0x3b
 8001350:	78ba      	ldrb	r2, [r7, #2]
 8001352:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001354:	78fb      	ldrb	r3, [r7, #3]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	212c      	movs	r1, #44	; 0x2c
 800135a:	fb01 f303 	mul.w	r3, r1, r3
 800135e:	4413      	add	r3, r2
 8001360:	333f      	adds	r3, #63	; 0x3f
 8001362:	787a      	ldrb	r2, [r7, #1]
 8001364:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001366:	7c3b      	ldrb	r3, [r7, #16]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d112      	bne.n	8001392 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800136c:	78fb      	ldrb	r3, [r7, #3]
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	212c      	movs	r1, #44	; 0x2c
 8001372:	fb01 f303 	mul.w	r3, r1, r3
 8001376:	4413      	add	r3, r2
 8001378:	3342      	adds	r3, #66	; 0x42
 800137a:	2203      	movs	r2, #3
 800137c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800137e:	78fb      	ldrb	r3, [r7, #3]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	212c      	movs	r1, #44	; 0x2c
 8001384:	fb01 f303 	mul.w	r3, r1, r3
 8001388:	4413      	add	r3, r2
 800138a:	333d      	adds	r3, #61	; 0x3d
 800138c:	7f3a      	ldrb	r2, [r7, #28]
 800138e:	701a      	strb	r2, [r3, #0]
 8001390:	e008      	b.n	80013a4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001392:	78fb      	ldrb	r3, [r7, #3]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	212c      	movs	r1, #44	; 0x2c
 8001398:	fb01 f303 	mul.w	r3, r1, r3
 800139c:	4413      	add	r3, r2
 800139e:	3342      	adds	r3, #66	; 0x42
 80013a0:	2202      	movs	r2, #2
 80013a2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80013a4:	787b      	ldrb	r3, [r7, #1]
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	f200 80c6 	bhi.w	8001538 <HAL_HCD_HC_SubmitRequest+0x210>
 80013ac:	a201      	add	r2, pc, #4	; (adr r2, 80013b4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80013ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b2:	bf00      	nop
 80013b4:	080013c5 	.word	0x080013c5
 80013b8:	08001525 	.word	0x08001525
 80013bc:	08001429 	.word	0x08001429
 80013c0:	080014a7 	.word	0x080014a7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80013c4:	7c3b      	ldrb	r3, [r7, #16]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	f040 80b8 	bne.w	800153c <HAL_HCD_HC_SubmitRequest+0x214>
 80013cc:	78bb      	ldrb	r3, [r7, #2]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f040 80b4 	bne.w	800153c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80013d4:	8b3b      	ldrh	r3, [r7, #24]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d108      	bne.n	80013ec <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	212c      	movs	r1, #44	; 0x2c
 80013e0:	fb01 f303 	mul.w	r3, r1, r3
 80013e4:	4413      	add	r3, r2
 80013e6:	3355      	adds	r3, #85	; 0x55
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	212c      	movs	r1, #44	; 0x2c
 80013f2:	fb01 f303 	mul.w	r3, r1, r3
 80013f6:	4413      	add	r3, r2
 80013f8:	3355      	adds	r3, #85	; 0x55
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d109      	bne.n	8001414 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001400:	78fb      	ldrb	r3, [r7, #3]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	212c      	movs	r1, #44	; 0x2c
 8001406:	fb01 f303 	mul.w	r3, r1, r3
 800140a:	4413      	add	r3, r2
 800140c:	3342      	adds	r3, #66	; 0x42
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001412:	e093      	b.n	800153c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001414:	78fb      	ldrb	r3, [r7, #3]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	212c      	movs	r1, #44	; 0x2c
 800141a:	fb01 f303 	mul.w	r3, r1, r3
 800141e:	4413      	add	r3, r2
 8001420:	3342      	adds	r3, #66	; 0x42
 8001422:	2202      	movs	r2, #2
 8001424:	701a      	strb	r2, [r3, #0]
      break;
 8001426:	e089      	b.n	800153c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001428:	78bb      	ldrb	r3, [r7, #2]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d11d      	bne.n	800146a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800142e:	78fb      	ldrb	r3, [r7, #3]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	212c      	movs	r1, #44	; 0x2c
 8001434:	fb01 f303 	mul.w	r3, r1, r3
 8001438:	4413      	add	r3, r2
 800143a:	3355      	adds	r3, #85	; 0x55
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d109      	bne.n	8001456 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001442:	78fb      	ldrb	r3, [r7, #3]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	212c      	movs	r1, #44	; 0x2c
 8001448:	fb01 f303 	mul.w	r3, r1, r3
 800144c:	4413      	add	r3, r2
 800144e:	3342      	adds	r3, #66	; 0x42
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001454:	e073      	b.n	800153e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001456:	78fb      	ldrb	r3, [r7, #3]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	212c      	movs	r1, #44	; 0x2c
 800145c:	fb01 f303 	mul.w	r3, r1, r3
 8001460:	4413      	add	r3, r2
 8001462:	3342      	adds	r3, #66	; 0x42
 8001464:	2202      	movs	r2, #2
 8001466:	701a      	strb	r2, [r3, #0]
      break;
 8001468:	e069      	b.n	800153e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800146a:	78fb      	ldrb	r3, [r7, #3]
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	212c      	movs	r1, #44	; 0x2c
 8001470:	fb01 f303 	mul.w	r3, r1, r3
 8001474:	4413      	add	r3, r2
 8001476:	3354      	adds	r3, #84	; 0x54
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d109      	bne.n	8001492 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800147e:	78fb      	ldrb	r3, [r7, #3]
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	212c      	movs	r1, #44	; 0x2c
 8001484:	fb01 f303 	mul.w	r3, r1, r3
 8001488:	4413      	add	r3, r2
 800148a:	3342      	adds	r3, #66	; 0x42
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
      break;
 8001490:	e055      	b.n	800153e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001492:	78fb      	ldrb	r3, [r7, #3]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	212c      	movs	r1, #44	; 0x2c
 8001498:	fb01 f303 	mul.w	r3, r1, r3
 800149c:	4413      	add	r3, r2
 800149e:	3342      	adds	r3, #66	; 0x42
 80014a0:	2202      	movs	r2, #2
 80014a2:	701a      	strb	r2, [r3, #0]
      break;
 80014a4:	e04b      	b.n	800153e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80014a6:	78bb      	ldrb	r3, [r7, #2]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d11d      	bne.n	80014e8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	212c      	movs	r1, #44	; 0x2c
 80014b2:	fb01 f303 	mul.w	r3, r1, r3
 80014b6:	4413      	add	r3, r2
 80014b8:	3355      	adds	r3, #85	; 0x55
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d109      	bne.n	80014d4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80014c0:	78fb      	ldrb	r3, [r7, #3]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	212c      	movs	r1, #44	; 0x2c
 80014c6:	fb01 f303 	mul.w	r3, r1, r3
 80014ca:	4413      	add	r3, r2
 80014cc:	3342      	adds	r3, #66	; 0x42
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80014d2:	e034      	b.n	800153e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80014d4:	78fb      	ldrb	r3, [r7, #3]
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	212c      	movs	r1, #44	; 0x2c
 80014da:	fb01 f303 	mul.w	r3, r1, r3
 80014de:	4413      	add	r3, r2
 80014e0:	3342      	adds	r3, #66	; 0x42
 80014e2:	2202      	movs	r2, #2
 80014e4:	701a      	strb	r2, [r3, #0]
      break;
 80014e6:	e02a      	b.n	800153e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80014e8:	78fb      	ldrb	r3, [r7, #3]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	212c      	movs	r1, #44	; 0x2c
 80014ee:	fb01 f303 	mul.w	r3, r1, r3
 80014f2:	4413      	add	r3, r2
 80014f4:	3354      	adds	r3, #84	; 0x54
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d109      	bne.n	8001510 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	212c      	movs	r1, #44	; 0x2c
 8001502:	fb01 f303 	mul.w	r3, r1, r3
 8001506:	4413      	add	r3, r2
 8001508:	3342      	adds	r3, #66	; 0x42
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
      break;
 800150e:	e016      	b.n	800153e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001510:	78fb      	ldrb	r3, [r7, #3]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	212c      	movs	r1, #44	; 0x2c
 8001516:	fb01 f303 	mul.w	r3, r1, r3
 800151a:	4413      	add	r3, r2
 800151c:	3342      	adds	r3, #66	; 0x42
 800151e:	2202      	movs	r2, #2
 8001520:	701a      	strb	r2, [r3, #0]
      break;
 8001522:	e00c      	b.n	800153e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001524:	78fb      	ldrb	r3, [r7, #3]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	212c      	movs	r1, #44	; 0x2c
 800152a:	fb01 f303 	mul.w	r3, r1, r3
 800152e:	4413      	add	r3, r2
 8001530:	3342      	adds	r3, #66	; 0x42
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
      break;
 8001536:	e002      	b.n	800153e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001538:	bf00      	nop
 800153a:	e000      	b.n	800153e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800153c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800153e:	78fb      	ldrb	r3, [r7, #3]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	212c      	movs	r1, #44	; 0x2c
 8001544:	fb01 f303 	mul.w	r3, r1, r3
 8001548:	4413      	add	r3, r2
 800154a:	3344      	adds	r3, #68	; 0x44
 800154c:	697a      	ldr	r2, [r7, #20]
 800154e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001550:	78fb      	ldrb	r3, [r7, #3]
 8001552:	8b3a      	ldrh	r2, [r7, #24]
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	202c      	movs	r0, #44	; 0x2c
 8001558:	fb00 f303 	mul.w	r3, r0, r3
 800155c:	440b      	add	r3, r1
 800155e:	334c      	adds	r3, #76	; 0x4c
 8001560:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	212c      	movs	r1, #44	; 0x2c
 8001568:	fb01 f303 	mul.w	r3, r1, r3
 800156c:	4413      	add	r3, r2
 800156e:	3360      	adds	r3, #96	; 0x60
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	212c      	movs	r1, #44	; 0x2c
 800157a:	fb01 f303 	mul.w	r3, r1, r3
 800157e:	4413      	add	r3, r2
 8001580:	3350      	adds	r3, #80	; 0x50
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001586:	78fb      	ldrb	r3, [r7, #3]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	212c      	movs	r1, #44	; 0x2c
 800158c:	fb01 f303 	mul.w	r3, r1, r3
 8001590:	4413      	add	r3, r2
 8001592:	3339      	adds	r3, #57	; 0x39
 8001594:	78fa      	ldrb	r2, [r7, #3]
 8001596:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	212c      	movs	r1, #44	; 0x2c
 800159e:	fb01 f303 	mul.w	r3, r1, r3
 80015a2:	4413      	add	r3, r2
 80015a4:	3361      	adds	r3, #97	; 0x61
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6818      	ldr	r0, [r3, #0]
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	222c      	movs	r2, #44	; 0x2c
 80015b2:	fb02 f303 	mul.w	r3, r2, r3
 80015b6:	3338      	adds	r3, #56	; 0x38
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	18d1      	adds	r1, r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	461a      	mov	r2, r3
 80015c4:	f003 fa9e 	bl	8004b04 <USB_HC_StartXfer>
 80015c8:	4603      	mov	r3, r0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop

080015d4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f002 ff9f 	bl	800452e <USB_GetMode>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	f040 80f6 	bne.w	80017e4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f002 ff83 	bl	8004508 <USB_ReadInterrupts>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	f000 80ec 	beq.w	80017e2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f002 ff7a 	bl	8004508 <USB_ReadInterrupts>
 8001614:	4603      	mov	r3, r0
 8001616:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800161a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800161e:	d104      	bne.n	800162a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001628:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f002 ff6a 	bl	8004508 <USB_ReadInterrupts>
 8001634:	4603      	mov	r3, r0
 8001636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800163a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800163e:	d104      	bne.n	800164a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001648:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f002 ff5a 	bl	8004508 <USB_ReadInterrupts>
 8001654:	4603      	mov	r3, r0
 8001656:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800165a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800165e:	d104      	bne.n	800166a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001668:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f002 ff4a 	bl	8004508 <USB_ReadInterrupts>
 8001674:	4603      	mov	r3, r0
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b02      	cmp	r3, #2
 800167c:	d103      	bne.n	8001686 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2202      	movs	r2, #2
 8001684:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f002 ff3c 	bl	8004508 <USB_ReadInterrupts>
 8001690:	4603      	mov	r3, r0
 8001692:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001696:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800169a:	d11c      	bne.n	80016d6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80016a4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10f      	bne.n	80016d6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80016b6:	2110      	movs	r1, #16
 80016b8:	6938      	ldr	r0, [r7, #16]
 80016ba:	f002 fe2b 	bl	8004314 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80016be:	6938      	ldr	r0, [r7, #16]
 80016c0:	f002 fe5c 	bl	800437c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2101      	movs	r1, #1
 80016ca:	4618      	mov	r0, r3
 80016cc:	f003 f832 	bl	8004734 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f005 fdef 	bl	80072b4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f002 ff14 	bl	8004508 <USB_ReadInterrupts>
 80016e0:	4603      	mov	r3, r0
 80016e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016ea:	d102      	bne.n	80016f2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f001 f89e 	bl	800282e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f002 ff06 	bl	8004508 <USB_ReadInterrupts>
 80016fc:	4603      	mov	r3, r0
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b08      	cmp	r3, #8
 8001704:	d106      	bne.n	8001714 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f005 fdb8 	bl	800727c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2208      	movs	r2, #8
 8001712:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f002 fef5 	bl	8004508 <USB_ReadInterrupts>
 800171e:	4603      	mov	r3, r0
 8001720:	f003 0310 	and.w	r3, r3, #16
 8001724:	2b10      	cmp	r3, #16
 8001726:	d101      	bne.n	800172c <HAL_HCD_IRQHandler+0x158>
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <HAL_HCD_IRQHandler+0x15a>
 800172c:	2300      	movs	r3, #0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d012      	beq.n	8001758 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	699a      	ldr	r2, [r3, #24]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0210 	bic.w	r2, r2, #16
 8001740:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 ffa1 	bl	800268a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	699a      	ldr	r2, [r3, #24]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 0210 	orr.w	r2, r2, #16
 8001756:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f002 fed3 	bl	8004508 <USB_ReadInterrupts>
 8001762:	4603      	mov	r3, r0
 8001764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001768:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800176c:	d13a      	bne.n	80017e4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f003 fb08 	bl	8004d88 <USB_HC_ReadInterrupt>
 8001778:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	e025      	b.n	80017cc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	fa22 f303 	lsr.w	r3, r2, r3
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b00      	cmp	r3, #0
 8001792:	d018      	beq.n	80017c6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	015a      	lsls	r2, r3, #5
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4413      	add	r3, r2
 800179c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017aa:	d106      	bne.n	80017ba <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	4619      	mov	r1, r3
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f8ab 	bl	800190e <HCD_HC_IN_IRQHandler>
 80017b8:	e005      	b.n	80017c6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	4619      	mov	r1, r3
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 fbf9 	bl	8001fb8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	3301      	adds	r3, #1
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d3d4      	bcc.n	8001780 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017de:	615a      	str	r2, [r3, #20]
 80017e0:	e000      	b.n	80017e4 <HAL_HCD_IRQHandler+0x210>
      return;
 80017e2:	bf00      	nop
    }
  }
}
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d101      	bne.n	8001800 <HAL_HCD_Start+0x16>
 80017fc:	2302      	movs	r3, #2
 80017fe:	e013      	b.n	8001828 <HAL_HCD_Start+0x3e>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2101      	movs	r1, #1
 800180e:	4618      	mov	r0, r3
 8001810:	f002 fff4 	bl	80047fc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f002 fd0d 	bl	8004238 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800183e:	2b01      	cmp	r3, #1
 8001840:	d101      	bne.n	8001846 <HAL_HCD_Stop+0x16>
 8001842:	2302      	movs	r3, #2
 8001844:	e00d      	b.n	8001862 <HAL_HCD_Stop+0x32>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f003 fbe2 	bl	800501c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f002 ff96 	bl	80047a8 <USB_ResetPort>
 800187c:	4603      	mov	r3, r0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	460b      	mov	r3, r1
 8001890:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	212c      	movs	r1, #44	; 0x2c
 8001898:	fb01 f303 	mul.w	r3, r1, r3
 800189c:	4413      	add	r3, r2
 800189e:	3360      	adds	r3, #96	; 0x60
 80018a0:	781b      	ldrb	r3, [r3, #0]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	460b      	mov	r3, r1
 80018b8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	212c      	movs	r1, #44	; 0x2c
 80018c0:	fb01 f303 	mul.w	r3, r1, r3
 80018c4:	4413      	add	r3, r2
 80018c6:	3350      	adds	r3, #80	; 0x50
 80018c8:	681b      	ldr	r3, [r3, #0]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f002 ffda 	bl	800489c <USB_GetCurrentFrame>
 80018e8:	4603      	mov	r3, r0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f002 ffb5 	bl	800486e <USB_GetHostSpeed>
 8001904:	4603      	mov	r3, r0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	460b      	mov	r3, r1
 8001918:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	015a      	lsls	r2, r3, #5
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4413      	add	r3, r2
 8001930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	2b04      	cmp	r3, #4
 800193c:	d11a      	bne.n	8001974 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	015a      	lsls	r2, r3, #5
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	4413      	add	r3, r2
 8001946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800194a:	461a      	mov	r2, r3
 800194c:	2304      	movs	r3, #4
 800194e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	212c      	movs	r1, #44	; 0x2c
 8001956:	fb01 f303 	mul.w	r3, r1, r3
 800195a:	4413      	add	r3, r2
 800195c:	3361      	adds	r3, #97	; 0x61
 800195e:	2206      	movs	r2, #6
 8001960:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f003 fa1c 	bl	8004daa <USB_HC_Halt>
 8001972:	e0af      	b.n	8001ad4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	015a      	lsls	r2, r3, #5
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	4413      	add	r3, r2
 800197c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800198a:	d11b      	bne.n	80019c4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	015a      	lsls	r2, r3, #5
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4413      	add	r3, r2
 8001994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001998:	461a      	mov	r2, r3
 800199a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800199e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	212c      	movs	r1, #44	; 0x2c
 80019a6:	fb01 f303 	mul.w	r3, r1, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	3361      	adds	r3, #97	; 0x61
 80019ae:	2207      	movs	r2, #7
 80019b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	4611      	mov	r1, r2
 80019bc:	4618      	mov	r0, r3
 80019be:	f003 f9f4 	bl	8004daa <USB_HC_Halt>
 80019c2:	e087      	b.n	8001ad4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	015a      	lsls	r2, r3, #5
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	4413      	add	r3, r2
 80019cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 0320 	and.w	r3, r3, #32
 80019d6:	2b20      	cmp	r3, #32
 80019d8:	d109      	bne.n	80019ee <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	015a      	lsls	r2, r3, #5
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	4413      	add	r3, r2
 80019e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019e6:	461a      	mov	r2, r3
 80019e8:	2320      	movs	r3, #32
 80019ea:	6093      	str	r3, [r2, #8]
 80019ec:	e072      	b.n	8001ad4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	015a      	lsls	r2, r3, #5
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	4413      	add	r3, r2
 80019f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d11a      	bne.n	8001a3a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	015a      	lsls	r2, r3, #5
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a10:	461a      	mov	r2, r3
 8001a12:	2308      	movs	r3, #8
 8001a14:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	212c      	movs	r1, #44	; 0x2c
 8001a1c:	fb01 f303 	mul.w	r3, r1, r3
 8001a20:	4413      	add	r3, r2
 8001a22:	3361      	adds	r3, #97	; 0x61
 8001a24:	2205      	movs	r2, #5
 8001a26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	4611      	mov	r1, r2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f003 f9b9 	bl	8004daa <USB_HC_Halt>
 8001a38:	e04c      	b.n	8001ad4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	015a      	lsls	r2, r3, #5
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4413      	add	r3, r2
 8001a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a50:	d11b      	bne.n	8001a8a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	015a      	lsls	r2, r3, #5
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a5e:	461a      	mov	r2, r3
 8001a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a64:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	212c      	movs	r1, #44	; 0x2c
 8001a6c:	fb01 f303 	mul.w	r3, r1, r3
 8001a70:	4413      	add	r3, r2
 8001a72:	3361      	adds	r3, #97	; 0x61
 8001a74:	2208      	movs	r2, #8
 8001a76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	4611      	mov	r1, r2
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 f991 	bl	8004daa <USB_HC_Halt>
 8001a88:	e024      	b.n	8001ad4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	015a      	lsls	r2, r3, #5
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4413      	add	r3, r2
 8001a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a9c:	2b80      	cmp	r3, #128	; 0x80
 8001a9e:	d119      	bne.n	8001ad4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	015a      	lsls	r2, r3, #5
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aac:	461a      	mov	r2, r3
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	212c      	movs	r1, #44	; 0x2c
 8001ab8:	fb01 f303 	mul.w	r3, r1, r3
 8001abc:	4413      	add	r3, r2
 8001abe:	3361      	adds	r3, #97	; 0x61
 8001ac0:	2206      	movs	r2, #6
 8001ac2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	4611      	mov	r1, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 f96b 	bl	8004daa <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	015a      	lsls	r2, r3, #5
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4413      	add	r3, r2
 8001adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aea:	d112      	bne.n	8001b12 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	4611      	mov	r1, r2
 8001af6:	4618      	mov	r0, r3
 8001af8:	f003 f957 	bl	8004daa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	015a      	lsls	r2, r3, #5
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	4413      	add	r3, r2
 8001b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b08:	461a      	mov	r2, r3
 8001b0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b0e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001b10:	e24e      	b.n	8001fb0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	015a      	lsls	r2, r3, #5
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	4413      	add	r3, r2
 8001b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	f040 80df 	bne.w	8001ce8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d019      	beq.n	8001b66 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	212c      	movs	r1, #44	; 0x2c
 8001b38:	fb01 f303 	mul.w	r3, r1, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3348      	adds	r3, #72	; 0x48
 8001b40:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	0159      	lsls	r1, r3, #5
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	440b      	add	r3, r1
 8001b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001b54:	1ad2      	subs	r2, r2, r3
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	202c      	movs	r0, #44	; 0x2c
 8001b5c:	fb00 f303 	mul.w	r3, r0, r3
 8001b60:	440b      	add	r3, r1
 8001b62:	3350      	adds	r3, #80	; 0x50
 8001b64:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	212c      	movs	r1, #44	; 0x2c
 8001b6c:	fb01 f303 	mul.w	r3, r1, r3
 8001b70:	4413      	add	r3, r2
 8001b72:	3361      	adds	r3, #97	; 0x61
 8001b74:	2201      	movs	r2, #1
 8001b76:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	212c      	movs	r1, #44	; 0x2c
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	4413      	add	r3, r2
 8001b84:	335c      	adds	r3, #92	; 0x5c
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	015a      	lsls	r2, r3, #5
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4413      	add	r3, r2
 8001b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b96:	461a      	mov	r2, r3
 8001b98:	2301      	movs	r3, #1
 8001b9a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	212c      	movs	r1, #44	; 0x2c
 8001ba2:	fb01 f303 	mul.w	r3, r1, r3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	333f      	adds	r3, #63	; 0x3f
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d009      	beq.n	8001bc4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	212c      	movs	r1, #44	; 0x2c
 8001bb6:	fb01 f303 	mul.w	r3, r1, r3
 8001bba:	4413      	add	r3, r2
 8001bbc:	333f      	adds	r3, #63	; 0x3f
 8001bbe:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d111      	bne.n	8001be8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	4611      	mov	r1, r2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f003 f8eb 	bl	8004daa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	015a      	lsls	r2, r3, #5
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4413      	add	r3, r2
 8001bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be0:	461a      	mov	r2, r3
 8001be2:	2310      	movs	r3, #16
 8001be4:	6093      	str	r3, [r2, #8]
 8001be6:	e03a      	b.n	8001c5e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	212c      	movs	r1, #44	; 0x2c
 8001bee:	fb01 f303 	mul.w	r3, r1, r3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	333f      	adds	r3, #63	; 0x3f
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d009      	beq.n	8001c10 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	212c      	movs	r1, #44	; 0x2c
 8001c02:	fb01 f303 	mul.w	r3, r1, r3
 8001c06:	4413      	add	r3, r2
 8001c08:	333f      	adds	r3, #63	; 0x3f
 8001c0a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d126      	bne.n	8001c5e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	015a      	lsls	r2, r3, #5
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	4413      	add	r3, r2
 8001c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	0151      	lsls	r1, r2, #5
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	440a      	add	r2, r1
 8001c26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c2e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	212c      	movs	r1, #44	; 0x2c
 8001c36:	fb01 f303 	mul.w	r3, r1, r3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3360      	adds	r3, #96	; 0x60
 8001c3e:	2201      	movs	r2, #1
 8001c40:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	b2d9      	uxtb	r1, r3
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	202c      	movs	r0, #44	; 0x2c
 8001c4c:	fb00 f303 	mul.w	r3, r0, r3
 8001c50:	4413      	add	r3, r2
 8001c52:	3360      	adds	r3, #96	; 0x60
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f005 fb39 	bl	80072d0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d12b      	bne.n	8001cbe <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	212c      	movs	r1, #44	; 0x2c
 8001c6c:	fb01 f303 	mul.w	r3, r1, r3
 8001c70:	4413      	add	r3, r2
 8001c72:	3348      	adds	r3, #72	; 0x48
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	202c      	movs	r0, #44	; 0x2c
 8001c7c:	fb00 f202 	mul.w	r2, r0, r2
 8001c80:	440a      	add	r2, r1
 8001c82:	3240      	adds	r2, #64	; 0x40
 8001c84:	8812      	ldrh	r2, [r2, #0]
 8001c86:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 818e 	beq.w	8001fb0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	212c      	movs	r1, #44	; 0x2c
 8001c9a:	fb01 f303 	mul.w	r3, r1, r3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3354      	adds	r3, #84	; 0x54
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	f083 0301 	eor.w	r3, r3, #1
 8001ca8:	b2d8      	uxtb	r0, r3
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	212c      	movs	r1, #44	; 0x2c
 8001cb0:	fb01 f303 	mul.w	r3, r1, r3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3354      	adds	r3, #84	; 0x54
 8001cb8:	4602      	mov	r2, r0
 8001cba:	701a      	strb	r2, [r3, #0]
}
 8001cbc:	e178      	b.n	8001fb0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	212c      	movs	r1, #44	; 0x2c
 8001cc4:	fb01 f303 	mul.w	r3, r1, r3
 8001cc8:	4413      	add	r3, r2
 8001cca:	3354      	adds	r3, #84	; 0x54
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	f083 0301 	eor.w	r3, r3, #1
 8001cd2:	b2d8      	uxtb	r0, r3
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	212c      	movs	r1, #44	; 0x2c
 8001cda:	fb01 f303 	mul.w	r3, r1, r3
 8001cde:	4413      	add	r3, r2
 8001ce0:	3354      	adds	r3, #84	; 0x54
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	701a      	strb	r2, [r3, #0]
}
 8001ce6:	e163      	b.n	8001fb0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	015a      	lsls	r2, r3, #5
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4413      	add	r3, r2
 8001cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	f040 80f6 	bne.w	8001eec <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	212c      	movs	r1, #44	; 0x2c
 8001d06:	fb01 f303 	mul.w	r3, r1, r3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3361      	adds	r3, #97	; 0x61
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d109      	bne.n	8001d28 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	212c      	movs	r1, #44	; 0x2c
 8001d1a:	fb01 f303 	mul.w	r3, r1, r3
 8001d1e:	4413      	add	r3, r2
 8001d20:	3360      	adds	r3, #96	; 0x60
 8001d22:	2201      	movs	r2, #1
 8001d24:	701a      	strb	r2, [r3, #0]
 8001d26:	e0c9      	b.n	8001ebc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	212c      	movs	r1, #44	; 0x2c
 8001d2e:	fb01 f303 	mul.w	r3, r1, r3
 8001d32:	4413      	add	r3, r2
 8001d34:	3361      	adds	r3, #97	; 0x61
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b05      	cmp	r3, #5
 8001d3a:	d109      	bne.n	8001d50 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	212c      	movs	r1, #44	; 0x2c
 8001d42:	fb01 f303 	mul.w	r3, r1, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	3360      	adds	r3, #96	; 0x60
 8001d4a:	2205      	movs	r2, #5
 8001d4c:	701a      	strb	r2, [r3, #0]
 8001d4e:	e0b5      	b.n	8001ebc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	212c      	movs	r1, #44	; 0x2c
 8001d56:	fb01 f303 	mul.w	r3, r1, r3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3361      	adds	r3, #97	; 0x61
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b06      	cmp	r3, #6
 8001d62:	d009      	beq.n	8001d78 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	212c      	movs	r1, #44	; 0x2c
 8001d6a:	fb01 f303 	mul.w	r3, r1, r3
 8001d6e:	4413      	add	r3, r2
 8001d70:	3361      	adds	r3, #97	; 0x61
 8001d72:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d150      	bne.n	8001e1a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	212c      	movs	r1, #44	; 0x2c
 8001d7e:	fb01 f303 	mul.w	r3, r1, r3
 8001d82:	4413      	add	r3, r2
 8001d84:	335c      	adds	r3, #92	; 0x5c
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	1c5a      	adds	r2, r3, #1
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	202c      	movs	r0, #44	; 0x2c
 8001d90:	fb00 f303 	mul.w	r3, r0, r3
 8001d94:	440b      	add	r3, r1
 8001d96:	335c      	adds	r3, #92	; 0x5c
 8001d98:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	212c      	movs	r1, #44	; 0x2c
 8001da0:	fb01 f303 	mul.w	r3, r1, r3
 8001da4:	4413      	add	r3, r2
 8001da6:	335c      	adds	r3, #92	; 0x5c
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d912      	bls.n	8001dd4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	212c      	movs	r1, #44	; 0x2c
 8001db4:	fb01 f303 	mul.w	r3, r1, r3
 8001db8:	4413      	add	r3, r2
 8001dba:	335c      	adds	r3, #92	; 0x5c
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	212c      	movs	r1, #44	; 0x2c
 8001dc6:	fb01 f303 	mul.w	r3, r1, r3
 8001dca:	4413      	add	r3, r2
 8001dcc:	3360      	adds	r3, #96	; 0x60
 8001dce:	2204      	movs	r2, #4
 8001dd0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001dd2:	e073      	b.n	8001ebc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	212c      	movs	r1, #44	; 0x2c
 8001dda:	fb01 f303 	mul.w	r3, r1, r3
 8001dde:	4413      	add	r3, r2
 8001de0:	3360      	adds	r3, #96	; 0x60
 8001de2:	2202      	movs	r2, #2
 8001de4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	015a      	lsls	r2, r3, #5
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001dfc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e04:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	015a      	lsls	r2, r3, #5
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e12:	461a      	mov	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001e18:	e050      	b.n	8001ebc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	212c      	movs	r1, #44	; 0x2c
 8001e20:	fb01 f303 	mul.w	r3, r1, r3
 8001e24:	4413      	add	r3, r2
 8001e26:	3361      	adds	r3, #97	; 0x61
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d122      	bne.n	8001e74 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	212c      	movs	r1, #44	; 0x2c
 8001e34:	fb01 f303 	mul.w	r3, r1, r3
 8001e38:	4413      	add	r3, r2
 8001e3a:	3360      	adds	r3, #96	; 0x60
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	015a      	lsls	r2, r3, #5
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4413      	add	r3, r2
 8001e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e56:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e5e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	015a      	lsls	r2, r3, #5
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	e023      	b.n	8001ebc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	212c      	movs	r1, #44	; 0x2c
 8001e7a:	fb01 f303 	mul.w	r3, r1, r3
 8001e7e:	4413      	add	r3, r2
 8001e80:	3361      	adds	r3, #97	; 0x61
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b07      	cmp	r3, #7
 8001e86:	d119      	bne.n	8001ebc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	212c      	movs	r1, #44	; 0x2c
 8001e8e:	fb01 f303 	mul.w	r3, r1, r3
 8001e92:	4413      	add	r3, r2
 8001e94:	335c      	adds	r3, #92	; 0x5c
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	202c      	movs	r0, #44	; 0x2c
 8001ea0:	fb00 f303 	mul.w	r3, r0, r3
 8001ea4:	440b      	add	r3, r1
 8001ea6:	335c      	adds	r3, #92	; 0x5c
 8001ea8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	212c      	movs	r1, #44	; 0x2c
 8001eb0:	fb01 f303 	mul.w	r3, r1, r3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3360      	adds	r3, #96	; 0x60
 8001eb8:	2204      	movs	r2, #4
 8001eba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	015a      	lsls	r2, r3, #5
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec8:	461a      	mov	r2, r3
 8001eca:	2302      	movs	r3, #2
 8001ecc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	b2d9      	uxtb	r1, r3
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	202c      	movs	r0, #44	; 0x2c
 8001ed8:	fb00 f303 	mul.w	r3, r0, r3
 8001edc:	4413      	add	r3, r2
 8001ede:	3360      	adds	r3, #96	; 0x60
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f005 f9f3 	bl	80072d0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001eea:	e061      	b.n	8001fb0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	015a      	lsls	r2, r3, #5
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 0310 	and.w	r3, r3, #16
 8001efe:	2b10      	cmp	r3, #16
 8001f00:	d156      	bne.n	8001fb0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	212c      	movs	r1, #44	; 0x2c
 8001f08:	fb01 f303 	mul.w	r3, r1, r3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	333f      	adds	r3, #63	; 0x3f
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d111      	bne.n	8001f3a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	212c      	movs	r1, #44	; 0x2c
 8001f1c:	fb01 f303 	mul.w	r3, r1, r3
 8001f20:	4413      	add	r3, r2
 8001f22:	335c      	adds	r3, #92	; 0x5c
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f002 ff39 	bl	8004daa <USB_HC_Halt>
 8001f38:	e031      	b.n	8001f9e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	212c      	movs	r1, #44	; 0x2c
 8001f40:	fb01 f303 	mul.w	r3, r1, r3
 8001f44:	4413      	add	r3, r2
 8001f46:	333f      	adds	r3, #63	; 0x3f
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d009      	beq.n	8001f62 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	212c      	movs	r1, #44	; 0x2c
 8001f54:	fb01 f303 	mul.w	r3, r1, r3
 8001f58:	4413      	add	r3, r2
 8001f5a:	333f      	adds	r3, #63	; 0x3f
 8001f5c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d11d      	bne.n	8001f9e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	212c      	movs	r1, #44	; 0x2c
 8001f68:	fb01 f303 	mul.w	r3, r1, r3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	335c      	adds	r3, #92	; 0x5c
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d110      	bne.n	8001f9e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	212c      	movs	r1, #44	; 0x2c
 8001f82:	fb01 f303 	mul.w	r3, r1, r3
 8001f86:	4413      	add	r3, r2
 8001f88:	3361      	adds	r3, #97	; 0x61
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	4611      	mov	r1, r2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f002 ff06 	bl	8004daa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	015a      	lsls	r2, r3, #5
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001faa:	461a      	mov	r2, r3
 8001fac:	2310      	movs	r3, #16
 8001fae:	6093      	str	r3, [r2, #8]
}
 8001fb0:	bf00      	nop
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001fce:	78fb      	ldrb	r3, [r7, #3]
 8001fd0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	015a      	lsls	r2, r3, #5
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	4413      	add	r3, r2
 8001fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d11a      	bne.n	800201e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	015a      	lsls	r2, r3, #5
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	4413      	add	r3, r2
 8001ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	212c      	movs	r1, #44	; 0x2c
 8002000:	fb01 f303 	mul.w	r3, r1, r3
 8002004:	4413      	add	r3, r2
 8002006:	3361      	adds	r3, #97	; 0x61
 8002008:	2206      	movs	r2, #6
 800200a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	4611      	mov	r1, r2
 8002016:	4618      	mov	r0, r3
 8002018:	f002 fec7 	bl	8004daa <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800201c:	e331      	b.n	8002682 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	015a      	lsls	r2, r3, #5
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	4413      	add	r3, r2
 8002026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 0320 	and.w	r3, r3, #32
 8002030:	2b20      	cmp	r3, #32
 8002032:	d12e      	bne.n	8002092 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	015a      	lsls	r2, r3, #5
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	4413      	add	r3, r2
 800203c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002040:	461a      	mov	r2, r3
 8002042:	2320      	movs	r3, #32
 8002044:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	212c      	movs	r1, #44	; 0x2c
 800204c:	fb01 f303 	mul.w	r3, r1, r3
 8002050:	4413      	add	r3, r2
 8002052:	333d      	adds	r3, #61	; 0x3d
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b01      	cmp	r3, #1
 8002058:	f040 8313 	bne.w	8002682 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	212c      	movs	r1, #44	; 0x2c
 8002062:	fb01 f303 	mul.w	r3, r1, r3
 8002066:	4413      	add	r3, r2
 8002068:	333d      	adds	r3, #61	; 0x3d
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	212c      	movs	r1, #44	; 0x2c
 8002074:	fb01 f303 	mul.w	r3, r1, r3
 8002078:	4413      	add	r3, r2
 800207a:	3360      	adds	r3, #96	; 0x60
 800207c:	2202      	movs	r2, #2
 800207e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f002 fe8d 	bl	8004daa <USB_HC_Halt>
}
 8002090:	e2f7      	b.n	8002682 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	015a      	lsls	r2, r3, #5
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	4413      	add	r3, r2
 800209a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020a8:	d112      	bne.n	80020d0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b6:	461a      	mov	r2, r3
 80020b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020bc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	4611      	mov	r1, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f002 fe6e 	bl	8004daa <USB_HC_Halt>
}
 80020ce:	e2d8      	b.n	8002682 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	015a      	lsls	r2, r3, #5
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	4413      	add	r3, r2
 80020d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d140      	bne.n	8002168 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	212c      	movs	r1, #44	; 0x2c
 80020ec:	fb01 f303 	mul.w	r3, r1, r3
 80020f0:	4413      	add	r3, r2
 80020f2:	335c      	adds	r3, #92	; 0x5c
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	015a      	lsls	r2, r3, #5
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	4413      	add	r3, r2
 8002100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210a:	2b40      	cmp	r3, #64	; 0x40
 800210c:	d111      	bne.n	8002132 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	212c      	movs	r1, #44	; 0x2c
 8002114:	fb01 f303 	mul.w	r3, r1, r3
 8002118:	4413      	add	r3, r2
 800211a:	333d      	adds	r3, #61	; 0x3d
 800211c:	2201      	movs	r2, #1
 800211e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	4413      	add	r3, r2
 8002128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212c:	461a      	mov	r2, r3
 800212e:	2340      	movs	r3, #64	; 0x40
 8002130:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	015a      	lsls	r2, r3, #5
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	4413      	add	r3, r2
 800213a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213e:	461a      	mov	r2, r3
 8002140:	2301      	movs	r3, #1
 8002142:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	212c      	movs	r1, #44	; 0x2c
 800214a:	fb01 f303 	mul.w	r3, r1, r3
 800214e:	4413      	add	r3, r2
 8002150:	3361      	adds	r3, #97	; 0x61
 8002152:	2201      	movs	r2, #1
 8002154:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f002 fe22 	bl	8004daa <USB_HC_Halt>
}
 8002166:	e28c      	b.n	8002682 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	015a      	lsls	r2, r3, #5
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	4413      	add	r3, r2
 8002170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217a:	2b40      	cmp	r3, #64	; 0x40
 800217c:	d12c      	bne.n	80021d8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	212c      	movs	r1, #44	; 0x2c
 8002184:	fb01 f303 	mul.w	r3, r1, r3
 8002188:	4413      	add	r3, r2
 800218a:	3361      	adds	r3, #97	; 0x61
 800218c:	2204      	movs	r2, #4
 800218e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	212c      	movs	r1, #44	; 0x2c
 8002196:	fb01 f303 	mul.w	r3, r1, r3
 800219a:	4413      	add	r3, r2
 800219c:	333d      	adds	r3, #61	; 0x3d
 800219e:	2201      	movs	r2, #1
 80021a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	212c      	movs	r1, #44	; 0x2c
 80021a8:	fb01 f303 	mul.w	r3, r1, r3
 80021ac:	4413      	add	r3, r2
 80021ae:	335c      	adds	r3, #92	; 0x5c
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	4611      	mov	r1, r2
 80021be:	4618      	mov	r0, r3
 80021c0:	f002 fdf3 	bl	8004daa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	015a      	lsls	r2, r3, #5
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d0:	461a      	mov	r2, r3
 80021d2:	2340      	movs	r3, #64	; 0x40
 80021d4:	6093      	str	r3, [r2, #8]
}
 80021d6:	e254      	b.n	8002682 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	015a      	lsls	r2, r3, #5
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	4413      	add	r3, r2
 80021e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d11a      	bne.n	8002224 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	015a      	lsls	r2, r3, #5
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fa:	461a      	mov	r2, r3
 80021fc:	2308      	movs	r3, #8
 80021fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	212c      	movs	r1, #44	; 0x2c
 8002206:	fb01 f303 	mul.w	r3, r1, r3
 800220a:	4413      	add	r3, r2
 800220c:	3361      	adds	r3, #97	; 0x61
 800220e:	2205      	movs	r2, #5
 8002210:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	4611      	mov	r1, r2
 800221c:	4618      	mov	r0, r3
 800221e:	f002 fdc4 	bl	8004daa <USB_HC_Halt>
}
 8002222:	e22e      	b.n	8002682 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	015a      	lsls	r2, r3, #5
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	4413      	add	r3, r2
 800222c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	2b10      	cmp	r3, #16
 8002238:	d140      	bne.n	80022bc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	212c      	movs	r1, #44	; 0x2c
 8002240:	fb01 f303 	mul.w	r3, r1, r3
 8002244:	4413      	add	r3, r2
 8002246:	335c      	adds	r3, #92	; 0x5c
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	212c      	movs	r1, #44	; 0x2c
 8002252:	fb01 f303 	mul.w	r3, r1, r3
 8002256:	4413      	add	r3, r2
 8002258:	3361      	adds	r3, #97	; 0x61
 800225a:	2203      	movs	r2, #3
 800225c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	212c      	movs	r1, #44	; 0x2c
 8002264:	fb01 f303 	mul.w	r3, r1, r3
 8002268:	4413      	add	r3, r2
 800226a:	333d      	adds	r3, #61	; 0x3d
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d112      	bne.n	8002298 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	212c      	movs	r1, #44	; 0x2c
 8002278:	fb01 f303 	mul.w	r3, r1, r3
 800227c:	4413      	add	r3, r2
 800227e:	333c      	adds	r3, #60	; 0x3c
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d108      	bne.n	8002298 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	212c      	movs	r1, #44	; 0x2c
 800228c:	fb01 f303 	mul.w	r3, r1, r3
 8002290:	4413      	add	r3, r2
 8002292:	333d      	adds	r3, #61	; 0x3d
 8002294:	2201      	movs	r2, #1
 8002296:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	4611      	mov	r1, r2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f002 fd81 	bl	8004daa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	015a      	lsls	r2, r3, #5
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b4:	461a      	mov	r2, r3
 80022b6:	2310      	movs	r3, #16
 80022b8:	6093      	str	r3, [r2, #8]
}
 80022ba:	e1e2      	b.n	8002682 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	015a      	lsls	r2, r3, #5
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	4413      	add	r3, r2
 80022c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ce:	2b80      	cmp	r3, #128	; 0x80
 80022d0:	d164      	bne.n	800239c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d111      	bne.n	80022fe <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	212c      	movs	r1, #44	; 0x2c
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	3361      	adds	r3, #97	; 0x61
 80022e8:	2206      	movs	r2, #6
 80022ea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	4611      	mov	r1, r2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f002 fd57 	bl	8004daa <USB_HC_Halt>
 80022fc:	e044      	b.n	8002388 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	212c      	movs	r1, #44	; 0x2c
 8002304:	fb01 f303 	mul.w	r3, r1, r3
 8002308:	4413      	add	r3, r2
 800230a:	335c      	adds	r3, #92	; 0x5c
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	202c      	movs	r0, #44	; 0x2c
 8002316:	fb00 f303 	mul.w	r3, r0, r3
 800231a:	440b      	add	r3, r1
 800231c:	335c      	adds	r3, #92	; 0x5c
 800231e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	212c      	movs	r1, #44	; 0x2c
 8002326:	fb01 f303 	mul.w	r3, r1, r3
 800232a:	4413      	add	r3, r2
 800232c:	335c      	adds	r3, #92	; 0x5c
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d920      	bls.n	8002376 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	212c      	movs	r1, #44	; 0x2c
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	4413      	add	r3, r2
 8002340:	335c      	adds	r3, #92	; 0x5c
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	212c      	movs	r1, #44	; 0x2c
 800234c:	fb01 f303 	mul.w	r3, r1, r3
 8002350:	4413      	add	r3, r2
 8002352:	3360      	adds	r3, #96	; 0x60
 8002354:	2204      	movs	r2, #4
 8002356:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	b2d9      	uxtb	r1, r3
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	202c      	movs	r0, #44	; 0x2c
 8002362:	fb00 f303 	mul.w	r3, r0, r3
 8002366:	4413      	add	r3, r2
 8002368:	3360      	adds	r3, #96	; 0x60
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	461a      	mov	r2, r3
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f004 ffae 	bl	80072d0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002374:	e008      	b.n	8002388 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	212c      	movs	r1, #44	; 0x2c
 800237c:	fb01 f303 	mul.w	r3, r1, r3
 8002380:	4413      	add	r3, r2
 8002382:	3360      	adds	r3, #96	; 0x60
 8002384:	2202      	movs	r2, #2
 8002386:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	4413      	add	r3, r2
 8002390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002394:	461a      	mov	r2, r3
 8002396:	2380      	movs	r3, #128	; 0x80
 8002398:	6093      	str	r3, [r2, #8]
}
 800239a:	e172      	b.n	8002682 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b2:	d11b      	bne.n	80023ec <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	212c      	movs	r1, #44	; 0x2c
 80023ba:	fb01 f303 	mul.w	r3, r1, r3
 80023be:	4413      	add	r3, r2
 80023c0:	3361      	adds	r3, #97	; 0x61
 80023c2:	2208      	movs	r2, #8
 80023c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f002 fcea 	bl	8004daa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	015a      	lsls	r2, r3, #5
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e2:	461a      	mov	r2, r3
 80023e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023e8:	6093      	str	r3, [r2, #8]
}
 80023ea:	e14a      	b.n	8002682 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	015a      	lsls	r2, r3, #5
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b02      	cmp	r3, #2
 8002400:	f040 813f 	bne.w	8002682 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	212c      	movs	r1, #44	; 0x2c
 800240a:	fb01 f303 	mul.w	r3, r1, r3
 800240e:	4413      	add	r3, r2
 8002410:	3361      	adds	r3, #97	; 0x61
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d17d      	bne.n	8002514 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	212c      	movs	r1, #44	; 0x2c
 800241e:	fb01 f303 	mul.w	r3, r1, r3
 8002422:	4413      	add	r3, r2
 8002424:	3360      	adds	r3, #96	; 0x60
 8002426:	2201      	movs	r2, #1
 8002428:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	212c      	movs	r1, #44	; 0x2c
 8002430:	fb01 f303 	mul.w	r3, r1, r3
 8002434:	4413      	add	r3, r2
 8002436:	333f      	adds	r3, #63	; 0x3f
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d00a      	beq.n	8002454 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	212c      	movs	r1, #44	; 0x2c
 8002444:	fb01 f303 	mul.w	r3, r1, r3
 8002448:	4413      	add	r3, r2
 800244a:	333f      	adds	r3, #63	; 0x3f
 800244c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800244e:	2b03      	cmp	r3, #3
 8002450:	f040 8100 	bne.w	8002654 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d113      	bne.n	8002484 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	212c      	movs	r1, #44	; 0x2c
 8002462:	fb01 f303 	mul.w	r3, r1, r3
 8002466:	4413      	add	r3, r2
 8002468:	3355      	adds	r3, #85	; 0x55
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	f083 0301 	eor.w	r3, r3, #1
 8002470:	b2d8      	uxtb	r0, r3
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	212c      	movs	r1, #44	; 0x2c
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	4413      	add	r3, r2
 800247e:	3355      	adds	r3, #85	; 0x55
 8002480:	4602      	mov	r2, r0
 8002482:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	2b01      	cmp	r3, #1
 800248a:	f040 80e3 	bne.w	8002654 <HCD_HC_OUT_IRQHandler+0x69c>
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	212c      	movs	r1, #44	; 0x2c
 8002494:	fb01 f303 	mul.w	r3, r1, r3
 8002498:	4413      	add	r3, r2
 800249a:	334c      	adds	r3, #76	; 0x4c
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 80d8 	beq.w	8002654 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	212c      	movs	r1, #44	; 0x2c
 80024aa:	fb01 f303 	mul.w	r3, r1, r3
 80024ae:	4413      	add	r3, r2
 80024b0:	334c      	adds	r3, #76	; 0x4c
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	202c      	movs	r0, #44	; 0x2c
 80024ba:	fb00 f202 	mul.w	r2, r0, r2
 80024be:	440a      	add	r2, r1
 80024c0:	3240      	adds	r2, #64	; 0x40
 80024c2:	8812      	ldrh	r2, [r2, #0]
 80024c4:	4413      	add	r3, r2
 80024c6:	3b01      	subs	r3, #1
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	202c      	movs	r0, #44	; 0x2c
 80024ce:	fb00 f202 	mul.w	r2, r0, r2
 80024d2:	440a      	add	r2, r1
 80024d4:	3240      	adds	r2, #64	; 0x40
 80024d6:	8812      	ldrh	r2, [r2, #0]
 80024d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80b5 	beq.w	8002654 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	212c      	movs	r1, #44	; 0x2c
 80024f0:	fb01 f303 	mul.w	r3, r1, r3
 80024f4:	4413      	add	r3, r2
 80024f6:	3355      	adds	r3, #85	; 0x55
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	f083 0301 	eor.w	r3, r3, #1
 80024fe:	b2d8      	uxtb	r0, r3
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	212c      	movs	r1, #44	; 0x2c
 8002506:	fb01 f303 	mul.w	r3, r1, r3
 800250a:	4413      	add	r3, r2
 800250c:	3355      	adds	r3, #85	; 0x55
 800250e:	4602      	mov	r2, r0
 8002510:	701a      	strb	r2, [r3, #0]
 8002512:	e09f      	b.n	8002654 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	212c      	movs	r1, #44	; 0x2c
 800251a:	fb01 f303 	mul.w	r3, r1, r3
 800251e:	4413      	add	r3, r2
 8002520:	3361      	adds	r3, #97	; 0x61
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b03      	cmp	r3, #3
 8002526:	d109      	bne.n	800253c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	212c      	movs	r1, #44	; 0x2c
 800252e:	fb01 f303 	mul.w	r3, r1, r3
 8002532:	4413      	add	r3, r2
 8002534:	3360      	adds	r3, #96	; 0x60
 8002536:	2202      	movs	r2, #2
 8002538:	701a      	strb	r2, [r3, #0]
 800253a:	e08b      	b.n	8002654 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	212c      	movs	r1, #44	; 0x2c
 8002542:	fb01 f303 	mul.w	r3, r1, r3
 8002546:	4413      	add	r3, r2
 8002548:	3361      	adds	r3, #97	; 0x61
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b04      	cmp	r3, #4
 800254e:	d109      	bne.n	8002564 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	212c      	movs	r1, #44	; 0x2c
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	4413      	add	r3, r2
 800255c:	3360      	adds	r3, #96	; 0x60
 800255e:	2202      	movs	r2, #2
 8002560:	701a      	strb	r2, [r3, #0]
 8002562:	e077      	b.n	8002654 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	212c      	movs	r1, #44	; 0x2c
 800256a:	fb01 f303 	mul.w	r3, r1, r3
 800256e:	4413      	add	r3, r2
 8002570:	3361      	adds	r3, #97	; 0x61
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b05      	cmp	r3, #5
 8002576:	d109      	bne.n	800258c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	212c      	movs	r1, #44	; 0x2c
 800257e:	fb01 f303 	mul.w	r3, r1, r3
 8002582:	4413      	add	r3, r2
 8002584:	3360      	adds	r3, #96	; 0x60
 8002586:	2205      	movs	r2, #5
 8002588:	701a      	strb	r2, [r3, #0]
 800258a:	e063      	b.n	8002654 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	212c      	movs	r1, #44	; 0x2c
 8002592:	fb01 f303 	mul.w	r3, r1, r3
 8002596:	4413      	add	r3, r2
 8002598:	3361      	adds	r3, #97	; 0x61
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b06      	cmp	r3, #6
 800259e:	d009      	beq.n	80025b4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	212c      	movs	r1, #44	; 0x2c
 80025a6:	fb01 f303 	mul.w	r3, r1, r3
 80025aa:	4413      	add	r3, r2
 80025ac:	3361      	adds	r3, #97	; 0x61
 80025ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d14f      	bne.n	8002654 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	212c      	movs	r1, #44	; 0x2c
 80025ba:	fb01 f303 	mul.w	r3, r1, r3
 80025be:	4413      	add	r3, r2
 80025c0:	335c      	adds	r3, #92	; 0x5c
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	202c      	movs	r0, #44	; 0x2c
 80025cc:	fb00 f303 	mul.w	r3, r0, r3
 80025d0:	440b      	add	r3, r1
 80025d2:	335c      	adds	r3, #92	; 0x5c
 80025d4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	212c      	movs	r1, #44	; 0x2c
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	335c      	adds	r3, #92	; 0x5c
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d912      	bls.n	8002610 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	212c      	movs	r1, #44	; 0x2c
 80025f0:	fb01 f303 	mul.w	r3, r1, r3
 80025f4:	4413      	add	r3, r2
 80025f6:	335c      	adds	r3, #92	; 0x5c
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	212c      	movs	r1, #44	; 0x2c
 8002602:	fb01 f303 	mul.w	r3, r1, r3
 8002606:	4413      	add	r3, r2
 8002608:	3360      	adds	r3, #96	; 0x60
 800260a:	2204      	movs	r2, #4
 800260c:	701a      	strb	r2, [r3, #0]
 800260e:	e021      	b.n	8002654 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	212c      	movs	r1, #44	; 0x2c
 8002616:	fb01 f303 	mul.w	r3, r1, r3
 800261a:	4413      	add	r3, r2
 800261c:	3360      	adds	r3, #96	; 0x60
 800261e:	2202      	movs	r2, #2
 8002620:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	015a      	lsls	r2, r3, #5
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	4413      	add	r3, r2
 800262a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002638:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002640:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	4413      	add	r3, r2
 800264a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264e:	461a      	mov	r2, r3
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	4413      	add	r3, r2
 800265c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002660:	461a      	mov	r2, r3
 8002662:	2302      	movs	r3, #2
 8002664:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	b2d9      	uxtb	r1, r3
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	202c      	movs	r0, #44	; 0x2c
 8002670:	fb00 f303 	mul.w	r3, r0, r3
 8002674:	4413      	add	r3, r2
 8002676:	3360      	adds	r3, #96	; 0x60
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f004 fe27 	bl	80072d0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002682:	bf00      	nop
 8002684:	3720      	adds	r7, #32
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b08a      	sub	sp, #40	; 0x28
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	0c5b      	lsrs	r3, r3, #17
 80026b0:	f003 030f 	and.w	r3, r3, #15
 80026b4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026be:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d004      	beq.n	80026d0 <HCD_RXQLVL_IRQHandler+0x46>
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2b05      	cmp	r3, #5
 80026ca:	f000 80a9 	beq.w	8002820 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80026ce:	e0aa      	b.n	8002826 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 80a6 	beq.w	8002824 <HCD_RXQLVL_IRQHandler+0x19a>
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	212c      	movs	r1, #44	; 0x2c
 80026de:	fb01 f303 	mul.w	r3, r1, r3
 80026e2:	4413      	add	r3, r2
 80026e4:	3344      	adds	r3, #68	; 0x44
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 809b 	beq.w	8002824 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	212c      	movs	r1, #44	; 0x2c
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	4413      	add	r3, r2
 80026fa:	3350      	adds	r3, #80	; 0x50
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	441a      	add	r2, r3
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	202c      	movs	r0, #44	; 0x2c
 8002708:	fb00 f303 	mul.w	r3, r0, r3
 800270c:	440b      	add	r3, r1
 800270e:	334c      	adds	r3, #76	; 0x4c
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d87a      	bhi.n	800280c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	212c      	movs	r1, #44	; 0x2c
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	4413      	add	r3, r2
 8002726:	3344      	adds	r3, #68	; 0x44
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	b292      	uxth	r2, r2
 800272e:	4619      	mov	r1, r3
 8002730:	f001 fe92 	bl	8004458 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	212c      	movs	r1, #44	; 0x2c
 800273a:	fb01 f303 	mul.w	r3, r1, r3
 800273e:	4413      	add	r3, r2
 8002740:	3344      	adds	r3, #68	; 0x44
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	441a      	add	r2, r3
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	202c      	movs	r0, #44	; 0x2c
 800274e:	fb00 f303 	mul.w	r3, r0, r3
 8002752:	440b      	add	r3, r1
 8002754:	3344      	adds	r3, #68	; 0x44
 8002756:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	212c      	movs	r1, #44	; 0x2c
 800275e:	fb01 f303 	mul.w	r3, r1, r3
 8002762:	4413      	add	r3, r2
 8002764:	3350      	adds	r3, #80	; 0x50
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	441a      	add	r2, r3
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	202c      	movs	r0, #44	; 0x2c
 8002772:	fb00 f303 	mul.w	r3, r0, r3
 8002776:	440b      	add	r3, r1
 8002778:	3350      	adds	r3, #80	; 0x50
 800277a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	015a      	lsls	r2, r3, #5
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	4413      	add	r3, r2
 8002784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	0cdb      	lsrs	r3, r3, #19
 800278c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002790:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	212c      	movs	r1, #44	; 0x2c
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	3340      	adds	r3, #64	; 0x40
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d13c      	bne.n	8002824 <HCD_RXQLVL_IRQHandler+0x19a>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d039      	beq.n	8002824 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027c6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027ce:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027dc:	461a      	mov	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	212c      	movs	r1, #44	; 0x2c
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	4413      	add	r3, r2
 80027ee:	3354      	adds	r3, #84	; 0x54
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	f083 0301 	eor.w	r3, r3, #1
 80027f6:	b2d8      	uxtb	r0, r3
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	212c      	movs	r1, #44	; 0x2c
 80027fe:	fb01 f303 	mul.w	r3, r1, r3
 8002802:	4413      	add	r3, r2
 8002804:	3354      	adds	r3, #84	; 0x54
 8002806:	4602      	mov	r2, r0
 8002808:	701a      	strb	r2, [r3, #0]
      break;
 800280a:	e00b      	b.n	8002824 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	212c      	movs	r1, #44	; 0x2c
 8002812:	fb01 f303 	mul.w	r3, r1, r3
 8002816:	4413      	add	r3, r2
 8002818:	3360      	adds	r3, #96	; 0x60
 800281a:	2204      	movs	r2, #4
 800281c:	701a      	strb	r2, [r3, #0]
      break;
 800281e:	e001      	b.n	8002824 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002820:	bf00      	nop
 8002822:	e000      	b.n	8002826 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002824:	bf00      	nop
  }
}
 8002826:	bf00      	nop
 8002828:	3728      	adds	r7, #40	; 0x28
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b086      	sub	sp, #24
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800285a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b02      	cmp	r3, #2
 8002864:	d10b      	bne.n	800287e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b01      	cmp	r3, #1
 800286e:	d102      	bne.n	8002876 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f004 fd11 	bl	8007298 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f043 0302 	orr.w	r3, r3, #2
 800287c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b08      	cmp	r3, #8
 8002886:	d132      	bne.n	80028ee <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f043 0308 	orr.w	r3, r3, #8
 800288e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	2b04      	cmp	r3, #4
 8002898:	d126      	bne.n	80028e8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d113      	bne.n	80028ca <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80028a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028ac:	d106      	bne.n	80028bc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2102      	movs	r1, #2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f001 ff3d 	bl	8004734 <USB_InitFSLSPClkSel>
 80028ba:	e011      	b.n	80028e0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2101      	movs	r1, #1
 80028c2:	4618      	mov	r0, r3
 80028c4:	f001 ff36 	bl	8004734 <USB_InitFSLSPClkSel>
 80028c8:	e00a      	b.n	80028e0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d106      	bne.n	80028e0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028d8:	461a      	mov	r2, r3
 80028da:	f64e 2360 	movw	r3, #60000	; 0xea60
 80028de:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f004 fd03 	bl	80072ec <HAL_HCD_PortEnabled_Callback>
 80028e6:	e002      	b.n	80028ee <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f004 fd0d 	bl	8007308 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	d103      	bne.n	8002900 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f043 0320 	orr.w	r3, r3, #32
 80028fe:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002906:	461a      	mov	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	6013      	str	r3, [r2, #0]
}
 800290c:	bf00      	nop
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e12b      	b.n	8002b7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fd fec6 	bl	80006cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2224      	movs	r2, #36	; 0x24
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002966:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002976:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002978:	f001 fa20 	bl	8003dbc <HAL_RCC_GetPCLK1Freq>
 800297c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	4a81      	ldr	r2, [pc, #516]	; (8002b88 <HAL_I2C_Init+0x274>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d807      	bhi.n	8002998 <HAL_I2C_Init+0x84>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4a80      	ldr	r2, [pc, #512]	; (8002b8c <HAL_I2C_Init+0x278>)
 800298c:	4293      	cmp	r3, r2
 800298e:	bf94      	ite	ls
 8002990:	2301      	movls	r3, #1
 8002992:	2300      	movhi	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	e006      	b.n	80029a6 <HAL_I2C_Init+0x92>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4a7d      	ldr	r2, [pc, #500]	; (8002b90 <HAL_I2C_Init+0x27c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	bf94      	ite	ls
 80029a0:	2301      	movls	r3, #1
 80029a2:	2300      	movhi	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e0e7      	b.n	8002b7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4a78      	ldr	r2, [pc, #480]	; (8002b94 <HAL_I2C_Init+0x280>)
 80029b2:	fba2 2303 	umull	r2, r3, r2, r3
 80029b6:	0c9b      	lsrs	r3, r3, #18
 80029b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	4a6a      	ldr	r2, [pc, #424]	; (8002b88 <HAL_I2C_Init+0x274>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d802      	bhi.n	80029e8 <HAL_I2C_Init+0xd4>
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	3301      	adds	r3, #1
 80029e6:	e009      	b.n	80029fc <HAL_I2C_Init+0xe8>
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029ee:	fb02 f303 	mul.w	r3, r2, r3
 80029f2:	4a69      	ldr	r2, [pc, #420]	; (8002b98 <HAL_I2C_Init+0x284>)
 80029f4:	fba2 2303 	umull	r2, r3, r2, r3
 80029f8:	099b      	lsrs	r3, r3, #6
 80029fa:	3301      	adds	r3, #1
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	430b      	orrs	r3, r1
 8002a02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	495c      	ldr	r1, [pc, #368]	; (8002b88 <HAL_I2C_Init+0x274>)
 8002a18:	428b      	cmp	r3, r1
 8002a1a:	d819      	bhi.n	8002a50 <HAL_I2C_Init+0x13c>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	1e59      	subs	r1, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a2a:	1c59      	adds	r1, r3, #1
 8002a2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a30:	400b      	ands	r3, r1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <HAL_I2C_Init+0x138>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1e59      	subs	r1, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a44:	3301      	adds	r3, #1
 8002a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a4a:	e051      	b.n	8002af0 <HAL_I2C_Init+0x1dc>
 8002a4c:	2304      	movs	r3, #4
 8002a4e:	e04f      	b.n	8002af0 <HAL_I2C_Init+0x1dc>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d111      	bne.n	8002a7c <HAL_I2C_Init+0x168>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	1e58      	subs	r0, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6859      	ldr	r1, [r3, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	440b      	add	r3, r1
 8002a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	bf0c      	ite	eq
 8002a74:	2301      	moveq	r3, #1
 8002a76:	2300      	movne	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	e012      	b.n	8002aa2 <HAL_I2C_Init+0x18e>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1e58      	subs	r0, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6859      	ldr	r1, [r3, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	0099      	lsls	r1, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a92:	3301      	adds	r3, #1
 8002a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bf0c      	ite	eq
 8002a9c:	2301      	moveq	r3, #1
 8002a9e:	2300      	movne	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_I2C_Init+0x196>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e022      	b.n	8002af0 <HAL_I2C_Init+0x1dc>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10e      	bne.n	8002ad0 <HAL_I2C_Init+0x1bc>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	1e58      	subs	r0, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6859      	ldr	r1, [r3, #4]
 8002aba:	460b      	mov	r3, r1
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	440b      	add	r3, r1
 8002ac0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ace:	e00f      	b.n	8002af0 <HAL_I2C_Init+0x1dc>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1e58      	subs	r0, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6859      	ldr	r1, [r3, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	0099      	lsls	r1, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	6809      	ldr	r1, [r1, #0]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69da      	ldr	r2, [r3, #28]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6911      	ldr	r1, [r2, #16]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	68d2      	ldr	r2, [r2, #12]
 8002b2a:	4311      	orrs	r1, r2
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	430b      	orrs	r3, r1
 8002b32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695a      	ldr	r2, [r3, #20]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	000186a0 	.word	0x000186a0
 8002b8c:	001e847f 	.word	0x001e847f
 8002b90:	003d08ff 	.word	0x003d08ff
 8002b94:	431bde83 	.word	0x431bde83
 8002b98:	10624dd3 	.word	0x10624dd3

08002b9c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e128      	b.n	8002e00 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d109      	bne.n	8002bce <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a90      	ldr	r2, [pc, #576]	; (8002e08 <HAL_I2S_Init+0x26c>)
 8002bc6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7fd fdc7 	bl	800075c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002be4:	f023 030f 	bic.w	r3, r3, #15
 8002be8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d060      	beq.n	8002cbc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d102      	bne.n	8002c08 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002c02:	2310      	movs	r3, #16
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	e001      	b.n	8002c0c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002c08:	2320      	movs	r3, #32
 8002c0a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2b20      	cmp	r3, #32
 8002c12:	d802      	bhi.n	8002c1a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002c1a:	2001      	movs	r0, #1
 8002c1c:	f001 f9c4 	bl	8003fa8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c20:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c2a:	d125      	bne.n	8002c78 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d010      	beq.n	8002c56 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	461a      	mov	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c50:	3305      	adds	r3, #5
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	e01f      	b.n	8002c96 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	461a      	mov	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c72:	3305      	adds	r3, #5
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	e00e      	b.n	8002c96 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	461a      	mov	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c92:	3305      	adds	r3, #5
 8002c94:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4a5c      	ldr	r2, [pc, #368]	; (8002e0c <HAL_I2S_Init+0x270>)
 8002c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9e:	08db      	lsrs	r3, r3, #3
 8002ca0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	085b      	lsrs	r3, r3, #1
 8002cb2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	021b      	lsls	r3, r3, #8
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	e003      	b.n	8002cc4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d902      	bls.n	8002cd0 <HAL_I2S_Init+0x134>
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	2bff      	cmp	r3, #255	; 0xff
 8002cce:	d907      	bls.n	8002ce0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd4:	f043 0210 	orr.w	r2, r3, #16
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e08f      	b.n	8002e00 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	ea42 0103 	orr.w	r1, r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	69fa      	ldr	r2, [r7, #28]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002cfe:	f023 030f 	bic.w	r3, r3, #15
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6851      	ldr	r1, [r2, #4]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6892      	ldr	r2, [r2, #8]
 8002d0a:	4311      	orrs	r1, r2
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	68d2      	ldr	r2, [r2, #12]
 8002d10:	4311      	orrs	r1, r2
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6992      	ldr	r2, [r2, #24]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d22:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d161      	bne.n	8002df0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a38      	ldr	r2, [pc, #224]	; (8002e10 <HAL_I2S_Init+0x274>)
 8002d30:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a37      	ldr	r2, [pc, #220]	; (8002e14 <HAL_I2S_Init+0x278>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d101      	bne.n	8002d40 <HAL_I2S_Init+0x1a4>
 8002d3c:	4b36      	ldr	r3, [pc, #216]	; (8002e18 <HAL_I2S_Init+0x27c>)
 8002d3e:	e001      	b.n	8002d44 <HAL_I2S_Init+0x1a8>
 8002d40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6812      	ldr	r2, [r2, #0]
 8002d4a:	4932      	ldr	r1, [pc, #200]	; (8002e14 <HAL_I2S_Init+0x278>)
 8002d4c:	428a      	cmp	r2, r1
 8002d4e:	d101      	bne.n	8002d54 <HAL_I2S_Init+0x1b8>
 8002d50:	4a31      	ldr	r2, [pc, #196]	; (8002e18 <HAL_I2S_Init+0x27c>)
 8002d52:	e001      	b.n	8002d58 <HAL_I2S_Init+0x1bc>
 8002d54:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002d58:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002d5c:	f023 030f 	bic.w	r3, r3, #15
 8002d60:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a2b      	ldr	r2, [pc, #172]	; (8002e14 <HAL_I2S_Init+0x278>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d101      	bne.n	8002d70 <HAL_I2S_Init+0x1d4>
 8002d6c:	4b2a      	ldr	r3, [pc, #168]	; (8002e18 <HAL_I2S_Init+0x27c>)
 8002d6e:	e001      	b.n	8002d74 <HAL_I2S_Init+0x1d8>
 8002d70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d74:	2202      	movs	r2, #2
 8002d76:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a25      	ldr	r2, [pc, #148]	; (8002e14 <HAL_I2S_Init+0x278>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d101      	bne.n	8002d86 <HAL_I2S_Init+0x1ea>
 8002d82:	4b25      	ldr	r3, [pc, #148]	; (8002e18 <HAL_I2S_Init+0x27c>)
 8002d84:	e001      	b.n	8002d8a <HAL_I2S_Init+0x1ee>
 8002d86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d96:	d003      	beq.n	8002da0 <HAL_I2S_Init+0x204>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d103      	bne.n	8002da8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002da0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	e001      	b.n	8002dac <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002da8:	2300      	movs	r3, #0
 8002daa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002db6:	4313      	orrs	r3, r2
 8002db8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	897b      	ldrh	r3, [r7, #10]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002dd8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a0d      	ldr	r2, [pc, #52]	; (8002e14 <HAL_I2S_Init+0x278>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d101      	bne.n	8002de8 <HAL_I2S_Init+0x24c>
 8002de4:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <HAL_I2S_Init+0x27c>)
 8002de6:	e001      	b.n	8002dec <HAL_I2S_Init+0x250>
 8002de8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dec:	897a      	ldrh	r2, [r7, #10]
 8002dee:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3720      	adds	r7, #32
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	08002f13 	.word	0x08002f13
 8002e0c:	cccccccd 	.word	0xcccccccd
 8002e10:	08003029 	.word	0x08003029
 8002e14:	40003800 	.word	0x40003800
 8002e18:	40003400 	.word	0x40003400

08002e1c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	881a      	ldrh	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	1c9a      	adds	r2, r3, #2
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10e      	bne.n	8002eac <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e9c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff ffb8 	bl	8002e1c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec6:	b292      	uxth	r2, r2
 8002ec8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	1c9a      	adds	r2, r3, #2
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10e      	bne.n	8002f0a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002efa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7ff ff93 	bl	8002e30 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b086      	sub	sp, #24
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d13a      	bne.n	8002fa4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d109      	bne.n	8002f4c <I2S_IRQHandler+0x3a>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f42:	2b40      	cmp	r3, #64	; 0x40
 8002f44:	d102      	bne.n	8002f4c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff ffb4 	bl	8002eb4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f52:	2b40      	cmp	r3, #64	; 0x40
 8002f54:	d126      	bne.n	8002fa4 <I2S_IRQHandler+0x92>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 0320 	and.w	r3, r3, #32
 8002f60:	2b20      	cmp	r3, #32
 8002f62:	d11f      	bne.n	8002fa4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f72:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f74:	2300      	movs	r3, #0
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	613b      	str	r3, [r7, #16]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f96:	f043 0202 	orr.w	r2, r3, #2
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff ff50 	bl	8002e44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d136      	bne.n	800301e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d109      	bne.n	8002fce <I2S_IRQHandler+0xbc>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc4:	2b80      	cmp	r3, #128	; 0x80
 8002fc6:	d102      	bne.n	8002fce <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff ff45 	bl	8002e58 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d122      	bne.n	800301e <I2S_IRQHandler+0x10c>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 0320 	and.w	r3, r3, #32
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	d11b      	bne.n	800301e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ff4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003010:	f043 0204 	orr.w	r2, r3, #4
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7ff ff13 	bl	8002e44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800301e:	bf00      	nop
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a92      	ldr	r2, [pc, #584]	; (8003288 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d101      	bne.n	8003046 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003042:	4b92      	ldr	r3, [pc, #584]	; (800328c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003044:	e001      	b.n	800304a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003046:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a8b      	ldr	r2, [pc, #556]	; (8003288 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d101      	bne.n	8003064 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003060:	4b8a      	ldr	r3, [pc, #552]	; (800328c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003062:	e001      	b.n	8003068 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003064:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003074:	d004      	beq.n	8003080 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	f040 8099 	bne.w	80031b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b02      	cmp	r3, #2
 8003088:	d107      	bne.n	800309a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003090:	2b00      	cmp	r3, #0
 8003092:	d002      	beq.n	800309a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f925 	bl	80032e4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d107      	bne.n	80030b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f9c8 	bl	8003444 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ba:	2b40      	cmp	r3, #64	; 0x40
 80030bc:	d13a      	bne.n	8003134 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	f003 0320 	and.w	r3, r3, #32
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d035      	beq.n	8003134 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a6e      	ldr	r2, [pc, #440]	; (8003288 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d101      	bne.n	80030d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80030d2:	4b6e      	ldr	r3, [pc, #440]	; (800328c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80030d4:	e001      	b.n	80030da <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80030d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4969      	ldr	r1, [pc, #420]	; (8003288 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80030e2:	428b      	cmp	r3, r1
 80030e4:	d101      	bne.n	80030ea <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80030e6:	4b69      	ldr	r3, [pc, #420]	; (800328c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80030e8:	e001      	b.n	80030ee <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80030ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030f2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003102:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003104:	2300      	movs	r3, #0
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003126:	f043 0202 	orr.w	r2, r3, #2
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff fe88 	bl	8002e44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b08      	cmp	r3, #8
 800313c:	f040 80c3 	bne.w	80032c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f003 0320 	and.w	r3, r3, #32
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 80bd 	beq.w	80032c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800315a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a49      	ldr	r2, [pc, #292]	; (8003288 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d101      	bne.n	800316a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003166:	4b49      	ldr	r3, [pc, #292]	; (800328c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003168:	e001      	b.n	800316e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800316a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4944      	ldr	r1, [pc, #272]	; (8003288 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003176:	428b      	cmp	r3, r1
 8003178:	d101      	bne.n	800317e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800317a:	4b44      	ldr	r3, [pc, #272]	; (800328c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800317c:	e001      	b.n	8003182 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800317e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003182:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003186:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003188:	2300      	movs	r3, #0
 800318a:	60bb      	str	r3, [r7, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	f043 0204 	orr.w	r2, r3, #4
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff fe4a 	bl	8002e44 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80031b0:	e089      	b.n	80032c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d107      	bne.n	80031cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f8be 	bl	8003348 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d107      	bne.n	80031e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f8fd 	bl	80033e0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ec:	2b40      	cmp	r3, #64	; 0x40
 80031ee:	d12f      	bne.n	8003250 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d02a      	beq.n	8003250 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003208:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a1e      	ldr	r2, [pc, #120]	; (8003288 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d101      	bne.n	8003218 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003214:	4b1d      	ldr	r3, [pc, #116]	; (800328c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003216:	e001      	b.n	800321c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003218:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4919      	ldr	r1, [pc, #100]	; (8003288 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003224:	428b      	cmp	r3, r1
 8003226:	d101      	bne.n	800322c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003228:	4b18      	ldr	r3, [pc, #96]	; (800328c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800322a:	e001      	b.n	8003230 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800322c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003230:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003234:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003242:	f043 0202 	orr.w	r2, r3, #2
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff fdfa 	bl	8002e44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b08      	cmp	r3, #8
 8003258:	d136      	bne.n	80032c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f003 0320 	and.w	r3, r3, #32
 8003260:	2b00      	cmp	r3, #0
 8003262:	d031      	beq.n	80032c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a07      	ldr	r2, [pc, #28]	; (8003288 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d101      	bne.n	8003272 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800326e:	4b07      	ldr	r3, [pc, #28]	; (800328c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003270:	e001      	b.n	8003276 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003272:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4902      	ldr	r1, [pc, #8]	; (8003288 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800327e:	428b      	cmp	r3, r1
 8003280:	d106      	bne.n	8003290 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003282:	4b02      	ldr	r3, [pc, #8]	; (800328c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003284:	e006      	b.n	8003294 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003286:	bf00      	nop
 8003288:	40003800 	.word	0x40003800
 800328c:	40003400 	.word	0x40003400
 8003290:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003294:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003298:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032a8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	f043 0204 	orr.w	r2, r3, #4
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff fdc0 	bl	8002e44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80032c4:	e000      	b.n	80032c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80032c6:	bf00      	nop
}
 80032c8:	bf00      	nop
 80032ca:	3720      	adds	r7, #32
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	1c99      	adds	r1, r3, #2
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6251      	str	r1, [r2, #36]	; 0x24
 80032f6:	881a      	ldrh	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003302:	b29b      	uxth	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d113      	bne.n	800333e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003324:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800332a:	b29b      	uxth	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d106      	bne.n	800333e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff ffc9 	bl	80032d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	1c99      	adds	r1, r3, #2
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6251      	str	r1, [r2, #36]	; 0x24
 800335a:	8819      	ldrh	r1, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1d      	ldr	r2, [pc, #116]	; (80033d8 <I2SEx_TxISR_I2SExt+0x90>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d101      	bne.n	800336a <I2SEx_TxISR_I2SExt+0x22>
 8003366:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <I2SEx_TxISR_I2SExt+0x94>)
 8003368:	e001      	b.n	800336e <I2SEx_TxISR_I2SExt+0x26>
 800336a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800336e:	460a      	mov	r2, r1
 8003370:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003376:	b29b      	uxth	r3, r3
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003384:	b29b      	uxth	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d121      	bne.n	80033ce <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a12      	ldr	r2, [pc, #72]	; (80033d8 <I2SEx_TxISR_I2SExt+0x90>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d101      	bne.n	8003398 <I2SEx_TxISR_I2SExt+0x50>
 8003394:	4b11      	ldr	r3, [pc, #68]	; (80033dc <I2SEx_TxISR_I2SExt+0x94>)
 8003396:	e001      	b.n	800339c <I2SEx_TxISR_I2SExt+0x54>
 8003398:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	490d      	ldr	r1, [pc, #52]	; (80033d8 <I2SEx_TxISR_I2SExt+0x90>)
 80033a4:	428b      	cmp	r3, r1
 80033a6:	d101      	bne.n	80033ac <I2SEx_TxISR_I2SExt+0x64>
 80033a8:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <I2SEx_TxISR_I2SExt+0x94>)
 80033aa:	e001      	b.n	80033b0 <I2SEx_TxISR_I2SExt+0x68>
 80033ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033b4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d106      	bne.n	80033ce <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7ff ff81 	bl	80032d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033ce:	bf00      	nop
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40003800 	.word	0x40003800
 80033dc:	40003400 	.word	0x40003400

080033e0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68d8      	ldr	r0, [r3, #12]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f2:	1c99      	adds	r1, r3, #2
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80033f8:	b282      	uxth	r2, r0
 80033fa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003400:	b29b      	uxth	r3, r3
 8003402:	3b01      	subs	r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800340e:	b29b      	uxth	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	d113      	bne.n	800343c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003422:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff ff4a 	bl	80032d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800343c:	bf00      	nop
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a20      	ldr	r2, [pc, #128]	; (80034d4 <I2SEx_RxISR_I2SExt+0x90>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d101      	bne.n	800345a <I2SEx_RxISR_I2SExt+0x16>
 8003456:	4b20      	ldr	r3, [pc, #128]	; (80034d8 <I2SEx_RxISR_I2SExt+0x94>)
 8003458:	e001      	b.n	800345e <I2SEx_RxISR_I2SExt+0x1a>
 800345a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800345e:	68d8      	ldr	r0, [r3, #12]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003464:	1c99      	adds	r1, r3, #2
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	62d1      	str	r1, [r2, #44]	; 0x2c
 800346a:	b282      	uxth	r2, r0
 800346c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003472:	b29b      	uxth	r3, r3
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003480:	b29b      	uxth	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d121      	bne.n	80034ca <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a12      	ldr	r2, [pc, #72]	; (80034d4 <I2SEx_RxISR_I2SExt+0x90>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d101      	bne.n	8003494 <I2SEx_RxISR_I2SExt+0x50>
 8003490:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <I2SEx_RxISR_I2SExt+0x94>)
 8003492:	e001      	b.n	8003498 <I2SEx_RxISR_I2SExt+0x54>
 8003494:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	490d      	ldr	r1, [pc, #52]	; (80034d4 <I2SEx_RxISR_I2SExt+0x90>)
 80034a0:	428b      	cmp	r3, r1
 80034a2:	d101      	bne.n	80034a8 <I2SEx_RxISR_I2SExt+0x64>
 80034a4:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <I2SEx_RxISR_I2SExt+0x94>)
 80034a6:	e001      	b.n	80034ac <I2SEx_RxISR_I2SExt+0x68>
 80034a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034b0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d106      	bne.n	80034ca <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7ff ff03 	bl	80032d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034ca:	bf00      	nop
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40003800 	.word	0x40003800
 80034d8:	40003400 	.word	0x40003400

080034dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e267      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d075      	beq.n	80035e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034fa:	4b88      	ldr	r3, [pc, #544]	; (800371c <HAL_RCC_OscConfig+0x240>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 030c 	and.w	r3, r3, #12
 8003502:	2b04      	cmp	r3, #4
 8003504:	d00c      	beq.n	8003520 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003506:	4b85      	ldr	r3, [pc, #532]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800350e:	2b08      	cmp	r3, #8
 8003510:	d112      	bne.n	8003538 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003512:	4b82      	ldr	r3, [pc, #520]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800351e:	d10b      	bne.n	8003538 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003520:	4b7e      	ldr	r3, [pc, #504]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d05b      	beq.n	80035e4 <HAL_RCC_OscConfig+0x108>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d157      	bne.n	80035e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e242      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003540:	d106      	bne.n	8003550 <HAL_RCC_OscConfig+0x74>
 8003542:	4b76      	ldr	r3, [pc, #472]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a75      	ldr	r2, [pc, #468]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	e01d      	b.n	800358c <HAL_RCC_OscConfig+0xb0>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003558:	d10c      	bne.n	8003574 <HAL_RCC_OscConfig+0x98>
 800355a:	4b70      	ldr	r3, [pc, #448]	; (800371c <HAL_RCC_OscConfig+0x240>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a6f      	ldr	r2, [pc, #444]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	4b6d      	ldr	r3, [pc, #436]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a6c      	ldr	r2, [pc, #432]	; (800371c <HAL_RCC_OscConfig+0x240>)
 800356c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	e00b      	b.n	800358c <HAL_RCC_OscConfig+0xb0>
 8003574:	4b69      	ldr	r3, [pc, #420]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a68      	ldr	r2, [pc, #416]	; (800371c <HAL_RCC_OscConfig+0x240>)
 800357a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	4b66      	ldr	r3, [pc, #408]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a65      	ldr	r2, [pc, #404]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800358a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d013      	beq.n	80035bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003594:	f7fd fabc 	bl	8000b10 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800359c:	f7fd fab8 	bl	8000b10 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b64      	cmp	r3, #100	; 0x64
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e207      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ae:	4b5b      	ldr	r3, [pc, #364]	; (800371c <HAL_RCC_OscConfig+0x240>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0f0      	beq.n	800359c <HAL_RCC_OscConfig+0xc0>
 80035ba:	e014      	b.n	80035e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035bc:	f7fd faa8 	bl	8000b10 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035c4:	f7fd faa4 	bl	8000b10 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b64      	cmp	r3, #100	; 0x64
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e1f3      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d6:	4b51      	ldr	r3, [pc, #324]	; (800371c <HAL_RCC_OscConfig+0x240>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0xe8>
 80035e2:	e000      	b.n	80035e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d063      	beq.n	80036ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035f2:	4b4a      	ldr	r3, [pc, #296]	; (800371c <HAL_RCC_OscConfig+0x240>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00b      	beq.n	8003616 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035fe:	4b47      	ldr	r3, [pc, #284]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003606:	2b08      	cmp	r3, #8
 8003608:	d11c      	bne.n	8003644 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800360a:	4b44      	ldr	r3, [pc, #272]	; (800371c <HAL_RCC_OscConfig+0x240>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d116      	bne.n	8003644 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003616:	4b41      	ldr	r3, [pc, #260]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d005      	beq.n	800362e <HAL_RCC_OscConfig+0x152>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d001      	beq.n	800362e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e1c7      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362e:	4b3b      	ldr	r3, [pc, #236]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	4937      	ldr	r1, [pc, #220]	; (800371c <HAL_RCC_OscConfig+0x240>)
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003642:	e03a      	b.n	80036ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d020      	beq.n	800368e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800364c:	4b34      	ldr	r3, [pc, #208]	; (8003720 <HAL_RCC_OscConfig+0x244>)
 800364e:	2201      	movs	r2, #1
 8003650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003652:	f7fd fa5d 	bl	8000b10 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800365a:	f7fd fa59 	bl	8000b10 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e1a8      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366c:	4b2b      	ldr	r3, [pc, #172]	; (800371c <HAL_RCC_OscConfig+0x240>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0f0      	beq.n	800365a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003678:	4b28      	ldr	r3, [pc, #160]	; (800371c <HAL_RCC_OscConfig+0x240>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	4925      	ldr	r1, [pc, #148]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003688:	4313      	orrs	r3, r2
 800368a:	600b      	str	r3, [r1, #0]
 800368c:	e015      	b.n	80036ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800368e:	4b24      	ldr	r3, [pc, #144]	; (8003720 <HAL_RCC_OscConfig+0x244>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003694:	f7fd fa3c 	bl	8000b10 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800369c:	f7fd fa38 	bl	8000b10 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e187      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ae:	4b1b      	ldr	r3, [pc, #108]	; (800371c <HAL_RCC_OscConfig+0x240>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d036      	beq.n	8003734 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d016      	beq.n	80036fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ce:	4b15      	ldr	r3, [pc, #84]	; (8003724 <HAL_RCC_OscConfig+0x248>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d4:	f7fd fa1c 	bl	8000b10 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036dc:	f7fd fa18 	bl	8000b10 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e167      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ee:	4b0b      	ldr	r3, [pc, #44]	; (800371c <HAL_RCC_OscConfig+0x240>)
 80036f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCC_OscConfig+0x200>
 80036fa:	e01b      	b.n	8003734 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036fc:	4b09      	ldr	r3, [pc, #36]	; (8003724 <HAL_RCC_OscConfig+0x248>)
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003702:	f7fd fa05 	bl	8000b10 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003708:	e00e      	b.n	8003728 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800370a:	f7fd fa01 	bl	8000b10 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d907      	bls.n	8003728 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e150      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
 800371c:	40023800 	.word	0x40023800
 8003720:	42470000 	.word	0x42470000
 8003724:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003728:	4b88      	ldr	r3, [pc, #544]	; (800394c <HAL_RCC_OscConfig+0x470>)
 800372a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1ea      	bne.n	800370a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 8097 	beq.w	8003870 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003742:	2300      	movs	r3, #0
 8003744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003746:	4b81      	ldr	r3, [pc, #516]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10f      	bne.n	8003772 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	4b7d      	ldr	r3, [pc, #500]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	4a7c      	ldr	r2, [pc, #496]	; (800394c <HAL_RCC_OscConfig+0x470>)
 800375c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003760:	6413      	str	r3, [r2, #64]	; 0x40
 8003762:	4b7a      	ldr	r3, [pc, #488]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376a:	60bb      	str	r3, [r7, #8]
 800376c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800376e:	2301      	movs	r3, #1
 8003770:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003772:	4b77      	ldr	r3, [pc, #476]	; (8003950 <HAL_RCC_OscConfig+0x474>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d118      	bne.n	80037b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800377e:	4b74      	ldr	r3, [pc, #464]	; (8003950 <HAL_RCC_OscConfig+0x474>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a73      	ldr	r2, [pc, #460]	; (8003950 <HAL_RCC_OscConfig+0x474>)
 8003784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800378a:	f7fd f9c1 	bl	8000b10 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003792:	f7fd f9bd 	bl	8000b10 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e10c      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a4:	4b6a      	ldr	r3, [pc, #424]	; (8003950 <HAL_RCC_OscConfig+0x474>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f0      	beq.n	8003792 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d106      	bne.n	80037c6 <HAL_RCC_OscConfig+0x2ea>
 80037b8:	4b64      	ldr	r3, [pc, #400]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037bc:	4a63      	ldr	r2, [pc, #396]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	6713      	str	r3, [r2, #112]	; 0x70
 80037c4:	e01c      	b.n	8003800 <HAL_RCC_OscConfig+0x324>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2b05      	cmp	r3, #5
 80037cc:	d10c      	bne.n	80037e8 <HAL_RCC_OscConfig+0x30c>
 80037ce:	4b5f      	ldr	r3, [pc, #380]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d2:	4a5e      	ldr	r2, [pc, #376]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037d4:	f043 0304 	orr.w	r3, r3, #4
 80037d8:	6713      	str	r3, [r2, #112]	; 0x70
 80037da:	4b5c      	ldr	r3, [pc, #368]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037de:	4a5b      	ldr	r2, [pc, #364]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037e0:	f043 0301 	orr.w	r3, r3, #1
 80037e4:	6713      	str	r3, [r2, #112]	; 0x70
 80037e6:	e00b      	b.n	8003800 <HAL_RCC_OscConfig+0x324>
 80037e8:	4b58      	ldr	r3, [pc, #352]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	4a57      	ldr	r2, [pc, #348]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037ee:	f023 0301 	bic.w	r3, r3, #1
 80037f2:	6713      	str	r3, [r2, #112]	; 0x70
 80037f4:	4b55      	ldr	r3, [pc, #340]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f8:	4a54      	ldr	r2, [pc, #336]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037fa:	f023 0304 	bic.w	r3, r3, #4
 80037fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d015      	beq.n	8003834 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003808:	f7fd f982 	bl	8000b10 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380e:	e00a      	b.n	8003826 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003810:	f7fd f97e 	bl	8000b10 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	f241 3288 	movw	r2, #5000	; 0x1388
 800381e:	4293      	cmp	r3, r2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e0cb      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003826:	4b49      	ldr	r3, [pc, #292]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0ee      	beq.n	8003810 <HAL_RCC_OscConfig+0x334>
 8003832:	e014      	b.n	800385e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003834:	f7fd f96c 	bl	8000b10 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800383a:	e00a      	b.n	8003852 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800383c:	f7fd f968 	bl	8000b10 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f241 3288 	movw	r2, #5000	; 0x1388
 800384a:	4293      	cmp	r3, r2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e0b5      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003852:	4b3e      	ldr	r3, [pc, #248]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1ee      	bne.n	800383c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800385e:	7dfb      	ldrb	r3, [r7, #23]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d105      	bne.n	8003870 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003864:	4b39      	ldr	r3, [pc, #228]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	4a38      	ldr	r2, [pc, #224]	; (800394c <HAL_RCC_OscConfig+0x470>)
 800386a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800386e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80a1 	beq.w	80039bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800387a:	4b34      	ldr	r3, [pc, #208]	; (800394c <HAL_RCC_OscConfig+0x470>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 030c 	and.w	r3, r3, #12
 8003882:	2b08      	cmp	r3, #8
 8003884:	d05c      	beq.n	8003940 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	2b02      	cmp	r3, #2
 800388c:	d141      	bne.n	8003912 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800388e:	4b31      	ldr	r3, [pc, #196]	; (8003954 <HAL_RCC_OscConfig+0x478>)
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003894:	f7fd f93c 	bl	8000b10 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800389c:	f7fd f938 	bl	8000b10 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e087      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ae:	4b27      	ldr	r3, [pc, #156]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f0      	bne.n	800389c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69da      	ldr	r2, [r3, #28]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	019b      	lsls	r3, r3, #6
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d0:	085b      	lsrs	r3, r3, #1
 80038d2:	3b01      	subs	r3, #1
 80038d4:	041b      	lsls	r3, r3, #16
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	061b      	lsls	r3, r3, #24
 80038de:	491b      	ldr	r1, [pc, #108]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e4:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <HAL_RCC_OscConfig+0x478>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ea:	f7fd f911 	bl	8000b10 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f2:	f7fd f90d 	bl	8000b10 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e05c      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003904:	4b11      	ldr	r3, [pc, #68]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0x416>
 8003910:	e054      	b.n	80039bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003912:	4b10      	ldr	r3, [pc, #64]	; (8003954 <HAL_RCC_OscConfig+0x478>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003918:	f7fd f8fa 	bl	8000b10 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003920:	f7fd f8f6 	bl	8000b10 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e045      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003932:	4b06      	ldr	r3, [pc, #24]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x444>
 800393e:	e03d      	b.n	80039bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d107      	bne.n	8003958 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e038      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
 800394c:	40023800 	.word	0x40023800
 8003950:	40007000 	.word	0x40007000
 8003954:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003958:	4b1b      	ldr	r3, [pc, #108]	; (80039c8 <HAL_RCC_OscConfig+0x4ec>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d028      	beq.n	80039b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d121      	bne.n	80039b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397e:	429a      	cmp	r2, r3
 8003980:	d11a      	bne.n	80039b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003988:	4013      	ands	r3, r2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800398e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003990:	4293      	cmp	r3, r2
 8003992:	d111      	bne.n	80039b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	085b      	lsrs	r3, r3, #1
 80039a0:	3b01      	subs	r3, #1
 80039a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d107      	bne.n	80039b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e000      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40023800 	.word	0x40023800

080039cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e0cc      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039e0:	4b68      	ldr	r3, [pc, #416]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d90c      	bls.n	8003a08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ee:	4b65      	ldr	r3, [pc, #404]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f6:	4b63      	ldr	r3, [pc, #396]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d001      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0b8      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d020      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a20:	4b59      	ldr	r3, [pc, #356]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	4a58      	ldr	r2, [pc, #352]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a38:	4b53      	ldr	r3, [pc, #332]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	4a52      	ldr	r2, [pc, #328]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a44:	4b50      	ldr	r3, [pc, #320]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	494d      	ldr	r1, [pc, #308]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d044      	beq.n	8003aec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d107      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6a:	4b47      	ldr	r3, [pc, #284]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d119      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e07f      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d003      	beq.n	8003a8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d107      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8a:	4b3f      	ldr	r3, [pc, #252]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e06f      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9a:	4b3b      	ldr	r3, [pc, #236]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e067      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aaa:	4b37      	ldr	r3, [pc, #220]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f023 0203 	bic.w	r2, r3, #3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	4934      	ldr	r1, [pc, #208]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003abc:	f7fd f828 	bl	8000b10 <HAL_GetTick>
 8003ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac2:	e00a      	b.n	8003ada <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac4:	f7fd f824 	bl	8000b10 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e04f      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ada:	4b2b      	ldr	r3, [pc, #172]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 020c 	and.w	r2, r3, #12
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d1eb      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003aec:	4b25      	ldr	r3, [pc, #148]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d20c      	bcs.n	8003b14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afa:	4b22      	ldr	r3, [pc, #136]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b02:	4b20      	ldr	r3, [pc, #128]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d001      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e032      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b20:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	4916      	ldr	r1, [pc, #88]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d009      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b3e:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	490e      	ldr	r1, [pc, #56]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b52:	f000 f821 	bl	8003b98 <HAL_RCC_GetSysClockFreq>
 8003b56:	4602      	mov	r2, r0
 8003b58:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	091b      	lsrs	r3, r3, #4
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	490a      	ldr	r1, [pc, #40]	; (8003b8c <HAL_RCC_ClockConfig+0x1c0>)
 8003b64:	5ccb      	ldrb	r3, [r1, r3]
 8003b66:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6a:	4a09      	ldr	r2, [pc, #36]	; (8003b90 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b6e:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <HAL_RCC_ClockConfig+0x1c8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fc ff88 	bl	8000a88 <HAL_InitTick>

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40023c00 	.word	0x40023c00
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	08007c5c 	.word	0x08007c5c
 8003b90:	20000000 	.word	0x20000000
 8003b94:	20000004 	.word	0x20000004

08003b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b9c:	b094      	sub	sp, #80	; 0x50
 8003b9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ba8:	2300      	movs	r3, #0
 8003baa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bb0:	4b79      	ldr	r3, [pc, #484]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 030c 	and.w	r3, r3, #12
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d00d      	beq.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x40>
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	f200 80e1 	bhi.w	8003d84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <HAL_RCC_GetSysClockFreq+0x34>
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d003      	beq.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bca:	e0db      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bcc:	4b73      	ldr	r3, [pc, #460]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x204>)
 8003bce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003bd0:	e0db      	b.n	8003d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bd2:	4b73      	ldr	r3, [pc, #460]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003bd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bd6:	e0d8      	b.n	8003d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bd8:	4b6f      	ldr	r3, [pc, #444]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003be0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003be2:	4b6d      	ldr	r3, [pc, #436]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d063      	beq.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bee:	4b6a      	ldr	r3, [pc, #424]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	099b      	lsrs	r3, r3, #6
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bf8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c00:	633b      	str	r3, [r7, #48]	; 0x30
 8003c02:	2300      	movs	r3, #0
 8003c04:	637b      	str	r3, [r7, #52]	; 0x34
 8003c06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c0a:	4622      	mov	r2, r4
 8003c0c:	462b      	mov	r3, r5
 8003c0e:	f04f 0000 	mov.w	r0, #0
 8003c12:	f04f 0100 	mov.w	r1, #0
 8003c16:	0159      	lsls	r1, r3, #5
 8003c18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c1c:	0150      	lsls	r0, r2, #5
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	4621      	mov	r1, r4
 8003c24:	1a51      	subs	r1, r2, r1
 8003c26:	6139      	str	r1, [r7, #16]
 8003c28:	4629      	mov	r1, r5
 8003c2a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c3c:	4659      	mov	r1, fp
 8003c3e:	018b      	lsls	r3, r1, #6
 8003c40:	4651      	mov	r1, sl
 8003c42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c46:	4651      	mov	r1, sl
 8003c48:	018a      	lsls	r2, r1, #6
 8003c4a:	4651      	mov	r1, sl
 8003c4c:	ebb2 0801 	subs.w	r8, r2, r1
 8003c50:	4659      	mov	r1, fp
 8003c52:	eb63 0901 	sbc.w	r9, r3, r1
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	f04f 0300 	mov.w	r3, #0
 8003c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c6a:	4690      	mov	r8, r2
 8003c6c:	4699      	mov	r9, r3
 8003c6e:	4623      	mov	r3, r4
 8003c70:	eb18 0303 	adds.w	r3, r8, r3
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	462b      	mov	r3, r5
 8003c78:	eb49 0303 	adc.w	r3, r9, r3
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	f04f 0300 	mov.w	r3, #0
 8003c86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	024b      	lsls	r3, r1, #9
 8003c8e:	4621      	mov	r1, r4
 8003c90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c94:	4621      	mov	r1, r4
 8003c96:	024a      	lsls	r2, r1, #9
 8003c98:	4610      	mov	r0, r2
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ca2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ca4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ca8:	f7fc fa6e 	bl	8000188 <__aeabi_uldivmod>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cb4:	e058      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cb6:	4b38      	ldr	r3, [pc, #224]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	099b      	lsrs	r3, r3, #6
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	4611      	mov	r1, r2
 8003cc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cc6:	623b      	str	r3, [r7, #32]
 8003cc8:	2300      	movs	r3, #0
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
 8003ccc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cd0:	4642      	mov	r2, r8
 8003cd2:	464b      	mov	r3, r9
 8003cd4:	f04f 0000 	mov.w	r0, #0
 8003cd8:	f04f 0100 	mov.w	r1, #0
 8003cdc:	0159      	lsls	r1, r3, #5
 8003cde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ce2:	0150      	lsls	r0, r2, #5
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4641      	mov	r1, r8
 8003cea:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cee:	4649      	mov	r1, r9
 8003cf0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d08:	ebb2 040a 	subs.w	r4, r2, sl
 8003d0c:	eb63 050b 	sbc.w	r5, r3, fp
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	f04f 0300 	mov.w	r3, #0
 8003d18:	00eb      	lsls	r3, r5, #3
 8003d1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d1e:	00e2      	lsls	r2, r4, #3
 8003d20:	4614      	mov	r4, r2
 8003d22:	461d      	mov	r5, r3
 8003d24:	4643      	mov	r3, r8
 8003d26:	18e3      	adds	r3, r4, r3
 8003d28:	603b      	str	r3, [r7, #0]
 8003d2a:	464b      	mov	r3, r9
 8003d2c:	eb45 0303 	adc.w	r3, r5, r3
 8003d30:	607b      	str	r3, [r7, #4]
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d3e:	4629      	mov	r1, r5
 8003d40:	028b      	lsls	r3, r1, #10
 8003d42:	4621      	mov	r1, r4
 8003d44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d48:	4621      	mov	r1, r4
 8003d4a:	028a      	lsls	r2, r1, #10
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	4619      	mov	r1, r3
 8003d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d52:	2200      	movs	r2, #0
 8003d54:	61bb      	str	r3, [r7, #24]
 8003d56:	61fa      	str	r2, [r7, #28]
 8003d58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d5c:	f7fc fa14 	bl	8000188 <__aeabi_uldivmod>
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4613      	mov	r3, r2
 8003d66:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d68:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	0c1b      	lsrs	r3, r3, #16
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	3301      	adds	r3, #1
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d82:	e002      	b.n	8003d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d84:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x204>)
 8003d86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3750      	adds	r7, #80	; 0x50
 8003d90:	46bd      	mov	sp, r7
 8003d92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d96:	bf00      	nop
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	00f42400 	.word	0x00f42400
 8003da0:	007a1200 	.word	0x007a1200

08003da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003da8:	4b03      	ldr	r3, [pc, #12]	; (8003db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003daa:	681b      	ldr	r3, [r3, #0]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	20000000 	.word	0x20000000

08003dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dc0:	f7ff fff0 	bl	8003da4 <HAL_RCC_GetHCLKFreq>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	0a9b      	lsrs	r3, r3, #10
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	4903      	ldr	r1, [pc, #12]	; (8003de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dd2:	5ccb      	ldrb	r3, [r1, r3]
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	08007c6c 	.word	0x08007c6c

08003de4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d105      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d035      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e0c:	4b62      	ldr	r3, [pc, #392]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e12:	f7fc fe7d 	bl	8000b10 <HAL_GetTick>
 8003e16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e18:	e008      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e1a:	f7fc fe79 	bl	8000b10 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e0b0      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e2c:	4b5b      	ldr	r3, [pc, #364]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1f0      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	019a      	lsls	r2, r3, #6
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	071b      	lsls	r3, r3, #28
 8003e44:	4955      	ldr	r1, [pc, #340]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e4c:	4b52      	ldr	r3, [pc, #328]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003e4e:	2201      	movs	r2, #1
 8003e50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e52:	f7fc fe5d 	bl	8000b10 <HAL_GetTick>
 8003e56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e58:	e008      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e5a:	f7fc fe59 	bl	8000b10 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e090      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e6c:	4b4b      	ldr	r3, [pc, #300]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0f0      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 8083 	beq.w	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e86:	2300      	movs	r3, #0
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	4b44      	ldr	r3, [pc, #272]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	4a43      	ldr	r2, [pc, #268]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e94:	6413      	str	r3, [r2, #64]	; 0x40
 8003e96:	4b41      	ldr	r3, [pc, #260]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003ea2:	4b3f      	ldr	r3, [pc, #252]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a3e      	ldr	r2, [pc, #248]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003eae:	f7fc fe2f 	bl	8000b10 <HAL_GetTick>
 8003eb2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003eb6:	f7fc fe2b 	bl	8000b10 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e062      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ec8:	4b35      	ldr	r3, [pc, #212]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0f0      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ed4:	4b31      	ldr	r3, [pc, #196]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003edc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d02f      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d028      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ef2:	4b2a      	ldr	r3, [pc, #168]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003efa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003efc:	4b29      	ldr	r3, [pc, #164]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f02:	4b28      	ldr	r3, [pc, #160]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f08:	4a24      	ldr	r2, [pc, #144]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f0e:	4b23      	ldr	r3, [pc, #140]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d114      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f1a:	f7fc fdf9 	bl	8000b10 <HAL_GetTick>
 8003f1e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f20:	e00a      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f22:	f7fc fdf5 	bl	8000b10 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e02a      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f38:	4b18      	ldr	r3, [pc, #96]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0ee      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f50:	d10d      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003f52:	4b12      	ldr	r3, [pc, #72]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f66:	490d      	ldr	r1, [pc, #52]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	608b      	str	r3, [r1, #8]
 8003f6c:	e005      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003f6e:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	4a0a      	ldr	r2, [pc, #40]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f74:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f78:	6093      	str	r3, [r2, #8]
 8003f7a:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f86:	4905      	ldr	r1, [pc, #20]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	42470068 	.word	0x42470068
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	40007000 	.word	0x40007000
 8003fa4:	42470e40 	.word	0x42470e40

08003fa8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d13e      	bne.n	8004044 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003fc6:	4b23      	ldr	r3, [pc, #140]	; (8004054 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d005      	beq.n	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d12f      	bne.n	800403c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003fdc:	4b1e      	ldr	r3, [pc, #120]	; (8004058 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003fde:	617b      	str	r3, [r7, #20]
          break;
 8003fe0:	e02f      	b.n	8004042 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003fe2:	4b1c      	ldr	r3, [pc, #112]	; (8004054 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fee:	d108      	bne.n	8004002 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ff0:	4b18      	ldr	r3, [pc, #96]	; (8004054 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ff8:	4a18      	ldr	r2, [pc, #96]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	e007      	b.n	8004012 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004002:	4b14      	ldr	r3, [pc, #80]	; (8004054 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800400a:	4a15      	ldr	r2, [pc, #84]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800400c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004010:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004012:	4b10      	ldr	r3, [pc, #64]	; (8004054 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004014:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004018:	099b      	lsrs	r3, r3, #6
 800401a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	fb02 f303 	mul.w	r3, r2, r3
 8004024:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004026:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800402c:	0f1b      	lsrs	r3, r3, #28
 800402e:	f003 0307 	and.w	r3, r3, #7
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	fbb2 f3f3 	udiv	r3, r2, r3
 8004038:	617b      	str	r3, [r7, #20]
          break;
 800403a:	e002      	b.n	8004042 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
          break;
 8004040:	bf00      	nop
        }
      }
      break;
 8004042:	bf00      	nop
    }
  }
  return frequency;
 8004044:	697b      	ldr	r3, [r7, #20]
}
 8004046:	4618      	mov	r0, r3
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40023800 	.word	0x40023800
 8004058:	00bb8000 	.word	0x00bb8000
 800405c:	007a1200 	.word	0x007a1200
 8004060:	00f42400 	.word	0x00f42400

08004064 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e07b      	b.n	800416e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	2b00      	cmp	r3, #0
 800407c:	d108      	bne.n	8004090 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004086:	d009      	beq.n	800409c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	61da      	str	r2, [r3, #28]
 800408e:	e005      	b.n	800409c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d106      	bne.n	80040bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7fc fbd0 	bl	800085c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	431a      	orrs	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004120:	ea42 0103 	orr.w	r1, r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004128:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	0c1b      	lsrs	r3, r3, #16
 800413a:	f003 0104 	and.w	r1, r3, #4
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	f003 0210 	and.w	r2, r3, #16
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69da      	ldr	r2, [r3, #28]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800415c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004176:	b084      	sub	sp, #16
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	f107 001c 	add.w	r0, r7, #28
 8004184:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418a:	2b01      	cmp	r3, #1
 800418c:	d122      	bne.n	80041d4 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004192:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80041a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80041b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d105      	bne.n	80041c8 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f9bf 	bl	800454c <USB_CoreReset>
 80041ce:	4603      	mov	r3, r0
 80041d0:	73fb      	strb	r3, [r7, #15]
 80041d2:	e01a      	b.n	800420a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f9b3 	bl	800454c <USB_CoreReset>
 80041e6:	4603      	mov	r3, r0
 80041e8:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80041ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d106      	bne.n	80041fe <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	639a      	str	r2, [r3, #56]	; 0x38
 80041fc:	e005      	b.n	800420a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800420a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420c:	2b01      	cmp	r3, #1
 800420e:	d10b      	bne.n	8004228 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f043 0206 	orr.w	r2, r3, #6
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f043 0220 	orr.w	r2, r3, #32
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004228:	7bfb      	ldrb	r3, [r7, #15]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004234:	b004      	add	sp, #16
 8004236:	4770      	bx	lr

08004238 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f043 0201 	orr.w	r2, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f023 0201 	bic.w	r2, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	460b      	mov	r3, r1
 8004286:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004298:	78fb      	ldrb	r3, [r7, #3]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d115      	bne.n	80042ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042aa:	2001      	movs	r0, #1
 80042ac:	f7fc fc3c 	bl	8000b28 <HAL_Delay>
      ms++;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	3301      	adds	r3, #1
 80042b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f939 	bl	800452e <USB_GetMode>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d01e      	beq.n	8004300 <USB_SetCurrentMode+0x84>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2b31      	cmp	r3, #49	; 0x31
 80042c6:	d9f0      	bls.n	80042aa <USB_SetCurrentMode+0x2e>
 80042c8:	e01a      	b.n	8004300 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80042ca:	78fb      	ldrb	r3, [r7, #3]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d115      	bne.n	80042fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042dc:	2001      	movs	r0, #1
 80042de:	f7fc fc23 	bl	8000b28 <HAL_Delay>
      ms++;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	3301      	adds	r3, #1
 80042e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f920 	bl	800452e <USB_GetMode>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <USB_SetCurrentMode+0x84>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2b31      	cmp	r3, #49	; 0x31
 80042f8:	d9f0      	bls.n	80042dc <USB_SetCurrentMode+0x60>
 80042fa:	e001      	b.n	8004300 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e005      	b.n	800430c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2b32      	cmp	r3, #50	; 0x32
 8004304:	d101      	bne.n	800430a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e000      	b.n	800430c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800431e:	2300      	movs	r3, #0
 8004320:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3301      	adds	r3, #1
 8004326:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4a13      	ldr	r2, [pc, #76]	; (8004378 <USB_FlushTxFifo+0x64>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d901      	bls.n	8004334 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e01b      	b.n	800436c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	2b00      	cmp	r3, #0
 800433a:	daf2      	bge.n	8004322 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	019b      	lsls	r3, r3, #6
 8004344:	f043 0220 	orr.w	r2, r3, #32
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	3301      	adds	r3, #1
 8004350:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	4a08      	ldr	r2, [pc, #32]	; (8004378 <USB_FlushTxFifo+0x64>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d901      	bls.n	800435e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e006      	b.n	800436c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0320 	and.w	r3, r3, #32
 8004366:	2b20      	cmp	r3, #32
 8004368:	d0f0      	beq.n	800434c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	00030d40 	.word	0x00030d40

0800437c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	3301      	adds	r3, #1
 800438c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4a11      	ldr	r2, [pc, #68]	; (80043d8 <USB_FlushRxFifo+0x5c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d901      	bls.n	800439a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e018      	b.n	80043cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	daf2      	bge.n	8004388 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2210      	movs	r2, #16
 80043aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	3301      	adds	r3, #1
 80043b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4a08      	ldr	r2, [pc, #32]	; (80043d8 <USB_FlushRxFifo+0x5c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d901      	bls.n	80043be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e006      	b.n	80043cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f003 0310 	and.w	r3, r3, #16
 80043c6:	2b10      	cmp	r3, #16
 80043c8:	d0f0      	beq.n	80043ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	00030d40 	.word	0x00030d40

080043dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80043dc:	b480      	push	{r7}
 80043de:	b089      	sub	sp, #36	; 0x24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	4611      	mov	r1, r2
 80043e8:	461a      	mov	r2, r3
 80043ea:	460b      	mov	r3, r1
 80043ec:	71fb      	strb	r3, [r7, #7]
 80043ee:	4613      	mov	r3, r2
 80043f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80043fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d123      	bne.n	800444a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004402:	88bb      	ldrh	r3, [r7, #4]
 8004404:	3303      	adds	r3, #3
 8004406:	089b      	lsrs	r3, r3, #2
 8004408:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800440a:	2300      	movs	r3, #0
 800440c:	61bb      	str	r3, [r7, #24]
 800440e:	e018      	b.n	8004442 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004410:	79fb      	ldrb	r3, [r7, #7]
 8004412:	031a      	lsls	r2, r3, #12
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	4413      	add	r3, r2
 8004418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800441c:	461a      	mov	r2, r3
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	3301      	adds	r3, #1
 8004428:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	3301      	adds	r3, #1
 800442e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	3301      	adds	r3, #1
 8004434:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	3301      	adds	r3, #1
 800443a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	3301      	adds	r3, #1
 8004440:	61bb      	str	r3, [r7, #24]
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	429a      	cmp	r2, r3
 8004448:	d3e2      	bcc.n	8004410 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3724      	adds	r7, #36	; 0x24
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004458:	b480      	push	{r7}
 800445a:	b08b      	sub	sp, #44	; 0x2c
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	4613      	mov	r3, r2
 8004464:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800446e:	88fb      	ldrh	r3, [r7, #6]
 8004470:	089b      	lsrs	r3, r3, #2
 8004472:	b29b      	uxth	r3, r3
 8004474:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004476:	88fb      	ldrh	r3, [r7, #6]
 8004478:	f003 0303 	and.w	r3, r3, #3
 800447c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800447e:	2300      	movs	r3, #0
 8004480:	623b      	str	r3, [r7, #32]
 8004482:	e014      	b.n	80044ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	3301      	adds	r3, #1
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	3301      	adds	r3, #1
 800449a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	3301      	adds	r3, #1
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	3301      	adds	r3, #1
 80044a6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	3301      	adds	r3, #1
 80044ac:	623b      	str	r3, [r7, #32]
 80044ae:	6a3a      	ldr	r2, [r7, #32]
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d3e6      	bcc.n	8004484 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80044b6:	8bfb      	ldrh	r3, [r7, #30]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d01e      	beq.n	80044fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044c6:	461a      	mov	r2, r3
 80044c8:	f107 0310 	add.w	r3, r7, #16
 80044cc:	6812      	ldr	r2, [r2, #0]
 80044ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	fa22 f303 	lsr.w	r3, r2, r3
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	701a      	strb	r2, [r3, #0]
      i++;
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	3301      	adds	r3, #1
 80044e6:	623b      	str	r3, [r7, #32]
      pDest++;
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	3301      	adds	r3, #1
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80044ee:	8bfb      	ldrh	r3, [r7, #30]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80044f4:	8bfb      	ldrh	r3, [r7, #30]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1ea      	bne.n	80044d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	372c      	adds	r7, #44	; 0x2c
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	4013      	ands	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004520:	68fb      	ldr	r3, [r7, #12]
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	f003 0301 	and.w	r3, r3, #1
}
 800453e:	4618      	mov	r0, r3
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
	...

0800454c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	3301      	adds	r3, #1
 800455c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	4a13      	ldr	r2, [pc, #76]	; (80045b0 <USB_CoreReset+0x64>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d901      	bls.n	800456a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e01b      	b.n	80045a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	2b00      	cmp	r3, #0
 8004570:	daf2      	bge.n	8004558 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	f043 0201 	orr.w	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	3301      	adds	r3, #1
 8004586:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4a09      	ldr	r2, [pc, #36]	; (80045b0 <USB_CoreReset+0x64>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d901      	bls.n	8004594 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e006      	b.n	80045a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b01      	cmp	r3, #1
 800459e:	d0f0      	beq.n	8004582 <USB_CoreReset+0x36>

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	00030d40 	.word	0x00030d40

080045b4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045b4:	b084      	sub	sp, #16
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b086      	sub	sp, #24
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80045c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045d4:	461a      	mov	r2, r3
 80045d6:	2300      	movs	r3, #0
 80045d8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ea:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004606:	2b00      	cmp	r3, #0
 8004608:	d018      	beq.n	800463c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800460a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460c:	2b01      	cmp	r3, #1
 800460e:	d10a      	bne.n	8004626 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800461e:	f043 0304 	orr.w	r3, r3, #4
 8004622:	6013      	str	r3, [r2, #0]
 8004624:	e014      	b.n	8004650 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004634:	f023 0304 	bic.w	r3, r3, #4
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	e009      	b.n	8004650 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800464a:	f023 0304 	bic.w	r3, r3, #4
 800464e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004650:	2110      	movs	r1, #16
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7ff fe5e 	bl	8004314 <USB_FlushTxFifo>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7ff fe8a 	bl	800437c <USB_FlushRxFifo>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004672:	2300      	movs	r3, #0
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	e015      	b.n	80046a4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004684:	461a      	mov	r2, r3
 8004686:	f04f 33ff 	mov.w	r3, #4294967295
 800468a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4413      	add	r3, r2
 8004694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004698:	461a      	mov	r2, r3
 800469a:	2300      	movs	r3, #0
 800469c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	3301      	adds	r3, #1
 80046a2:	613b      	str	r3, [r7, #16]
 80046a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d3e5      	bcc.n	8004678 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f04f 32ff 	mov.w	r2, #4294967295
 80046b8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00b      	beq.n	80046de <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046cc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a13      	ldr	r2, [pc, #76]	; (8004720 <USB_HostInit+0x16c>)
 80046d2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a13      	ldr	r2, [pc, #76]	; (8004724 <USB_HostInit+0x170>)
 80046d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80046dc:	e009      	b.n	80046f2 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2280      	movs	r2, #128	; 0x80
 80046e2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a10      	ldr	r2, [pc, #64]	; (8004728 <USB_HostInit+0x174>)
 80046e8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a0f      	ldr	r2, [pc, #60]	; (800472c <USB_HostInit+0x178>)
 80046ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80046f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d105      	bne.n	8004704 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	f043 0210 	orr.w	r2, r3, #16
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	699a      	ldr	r2, [r3, #24]
 8004708:	4b09      	ldr	r3, [pc, #36]	; (8004730 <USB_HostInit+0x17c>)
 800470a:	4313      	orrs	r3, r2
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004710:	7dfb      	ldrb	r3, [r7, #23]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800471c:	b004      	add	sp, #16
 800471e:	4770      	bx	lr
 8004720:	01000200 	.word	0x01000200
 8004724:	00e00300 	.word	0x00e00300
 8004728:	00600080 	.word	0x00600080
 800472c:	004000e0 	.word	0x004000e0
 8004730:	a3200008 	.word	0xa3200008

08004734 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004752:	f023 0303 	bic.w	r3, r3, #3
 8004756:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	78fb      	ldrb	r3, [r7, #3]
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	68f9      	ldr	r1, [r7, #12]
 8004768:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800476c:	4313      	orrs	r3, r2
 800476e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d107      	bne.n	8004786 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800477c:	461a      	mov	r2, r3
 800477e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004782:	6053      	str	r3, [r2, #4]
 8004784:	e009      	b.n	800479a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004786:	78fb      	ldrb	r3, [r7, #3]
 8004788:	2b02      	cmp	r3, #2
 800478a:	d106      	bne.n	800479a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004792:	461a      	mov	r2, r3
 8004794:	f241 7370 	movw	r3, #6000	; 0x1770
 8004798:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80047c8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80047d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80047d8:	2064      	movs	r0, #100	; 0x64
 80047da:	f7fc f9a5 	bl	8000b28 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80047e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047ea:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80047ec:	200a      	movs	r0, #10
 80047ee:	f7fc f99b 	bl	8000b28 <HAL_Delay>

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004820:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d109      	bne.n	8004840 <USB_DriveVbus+0x44>
 800482c:	78fb      	ldrb	r3, [r7, #3]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d106      	bne.n	8004840 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800483a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800483e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484a:	d109      	bne.n	8004860 <USB_DriveVbus+0x64>
 800484c:	78fb      	ldrb	r3, [r7, #3]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d106      	bne.n	8004860 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800485a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800485e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800486e:	b480      	push	{r7}
 8004870:	b085      	sub	sp, #20
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	0c5b      	lsrs	r3, r3, #17
 800488c:	f003 0303 	and.w	r3, r3, #3
}
 8004890:	4618      	mov	r0, r3
 8004892:	3714      	adds	r7, #20
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	b29b      	uxth	r3, r3
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
	...

080048c0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b088      	sub	sp, #32
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	4608      	mov	r0, r1
 80048ca:	4611      	mov	r1, r2
 80048cc:	461a      	mov	r2, r3
 80048ce:	4603      	mov	r3, r0
 80048d0:	70fb      	strb	r3, [r7, #3]
 80048d2:	460b      	mov	r3, r1
 80048d4:	70bb      	strb	r3, [r7, #2]
 80048d6:	4613      	mov	r3, r2
 80048d8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80048e2:	78fb      	ldrb	r3, [r7, #3]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ee:	461a      	mov	r2, r3
 80048f0:	f04f 33ff 	mov.w	r3, #4294967295
 80048f4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80048f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	d87e      	bhi.n	80049fc <USB_HC_Init+0x13c>
 80048fe:	a201      	add	r2, pc, #4	; (adr r2, 8004904 <USB_HC_Init+0x44>)
 8004900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004904:	08004915 	.word	0x08004915
 8004908:	080049bf 	.word	0x080049bf
 800490c:	08004915 	.word	0x08004915
 8004910:	08004981 	.word	0x08004981
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004914:	78fb      	ldrb	r3, [r7, #3]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	4413      	add	r3, r2
 800491c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004920:	461a      	mov	r2, r3
 8004922:	f240 439d 	movw	r3, #1181	; 0x49d
 8004926:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004928:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800492c:	2b00      	cmp	r3, #0
 800492e:	da10      	bge.n	8004952 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004930:	78fb      	ldrb	r3, [r7, #3]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	4413      	add	r3, r2
 8004938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	78fa      	ldrb	r2, [r7, #3]
 8004940:	0151      	lsls	r1, r2, #5
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	440a      	add	r2, r1
 8004946:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800494a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800494e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004950:	e057      	b.n	8004a02 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495a:	2b00      	cmp	r3, #0
 800495c:	d051      	beq.n	8004a02 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800495e:	78fb      	ldrb	r3, [r7, #3]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	4413      	add	r3, r2
 8004966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	78fa      	ldrb	r2, [r7, #3]
 800496e:	0151      	lsls	r1, r2, #5
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	440a      	add	r2, r1
 8004974:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004978:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800497c:	60d3      	str	r3, [r2, #12]
      break;
 800497e:	e040      	b.n	8004a02 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004980:	78fb      	ldrb	r3, [r7, #3]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	4413      	add	r3, r2
 8004988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800498c:	461a      	mov	r2, r3
 800498e:	f240 639d 	movw	r3, #1693	; 0x69d
 8004992:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004994:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004998:	2b00      	cmp	r3, #0
 800499a:	da34      	bge.n	8004a06 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	78fa      	ldrb	r2, [r7, #3]
 80049ac:	0151      	lsls	r1, r2, #5
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	440a      	add	r2, r1
 80049b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ba:	60d3      	str	r3, [r2, #12]
      }

      break;
 80049bc:	e023      	b.n	8004a06 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80049be:	78fb      	ldrb	r3, [r7, #3]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ca:	461a      	mov	r2, r3
 80049cc:	f240 2325 	movw	r3, #549	; 0x225
 80049d0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80049d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	da17      	bge.n	8004a0a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80049da:	78fb      	ldrb	r3, [r7, #3]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	78fa      	ldrb	r2, [r7, #3]
 80049ea:	0151      	lsls	r1, r2, #5
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	440a      	add	r2, r1
 80049f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049f4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80049f8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80049fa:	e006      	b.n	8004a0a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	77fb      	strb	r3, [r7, #31]
      break;
 8004a00:	e004      	b.n	8004a0c <USB_HC_Init+0x14c>
      break;
 8004a02:	bf00      	nop
 8004a04:	e002      	b.n	8004a0c <USB_HC_Init+0x14c>
      break;
 8004a06:	bf00      	nop
 8004a08:	e000      	b.n	8004a0c <USB_HC_Init+0x14c>
      break;
 8004a0a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004a0c:	78fb      	ldrb	r3, [r7, #3]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	78fa      	ldrb	r2, [r7, #3]
 8004a1c:	0151      	lsls	r1, r2, #5
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	440a      	add	r2, r1
 8004a22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a26:	f043 0302 	orr.w	r3, r3, #2
 8004a2a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a32:	699a      	ldr	r2, [r3, #24]
 8004a34:	78fb      	ldrb	r3, [r7, #3]
 8004a36:	f003 030f 	and.w	r3, r3, #15
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a40:	6939      	ldr	r1, [r7, #16]
 8004a42:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004a46:	4313      	orrs	r3, r2
 8004a48:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004a56:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	da03      	bge.n	8004a66 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a62:	61bb      	str	r3, [r7, #24]
 8004a64:	e001      	b.n	8004a6a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7ff feff 	bl	800486e <USB_GetHostSpeed>
 8004a70:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004a72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d106      	bne.n	8004a88 <USB_HC_Init+0x1c8>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d003      	beq.n	8004a88 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004a80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	e001      	b.n	8004a8c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004a8c:	787b      	ldrb	r3, [r7, #1]
 8004a8e:	059b      	lsls	r3, r3, #22
 8004a90:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004a94:	78bb      	ldrb	r3, [r7, #2]
 8004a96:	02db      	lsls	r3, r3, #11
 8004a98:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004a9c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004a9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004aa2:	049b      	lsls	r3, r3, #18
 8004aa4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004aa8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004aaa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004aac:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004ab0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ab6:	78fb      	ldrb	r3, [r7, #3]
 8004ab8:	0159      	lsls	r1, r3, #5
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	440b      	add	r3, r1
 8004abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ac8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004aca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d003      	beq.n	8004ada <USB_HC_Init+0x21a>
 8004ad2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d10f      	bne.n	8004afa <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004ada:	78fb      	ldrb	r3, [r7, #3]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	78fa      	ldrb	r2, [r7, #3]
 8004aea:	0151      	lsls	r1, r2, #5
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	440a      	add	r2, r1
 8004af0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004af4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004af8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004afa:	7ffb      	ldrb	r3, [r7, #31]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3720      	adds	r7, #32
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08c      	sub	sp, #48	; 0x30
 8004b08:	af02      	add	r7, sp, #8
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	785b      	ldrb	r3, [r3, #1]
 8004b1a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b20:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d02d      	beq.n	8004b8a <USB_HC_StartXfer+0x86>
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	791b      	ldrb	r3, [r3, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d129      	bne.n	8004b8a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004b36:	79fb      	ldrb	r3, [r7, #7]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d117      	bne.n	8004b6c <USB_HC_StartXfer+0x68>
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	79db      	ldrb	r3, [r3, #7]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <USB_HC_StartXfer+0x48>
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	79db      	ldrb	r3, [r3, #7]
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d10f      	bne.n	8004b6c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	69fa      	ldr	r2, [r7, #28]
 8004b5c:	0151      	lsls	r1, r2, #5
 8004b5e:	6a3a      	ldr	r2, [r7, #32]
 8004b60:	440a      	add	r2, r1
 8004b62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004b6c:	79fb      	ldrb	r3, [r7, #7]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10b      	bne.n	8004b8a <USB_HC_StartXfer+0x86>
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	795b      	ldrb	r3, [r3, #5]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d107      	bne.n	8004b8a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	785b      	ldrb	r3, [r3, #1]
 8004b7e:	4619      	mov	r1, r3
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 fa0f 	bl	8004fa4 <USB_DoPing>
      return HAL_OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	e0f8      	b.n	8004d7c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d018      	beq.n	8004bc4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	8912      	ldrh	r2, [r2, #8]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	8912      	ldrh	r2, [r2, #8]
 8004ba2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ba6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004ba8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004baa:	8b7b      	ldrh	r3, [r7, #26]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d90b      	bls.n	8004bc8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004bb0:	8b7b      	ldrh	r3, [r7, #26]
 8004bb2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004bb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	8912      	ldrh	r2, [r2, #8]
 8004bba:	fb03 f202 	mul.w	r2, r3, r2
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	611a      	str	r2, [r3, #16]
 8004bc2:	e001      	b.n	8004bc8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	78db      	ldrb	r3, [r3, #3]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d007      	beq.n	8004be0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004bd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	8912      	ldrh	r2, [r2, #8]
 8004bd6:	fb03 f202 	mul.w	r2, r3, r2
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	611a      	str	r2, [r3, #16]
 8004bde:	e003      	b.n	8004be8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	695a      	ldr	r2, [r3, #20]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004bf0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004bf2:	04d9      	lsls	r1, r3, #19
 8004bf4:	4b63      	ldr	r3, [pc, #396]	; (8004d84 <USB_HC_StartXfer+0x280>)
 8004bf6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004bf8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	7a9b      	ldrb	r3, [r3, #10]
 8004bfe:	075b      	lsls	r3, r3, #29
 8004c00:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004c04:	69f9      	ldr	r1, [r7, #28]
 8004c06:	0148      	lsls	r0, r1, #5
 8004c08:	6a39      	ldr	r1, [r7, #32]
 8004c0a:	4401      	add	r1, r0
 8004c0c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004c10:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004c12:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004c14:	79fb      	ldrb	r3, [r7, #7]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d009      	beq.n	8004c2e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	68d9      	ldr	r1, [r3, #12]
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c2a:	460a      	mov	r2, r1
 8004c2c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	bf0c      	ite	eq
 8004c3e:	2301      	moveq	r3, #1
 8004c40:	2300      	movne	r3, #0
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	69fa      	ldr	r2, [r7, #28]
 8004c56:	0151      	lsls	r1, r2, #5
 8004c58:	6a3a      	ldr	r2, [r7, #32]
 8004c5a:	440a      	add	r2, r1
 8004c5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c60:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004c64:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	7e7b      	ldrb	r3, [r7, #25]
 8004c76:	075b      	lsls	r3, r3, #29
 8004c78:	69f9      	ldr	r1, [r7, #28]
 8004c7a:	0148      	lsls	r0, r1, #5
 8004c7c:	6a39      	ldr	r1, [r7, #32]
 8004c7e:	4401      	add	r1, r0
 8004c80:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004c84:	4313      	orrs	r3, r2
 8004c86:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c9e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	78db      	ldrb	r3, [r3, #3]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d004      	beq.n	8004cb2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cae:	613b      	str	r3, [r7, #16]
 8004cb0:	e003      	b.n	8004cba <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004cb8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cc0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	015a      	lsls	r2, r3, #5
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cce:	461a      	mov	r2, r3
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004cd4:	79fb      	ldrb	r3, [r7, #7]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e04e      	b.n	8004d7c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	78db      	ldrb	r3, [r3, #3]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d149      	bne.n	8004d7a <USB_HC_StartXfer+0x276>
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d045      	beq.n	8004d7a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	79db      	ldrb	r3, [r3, #7]
 8004cf2:	2b03      	cmp	r3, #3
 8004cf4:	d830      	bhi.n	8004d58 <USB_HC_StartXfer+0x254>
 8004cf6:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <USB_HC_StartXfer+0x1f8>)
 8004cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfc:	08004d0d 	.word	0x08004d0d
 8004d00:	08004d31 	.word	0x08004d31
 8004d04:	08004d0d 	.word	0x08004d0d
 8004d08:	08004d31 	.word	0x08004d31
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	3303      	adds	r3, #3
 8004d12:	089b      	lsrs	r3, r3, #2
 8004d14:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004d16:	8afa      	ldrh	r2, [r7, #22]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d91c      	bls.n	8004d5c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	f043 0220 	orr.w	r2, r3, #32
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	619a      	str	r2, [r3, #24]
        }
        break;
 8004d2e:	e015      	b.n	8004d5c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	3303      	adds	r3, #3
 8004d36:	089b      	lsrs	r3, r3, #2
 8004d38:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004d3a:	8afa      	ldrh	r2, [r7, #22]
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d90a      	bls.n	8004d60 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	619a      	str	r2, [r3, #24]
        }
        break;
 8004d56:	e003      	b.n	8004d60 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004d58:	bf00      	nop
 8004d5a:	e002      	b.n	8004d62 <USB_HC_StartXfer+0x25e>
        break;
 8004d5c:	bf00      	nop
 8004d5e:	e000      	b.n	8004d62 <USB_HC_StartXfer+0x25e>
        break;
 8004d60:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	68d9      	ldr	r1, [r3, #12]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	785a      	ldrb	r2, [r3, #1]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	2000      	movs	r0, #0
 8004d72:	9000      	str	r0, [sp, #0]
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f7ff fb31 	bl	80043dc <USB_WritePacket>
  }

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3728      	adds	r7, #40	; 0x28
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	1ff80000 	.word	0x1ff80000

08004d88 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	b29b      	uxth	r3, r3
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b089      	sub	sp, #36	; 0x24
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	460b      	mov	r3, r1
 8004db4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	0c9b      	lsrs	r3, r3, #18
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	0fdb      	lsrs	r3, r3, #31
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 0320 	and.w	r3, r3, #32
 8004df6:	2b20      	cmp	r3, #32
 8004df8:	d104      	bne.n	8004e04 <USB_HC_Halt+0x5a>
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004e00:	2300      	movs	r3, #0
 8004e02:	e0c8      	b.n	8004f96 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <USB_HC_Halt+0x66>
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d163      	bne.n	8004ed8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	0151      	lsls	r1, r2, #5
 8004e22:	69fa      	ldr	r2, [r7, #28]
 8004e24:	440a      	add	r2, r1
 8004e26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e2e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f003 0320 	and.w	r3, r3, #32
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f040 80ab 	bne.w	8004f94 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d133      	bne.n	8004eb2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	0151      	lsls	r1, r2, #5
 8004e5c:	69fa      	ldr	r2, [r7, #28]
 8004e5e:	440a      	add	r2, r1
 8004e60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e68:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	0151      	lsls	r1, r2, #5
 8004e7c:	69fa      	ldr	r2, [r7, #28]
 8004e7e:	440a      	add	r2, r1
 8004e80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e88:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e96:	d81d      	bhi.n	8004ed4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eae:	d0ec      	beq.n	8004e8a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004eb0:	e070      	b.n	8004f94 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	0151      	lsls	r1, r2, #5
 8004ec4:	69fa      	ldr	r2, [r7, #28]
 8004ec6:	440a      	add	r2, r1
 8004ec8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ecc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ed0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004ed2:	e05f      	b.n	8004f94 <USB_HC_Halt+0x1ea>
            break;
 8004ed4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004ed6:	e05d      	b.n	8004f94 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	0151      	lsls	r1, r2, #5
 8004eea:	69fa      	ldr	r2, [r7, #28]
 8004eec:	440a      	add	r2, r1
 8004eee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ef2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ef6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d133      	bne.n	8004f70 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	0151      	lsls	r1, r2, #5
 8004f1a:	69fa      	ldr	r2, [r7, #28]
 8004f1c:	440a      	add	r2, r1
 8004f1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f26:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	0151      	lsls	r1, r2, #5
 8004f3a:	69fa      	ldr	r2, [r7, #28]
 8004f3c:	440a      	add	r2, r1
 8004f3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f46:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f54:	d81d      	bhi.n	8004f92 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f6c:	d0ec      	beq.n	8004f48 <USB_HC_Halt+0x19e>
 8004f6e:	e011      	b.n	8004f94 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	0151      	lsls	r1, r2, #5
 8004f82:	69fa      	ldr	r2, [r7, #28]
 8004f84:	440a      	add	r2, r1
 8004f86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f8e:	6013      	str	r3, [r2, #0]
 8004f90:	e000      	b.n	8004f94 <USB_HC_Halt+0x1ea>
          break;
 8004f92:	bf00      	nop
    }
  }

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3724      	adds	r7, #36	; 0x24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
	...

08004fa4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004fb4:	78fb      	ldrb	r3, [r7, #3]
 8004fb6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	04da      	lsls	r2, r3, #19
 8004fc0:	4b15      	ldr	r3, [pc, #84]	; (8005018 <USB_DoPing+0x74>)
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	0151      	lsls	r1, r2, #5
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	440a      	add	r2, r1
 8004fcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fd4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fec:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ff4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005002:	461a      	mov	r2, r3
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	1ff80000 	.word	0x1ff80000

0800501c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b088      	sub	sp, #32
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005024:	2300      	movs	r3, #0
 8005026:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7ff f912 	bl	800425a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005036:	2110      	movs	r1, #16
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7ff f96b 	bl	8004314 <USB_FlushTxFifo>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7ff f997 	bl	800437c <USB_FlushRxFifo>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005058:	2300      	movs	r3, #0
 800505a:	61bb      	str	r3, [r7, #24]
 800505c:	e01f      	b.n	800509e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	4413      	add	r3, r2
 8005066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005074:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800507c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005084:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	4413      	add	r3, r2
 800508e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005092:	461a      	mov	r2, r3
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	3301      	adds	r3, #1
 800509c:	61bb      	str	r3, [r7, #24]
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	2b0f      	cmp	r3, #15
 80050a2:	d9dc      	bls.n	800505e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80050a4:	2300      	movs	r3, #0
 80050a6:	61bb      	str	r3, [r7, #24]
 80050a8:	e034      	b.n	8005114 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050c0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050c8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050d0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050de:	461a      	mov	r2, r3
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	3301      	adds	r3, #1
 80050e8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050f0:	d80c      	bhi.n	800510c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005104:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005108:	d0ec      	beq.n	80050e4 <USB_StopHost+0xc8>
 800510a:	e000      	b.n	800510e <USB_StopHost+0xf2>
        break;
 800510c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	3301      	adds	r3, #1
 8005112:	61bb      	str	r3, [r7, #24]
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	2b0f      	cmp	r3, #15
 8005118:	d9c7      	bls.n	80050aa <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005120:	461a      	mov	r2, r3
 8005122:	f04f 33ff 	mov.w	r3, #4294967295
 8005126:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f04f 32ff 	mov.w	r2, #4294967295
 800512e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff f881 	bl	8004238 <USB_EnableGlobalInt>

  return ret;
 8005136:	7ffb      	ldrb	r3, [r7, #31]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3720      	adds	r7, #32
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005140:	b590      	push	{r4, r7, lr}
 8005142:	b089      	sub	sp, #36	; 0x24
 8005144:	af04      	add	r7, sp, #16
 8005146:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005148:	2301      	movs	r3, #1
 800514a:	2202      	movs	r2, #2
 800514c:	2102      	movs	r1, #2
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 fc66 	bl	8005a20 <USBH_FindInterface>
 8005154:	4603      	mov	r3, r0
 8005156:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005158:	7bfb      	ldrb	r3, [r7, #15]
 800515a:	2bff      	cmp	r3, #255	; 0xff
 800515c:	d002      	beq.n	8005164 <USBH_CDC_InterfaceInit+0x24>
 800515e:	7bfb      	ldrb	r3, [r7, #15]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d901      	bls.n	8005168 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005164:	2302      	movs	r3, #2
 8005166:	e13d      	b.n	80053e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005168:	7bfb      	ldrb	r3, [r7, #15]
 800516a:	4619      	mov	r1, r3
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 fc3b 	bl	80059e8 <USBH_SelectInterface>
 8005172:	4603      	mov	r3, r0
 8005174:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005176:	7bbb      	ldrb	r3, [r7, #14]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800517c:	2302      	movs	r3, #2
 800517e:	e131      	b.n	80053e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005186:	2050      	movs	r0, #80	; 0x50
 8005188:	f002 fac0 	bl	800770c <malloc>
 800518c:	4603      	mov	r3, r0
 800518e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80051a0:	2302      	movs	r3, #2
 80051a2:	e11f      	b.n	80053e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80051a4:	2250      	movs	r2, #80	; 0x50
 80051a6:	2100      	movs	r1, #0
 80051a8:	68b8      	ldr	r0, [r7, #8]
 80051aa:	f002 fb5d 	bl	8007868 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80051ae:	7bfb      	ldrb	r3, [r7, #15]
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	211a      	movs	r1, #26
 80051b4:	fb01 f303 	mul.w	r3, r1, r3
 80051b8:	4413      	add	r3, r2
 80051ba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	b25b      	sxtb	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	da15      	bge.n	80051f2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	211a      	movs	r1, #26
 80051cc:	fb01 f303 	mul.w	r3, r1, r3
 80051d0:	4413      	add	r3, r2
 80051d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80051d6:	781a      	ldrb	r2, [r3, #0]
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	211a      	movs	r1, #26
 80051e2:	fb01 f303 	mul.w	r3, r1, r3
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80051ec:	881a      	ldrh	r2, [r3, #0]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	785b      	ldrb	r3, [r3, #1]
 80051f6:	4619      	mov	r1, r3
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f001 ff1c 	bl	8007036 <USBH_AllocPipe>
 80051fe:	4603      	mov	r3, r0
 8005200:	461a      	mov	r2, r3
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	7819      	ldrb	r1, [r3, #0]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	7858      	ldrb	r0, [r3, #1]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	8952      	ldrh	r2, [r2, #10]
 800521e:	9202      	str	r2, [sp, #8]
 8005220:	2203      	movs	r2, #3
 8005222:	9201      	str	r2, [sp, #4]
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	4623      	mov	r3, r4
 8005228:	4602      	mov	r2, r0
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f001 fed4 	bl	8006fd8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2200      	movs	r2, #0
 8005236:	4619      	mov	r1, r3
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f002 f9e3 	bl	8007604 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800523e:	2300      	movs	r3, #0
 8005240:	2200      	movs	r2, #0
 8005242:	210a      	movs	r1, #10
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fbeb 	bl	8005a20 <USBH_FindInterface>
 800524a:	4603      	mov	r3, r0
 800524c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800524e:	7bfb      	ldrb	r3, [r7, #15]
 8005250:	2bff      	cmp	r3, #255	; 0xff
 8005252:	d002      	beq.n	800525a <USBH_CDC_InterfaceInit+0x11a>
 8005254:	7bfb      	ldrb	r3, [r7, #15]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d901      	bls.n	800525e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800525a:	2302      	movs	r3, #2
 800525c:	e0c2      	b.n	80053e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800525e:	7bfb      	ldrb	r3, [r7, #15]
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	211a      	movs	r1, #26
 8005264:	fb01 f303 	mul.w	r3, r1, r3
 8005268:	4413      	add	r3, r2
 800526a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	b25b      	sxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	da16      	bge.n	80052a4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005276:	7bfb      	ldrb	r3, [r7, #15]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	211a      	movs	r1, #26
 800527c:	fb01 f303 	mul.w	r3, r1, r3
 8005280:	4413      	add	r3, r2
 8005282:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005286:	781a      	ldrb	r2, [r3, #0]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800528c:	7bfb      	ldrb	r3, [r7, #15]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	211a      	movs	r1, #26
 8005292:	fb01 f303 	mul.w	r3, r1, r3
 8005296:	4413      	add	r3, r2
 8005298:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800529c:	881a      	ldrh	r2, [r3, #0]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	835a      	strh	r2, [r3, #26]
 80052a2:	e015      	b.n	80052d0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	211a      	movs	r1, #26
 80052aa:	fb01 f303 	mul.w	r3, r1, r3
 80052ae:	4413      	add	r3, r2
 80052b0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80052b4:	781a      	ldrb	r2, [r3, #0]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	211a      	movs	r1, #26
 80052c0:	fb01 f303 	mul.w	r3, r1, r3
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80052ca:	881a      	ldrh	r2, [r3, #0]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	211a      	movs	r1, #26
 80052d6:	fb01 f303 	mul.w	r3, r1, r3
 80052da:	4413      	add	r3, r2
 80052dc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	b25b      	sxtb	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	da16      	bge.n	8005316 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	211a      	movs	r1, #26
 80052ee:	fb01 f303 	mul.w	r3, r1, r3
 80052f2:	4413      	add	r3, r2
 80052f4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80052f8:	781a      	ldrb	r2, [r3, #0]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	211a      	movs	r1, #26
 8005304:	fb01 f303 	mul.w	r3, r1, r3
 8005308:	4413      	add	r3, r2
 800530a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800530e:	881a      	ldrh	r2, [r3, #0]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	835a      	strh	r2, [r3, #26]
 8005314:	e015      	b.n	8005342 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005316:	7bfb      	ldrb	r3, [r7, #15]
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	211a      	movs	r1, #26
 800531c:	fb01 f303 	mul.w	r3, r1, r3
 8005320:	4413      	add	r3, r2
 8005322:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005326:	781a      	ldrb	r2, [r3, #0]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800532c:	7bfb      	ldrb	r3, [r7, #15]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	211a      	movs	r1, #26
 8005332:	fb01 f303 	mul.w	r3, r1, r3
 8005336:	4413      	add	r3, r2
 8005338:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800533c:	881a      	ldrh	r2, [r3, #0]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	7b9b      	ldrb	r3, [r3, #14]
 8005346:	4619      	mov	r1, r3
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f001 fe74 	bl	8007036 <USBH_AllocPipe>
 800534e:	4603      	mov	r3, r0
 8005350:	461a      	mov	r2, r3
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	7bdb      	ldrb	r3, [r3, #15]
 800535a:	4619      	mov	r1, r3
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f001 fe6a 	bl	8007036 <USBH_AllocPipe>
 8005362:	4603      	mov	r3, r0
 8005364:	461a      	mov	r2, r3
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	7b59      	ldrb	r1, [r3, #13]
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	7b98      	ldrb	r0, [r3, #14]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	8b12      	ldrh	r2, [r2, #24]
 8005382:	9202      	str	r2, [sp, #8]
 8005384:	2202      	movs	r2, #2
 8005386:	9201      	str	r2, [sp, #4]
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	4623      	mov	r3, r4
 800538c:	4602      	mov	r2, r0
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f001 fe22 	bl	8006fd8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	7b19      	ldrb	r1, [r3, #12]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	7bd8      	ldrb	r0, [r3, #15]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	8b52      	ldrh	r2, [r2, #26]
 80053ac:	9202      	str	r2, [sp, #8]
 80053ae:	2202      	movs	r2, #2
 80053b0:	9201      	str	r2, [sp, #4]
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	4623      	mov	r3, r4
 80053b6:	4602      	mov	r2, r0
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f001 fe0d 	bl	8006fd8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	7b5b      	ldrb	r3, [r3, #13]
 80053ca:	2200      	movs	r2, #0
 80053cc:	4619      	mov	r1, r3
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f002 f918 	bl	8007604 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	7b1b      	ldrb	r3, [r3, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	4619      	mov	r1, r3
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f002 f911 	bl	8007604 <USBH_LL_SetToggle>

  return USBH_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd90      	pop	{r4, r7, pc}

080053ec <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00e      	beq.n	8005424 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	4619      	mov	r1, r3
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f001 fe02 	bl	8007016 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	4619      	mov	r1, r3
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f001 fe2d 	bl	8007078 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	7b1b      	ldrb	r3, [r3, #12]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00e      	beq.n	800544a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	7b1b      	ldrb	r3, [r3, #12]
 8005430:	4619      	mov	r1, r3
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f001 fdef 	bl	8007016 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	7b1b      	ldrb	r3, [r3, #12]
 800543c:	4619      	mov	r1, r3
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f001 fe1a 	bl	8007078 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	7b5b      	ldrb	r3, [r3, #13]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00e      	beq.n	8005470 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	7b5b      	ldrb	r3, [r3, #13]
 8005456:	4619      	mov	r1, r3
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f001 fddc 	bl	8007016 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	7b5b      	ldrb	r3, [r3, #13]
 8005462:	4619      	mov	r1, r3
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f001 fe07 	bl	8007078 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00b      	beq.n	8005494 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	4618      	mov	r0, r3
 8005486:	f002 f949 	bl	800771c <free>
    phost->pActiveClass->pData = 0U;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005490:	2200      	movs	r2, #0
 8005492:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b084      	sub	sp, #16
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	3340      	adds	r3, #64	; 0x40
 80054b4:	4619      	mov	r1, r3
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f8b1 	bl	800561e <GetLineCoding>
 80054bc:	4603      	mov	r3, r0
 80054be:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80054c0:	7afb      	ldrb	r3, [r7, #11]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d105      	bne.n	80054d2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80054cc:	2102      	movs	r1, #2
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80054d2:	7afb      	ldrb	r3, [r7, #11]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80054e4:	2301      	movs	r3, #1
 80054e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80054e8:	2300      	movs	r3, #0
 80054ea:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80054fc:	2b04      	cmp	r3, #4
 80054fe:	d877      	bhi.n	80055f0 <USBH_CDC_Process+0x114>
 8005500:	a201      	add	r2, pc, #4	; (adr r2, 8005508 <USBH_CDC_Process+0x2c>)
 8005502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005506:	bf00      	nop
 8005508:	0800551d 	.word	0x0800551d
 800550c:	08005523 	.word	0x08005523
 8005510:	08005553 	.word	0x08005553
 8005514:	080055c7 	.word	0x080055c7
 8005518:	080055d5 	.word	0x080055d5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800551c:	2300      	movs	r3, #0
 800551e:	73fb      	strb	r3, [r7, #15]
      break;
 8005520:	e06d      	b.n	80055fe <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005526:	4619      	mov	r1, r3
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f897 	bl	800565c <SetLineCoding>
 800552e:	4603      	mov	r3, r0
 8005530:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005532:	7bbb      	ldrb	r3, [r7, #14]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d104      	bne.n	8005542 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005540:	e058      	b.n	80055f4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005542:	7bbb      	ldrb	r3, [r7, #14]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d055      	beq.n	80055f4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2204      	movs	r2, #4
 800554c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005550:	e050      	b.n	80055f4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	3340      	adds	r3, #64	; 0x40
 8005556:	4619      	mov	r1, r3
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f860 	bl	800561e <GetLineCoding>
 800555e:	4603      	mov	r3, r0
 8005560:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005562:	7bbb      	ldrb	r3, [r7, #14]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d126      	bne.n	80055b6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800557a:	791b      	ldrb	r3, [r3, #4]
 800557c:	429a      	cmp	r2, r3
 800557e:	d13b      	bne.n	80055f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800558a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800558c:	429a      	cmp	r2, r3
 800558e:	d133      	bne.n	80055f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800559a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800559c:	429a      	cmp	r2, r3
 800559e:	d12b      	bne.n	80055f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055a8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d124      	bne.n	80055f8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f958 	bl	8005864 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80055b4:	e020      	b.n	80055f8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80055b6:	7bbb      	ldrb	r3, [r7, #14]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d01d      	beq.n	80055f8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2204      	movs	r2, #4
 80055c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80055c4:	e018      	b.n	80055f8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f867 	bl	800569a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 f8da 	bl	8005786 <CDC_ProcessReception>
      break;
 80055d2:	e014      	b.n	80055fe <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80055d4:	2100      	movs	r1, #0
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 ffe7 	bl	80065aa <USBH_ClrFeature>
 80055dc:	4603      	mov	r3, r0
 80055de:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80055e0:	7bbb      	ldrb	r3, [r7, #14]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10a      	bne.n	80055fc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80055ee:	e005      	b.n	80055fc <USBH_CDC_Process+0x120>

    default:
      break;
 80055f0:	bf00      	nop
 80055f2:	e004      	b.n	80055fe <USBH_CDC_Process+0x122>
      break;
 80055f4:	bf00      	nop
 80055f6:	e002      	b.n	80055fe <USBH_CDC_Process+0x122>
      break;
 80055f8:	bf00      	nop
 80055fa:	e000      	b.n	80055fe <USBH_CDC_Process+0x122>
      break;
 80055fc:	bf00      	nop

  }

  return status;
 80055fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b082      	sub	sp, #8
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	22a1      	movs	r2, #161	; 0xa1
 800562c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2221      	movs	r2, #33	; 0x21
 8005632:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2207      	movs	r2, #7
 8005644:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2207      	movs	r2, #7
 800564a:	4619      	mov	r1, r3
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f001 fa72 	bl	8006b36 <USBH_CtlReq>
 8005652:	4603      	mov	r3, r0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2221      	movs	r2, #33	; 0x21
 800566a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2220      	movs	r2, #32
 8005670:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2207      	movs	r2, #7
 8005682:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	2207      	movs	r2, #7
 8005688:	4619      	mov	r1, r3
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f001 fa53 	bl	8006b36 <USBH_CtlReq>
 8005690:	4603      	mov	r3, r0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b086      	sub	sp, #24
 800569e:	af02      	add	r7, sp, #8
 80056a0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80056ac:	2300      	movs	r3, #0
 80056ae:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d002      	beq.n	80056c0 <CDC_ProcessTransmission+0x26>
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d023      	beq.n	8005706 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80056be:	e05e      	b.n	800577e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	8b12      	ldrh	r2, [r2, #24]
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d90b      	bls.n	80056e4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	69d9      	ldr	r1, [r3, #28]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8b1a      	ldrh	r2, [r3, #24]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	7b5b      	ldrb	r3, [r3, #13]
 80056d8:	2001      	movs	r0, #1
 80056da:	9000      	str	r0, [sp, #0]
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f001 fc38 	bl	8006f52 <USBH_BulkSendData>
 80056e2:	e00b      	b.n	80056fc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	7b5b      	ldrb	r3, [r3, #13]
 80056f2:	2001      	movs	r0, #1
 80056f4:	9000      	str	r0, [sp, #0]
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f001 fc2b 	bl	8006f52 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005704:	e03b      	b.n	800577e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	7b5b      	ldrb	r3, [r3, #13]
 800570a:	4619      	mov	r1, r3
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f001 ff4f 	bl	80075b0 <USBH_LL_GetURBState>
 8005712:	4603      	mov	r3, r0
 8005714:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005716:	7afb      	ldrb	r3, [r7, #11]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d128      	bne.n	800576e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	8b12      	ldrh	r2, [r2, #24]
 8005724:	4293      	cmp	r3, r2
 8005726:	d90e      	bls.n	8005746 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	8b12      	ldrh	r2, [r2, #24]
 8005730:	1a9a      	subs	r2, r3, r2
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	8b12      	ldrh	r2, [r2, #24]
 800573e:	441a      	add	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	61da      	str	r2, [r3, #28]
 8005744:	e002      	b.n	800574c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	2b00      	cmp	r3, #0
 8005752:	d004      	beq.n	800575e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800575c:	e00e      	b.n	800577c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f868 	bl	800583c <USBH_CDC_TransmitCallback>
      break;
 800576c:	e006      	b.n	800577c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800576e:	7afb      	ldrb	r3, [r7, #11]
 8005770:	2b02      	cmp	r3, #2
 8005772:	d103      	bne.n	800577c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800577c:	bf00      	nop
  }
}
 800577e:	bf00      	nop
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b086      	sub	sp, #24
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005798:	2300      	movs	r3, #0
 800579a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	d002      	beq.n	80057ac <CDC_ProcessReception+0x26>
 80057a6:	2b04      	cmp	r3, #4
 80057a8:	d00e      	beq.n	80057c8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80057aa:	e043      	b.n	8005834 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	6a19      	ldr	r1, [r3, #32]
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	8b5a      	ldrh	r2, [r3, #26]
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	7b1b      	ldrb	r3, [r3, #12]
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f001 fbef 	bl	8006f9c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2204      	movs	r2, #4
 80057c2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80057c6:	e035      	b.n	8005834 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	7b1b      	ldrb	r3, [r3, #12]
 80057cc:	4619      	mov	r1, r3
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f001 feee 	bl	80075b0 <USBH_LL_GetURBState>
 80057d4:	4603      	mov	r3, r0
 80057d6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80057d8:	7cfb      	ldrb	r3, [r7, #19]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d129      	bne.n	8005832 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	7b1b      	ldrb	r3, [r3, #12]
 80057e2:	4619      	mov	r1, r3
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f001 fe51 	bl	800748c <USBH_LL_GetLastXferSize>
 80057ea:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d016      	beq.n	8005824 <CDC_ProcessReception+0x9e>
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	8b5b      	ldrh	r3, [r3, #26]
 80057fa:	461a      	mov	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4293      	cmp	r3, r2
 8005800:	d910      	bls.n	8005824 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	1ad2      	subs	r2, r2, r3
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	6a1a      	ldr	r2, [r3, #32]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	441a      	add	r2, r3
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2203      	movs	r2, #3
 800581e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005822:	e006      	b.n	8005832 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f80f 	bl	8005850 <USBH_CDC_ReceiveCallback>
      break;
 8005832:	bf00      	nop
  }
}
 8005834:	bf00      	nop
 8005836:	3718      	adds	r7, #24
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	4613      	mov	r3, r2
 8005884:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800588c:	2302      	movs	r3, #2
 800588e:	e029      	b.n	80058e4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	79fa      	ldrb	r2, [r7, #7]
 8005894:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 f81f 	bl	80058ec <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d003      	beq.n	80058dc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f001 fd21 	bl	8007324 <USBH_LL_Init>

  return USBH_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80058f8:	2300      	movs	r3, #0
 80058fa:	60fb      	str	r3, [r7, #12]
 80058fc:	e009      	b.n	8005912 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	33e0      	adds	r3, #224	; 0xe0
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	2200      	movs	r2, #0
 800590a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3301      	adds	r3, #1
 8005910:	60fb      	str	r3, [r7, #12]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2b0f      	cmp	r3, #15
 8005916:	d9f2      	bls.n	80058fe <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005918:	2300      	movs	r3, #0
 800591a:	60fb      	str	r3, [r7, #12]
 800591c:	e009      	b.n	8005932 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4413      	add	r3, r2
 8005924:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005928:	2200      	movs	r2, #0
 800592a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	3301      	adds	r3, #1
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005938:	d3f1      	bcc.n	800591e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2240      	movs	r2, #64	; 0x40
 800595e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800599e:	2300      	movs	r3, #0
 80059a0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d016      	beq.n	80059d6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10e      	bne.n	80059d0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80059b8:	1c59      	adds	r1, r3, #1
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	33de      	adds	r3, #222	; 0xde
 80059c4:	6839      	ldr	r1, [r7, #0]
 80059c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80059ca:	2300      	movs	r3, #0
 80059cc:	73fb      	strb	r3, [r7, #15]
 80059ce:	e004      	b.n	80059da <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80059d0:	2302      	movs	r3, #2
 80059d2:	73fb      	strb	r3, [r7, #15]
 80059d4:	e001      	b.n	80059da <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80059d6:	2302      	movs	r3, #2
 80059d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80059da:	7bfb      	ldrb	r3, [r7, #15]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	460b      	mov	r3, r1
 80059f2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80059f4:	2300      	movs	r3, #0
 80059f6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80059fe:	78fa      	ldrb	r2, [r7, #3]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d204      	bcs.n	8005a0e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	78fa      	ldrb	r2, [r7, #3]
 8005a08:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005a0c:	e001      	b.n	8005a12 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005a0e:	2302      	movs	r3, #2
 8005a10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	4608      	mov	r0, r1
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	4603      	mov	r3, r0
 8005a30:	70fb      	strb	r3, [r7, #3]
 8005a32:	460b      	mov	r3, r1
 8005a34:	70bb      	strb	r3, [r7, #2]
 8005a36:	4613      	mov	r3, r2
 8005a38:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005a48:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005a4a:	e025      	b.n	8005a98 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005a4c:	7dfb      	ldrb	r3, [r7, #23]
 8005a4e:	221a      	movs	r2, #26
 8005a50:	fb02 f303 	mul.w	r3, r2, r3
 8005a54:	3308      	adds	r3, #8
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	4413      	add	r3, r2
 8005a5a:	3302      	adds	r3, #2
 8005a5c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	795b      	ldrb	r3, [r3, #5]
 8005a62:	78fa      	ldrb	r2, [r7, #3]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d002      	beq.n	8005a6e <USBH_FindInterface+0x4e>
 8005a68:	78fb      	ldrb	r3, [r7, #3]
 8005a6a:	2bff      	cmp	r3, #255	; 0xff
 8005a6c:	d111      	bne.n	8005a92 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005a72:	78ba      	ldrb	r2, [r7, #2]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d002      	beq.n	8005a7e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005a78:	78bb      	ldrb	r3, [r7, #2]
 8005a7a:	2bff      	cmp	r3, #255	; 0xff
 8005a7c:	d109      	bne.n	8005a92 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005a82:	787a      	ldrb	r2, [r7, #1]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d002      	beq.n	8005a8e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005a88:	787b      	ldrb	r3, [r7, #1]
 8005a8a:	2bff      	cmp	r3, #255	; 0xff
 8005a8c:	d101      	bne.n	8005a92 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005a8e:	7dfb      	ldrb	r3, [r7, #23]
 8005a90:	e006      	b.n	8005aa0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005a92:	7dfb      	ldrb	r3, [r7, #23]
 8005a94:	3301      	adds	r3, #1
 8005a96:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005a98:	7dfb      	ldrb	r3, [r7, #23]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d9d6      	bls.n	8005a4c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005a9e:	23ff      	movs	r3, #255	; 0xff
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	371c      	adds	r7, #28
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f001 fc71 	bl	800739c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005aba:	2101      	movs	r1, #1
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f001 fd8a 	bl	80075d6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b088      	sub	sp, #32
 8005ad0:	af04      	add	r7, sp, #16
 8005ad2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d102      	bne.n	8005aee <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2203      	movs	r2, #3
 8005aec:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b0b      	cmp	r3, #11
 8005af6:	f200 81bb 	bhi.w	8005e70 <USBH_Process+0x3a4>
 8005afa:	a201      	add	r2, pc, #4	; (adr r2, 8005b00 <USBH_Process+0x34>)
 8005afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b00:	08005b31 	.word	0x08005b31
 8005b04:	08005b63 	.word	0x08005b63
 8005b08:	08005bcb 	.word	0x08005bcb
 8005b0c:	08005e0b 	.word	0x08005e0b
 8005b10:	08005e71 	.word	0x08005e71
 8005b14:	08005c6b 	.word	0x08005c6b
 8005b18:	08005db1 	.word	0x08005db1
 8005b1c:	08005ca1 	.word	0x08005ca1
 8005b20:	08005cc1 	.word	0x08005cc1
 8005b24:	08005cdf 	.word	0x08005cdf
 8005b28:	08005d23 	.word	0x08005d23
 8005b2c:	08005df3 	.word	0x08005df3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 819b 	beq.w	8005e74 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005b44:	20c8      	movs	r0, #200	; 0xc8
 8005b46:	f001 fd8d 	bl	8007664 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f001 fc83 	bl	8007456 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005b60:	e188      	b.n	8005e74 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d107      	bne.n	8005b7c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005b7a:	e18a      	b.n	8005e92 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005b82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b86:	d914      	bls.n	8005bb2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005b8e:	3301      	adds	r3, #1
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	d903      	bls.n	8005baa <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	220d      	movs	r2, #13
 8005ba6:	701a      	strb	r2, [r3, #0]
      break;
 8005ba8:	e173      	b.n	8005e92 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	701a      	strb	r2, [r3, #0]
      break;
 8005bb0:	e16f      	b.n	8005e92 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005bb8:	f103 020a 	add.w	r2, r3, #10
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005bc2:	200a      	movs	r0, #10
 8005bc4:	f001 fd4e 	bl	8007664 <USBH_Delay>
      break;
 8005bc8:	e163      	b.n	8005e92 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d005      	beq.n	8005be0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005bda:	2104      	movs	r1, #4
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005be0:	2064      	movs	r0, #100	; 0x64
 8005be2:	f001 fd3f 	bl	8007664 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f001 fc0e 	bl	8007408 <USBH_LL_GetSpeed>
 8005bec:	4603      	mov	r3, r0
 8005bee:	461a      	mov	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2205      	movs	r2, #5
 8005bfa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f001 fa19 	bl	8007036 <USBH_AllocPipe>
 8005c04:	4603      	mov	r3, r0
 8005c06:	461a      	mov	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005c0c:	2180      	movs	r1, #128	; 0x80
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f001 fa11 	bl	8007036 <USBH_AllocPipe>
 8005c14:	4603      	mov	r3, r0
 8005c16:	461a      	mov	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	7919      	ldrb	r1, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005c30:	9202      	str	r2, [sp, #8]
 8005c32:	2200      	movs	r2, #0
 8005c34:	9201      	str	r2, [sp, #4]
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2280      	movs	r2, #128	; 0x80
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f001 f9cb 	bl	8006fd8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	7959      	ldrb	r1, [r3, #5]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005c56:	9202      	str	r2, [sp, #8]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	9201      	str	r2, [sp, #4]
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2200      	movs	r2, #0
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f001 f9b8 	bl	8006fd8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005c68:	e113      	b.n	8005e92 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f916 	bl	8005e9c <USBH_HandleEnum>
 8005c70:	4603      	mov	r3, r0
 8005c72:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005c74:	7bbb      	ldrb	r3, [r7, #14]
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f040 80fd 	bne.w	8005e78 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d103      	bne.n	8005c98 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2208      	movs	r2, #8
 8005c94:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005c96:	e0ef      	b.n	8005e78 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2207      	movs	r2, #7
 8005c9c:	701a      	strb	r2, [r3, #0]
      break;
 8005c9e:	e0eb      	b.n	8005e78 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 80e8 	beq.w	8005e7c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005cb2:	2101      	movs	r1, #1
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2208      	movs	r2, #8
 8005cbc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8005cbe:	e0dd      	b.n	8005e7c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 fc27 	bl	800651c <USBH_SetCfg>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f040 80d5 	bne.w	8005e80 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2209      	movs	r2, #9
 8005cda:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005cdc:	e0d0      	b.n	8005e80 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8005ce4:	f003 0320 	and.w	r3, r3, #32
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d016      	beq.n	8005d1a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8005cec:	2101      	movs	r1, #1
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fc37 	bl	8006562 <USBH_SetFeature>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005cf8:	7bbb      	ldrb	r3, [r7, #14]
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d103      	bne.n	8005d08 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	220a      	movs	r2, #10
 8005d04:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005d06:	e0bd      	b.n	8005e84 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8005d08:	7bbb      	ldrb	r3, [r7, #14]
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b03      	cmp	r3, #3
 8005d0e:	f040 80b9 	bne.w	8005e84 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	220a      	movs	r2, #10
 8005d16:	701a      	strb	r2, [r3, #0]
      break;
 8005d18:	e0b4      	b.n	8005e84 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	220a      	movs	r2, #10
 8005d1e:	701a      	strb	r2, [r3, #0]
      break;
 8005d20:	e0b0      	b.n	8005e84 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 80ad 	beq.w	8005e88 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005d36:	2300      	movs	r3, #0
 8005d38:	73fb      	strb	r3, [r7, #15]
 8005d3a:	e016      	b.n	8005d6a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005d3c:	7bfa      	ldrb	r2, [r7, #15]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	32de      	adds	r2, #222	; 0xde
 8005d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d46:	791a      	ldrb	r2, [r3, #4]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d108      	bne.n	8005d64 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8005d52:	7bfa      	ldrb	r2, [r7, #15]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	32de      	adds	r2, #222	; 0xde
 8005d58:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8005d62:	e005      	b.n	8005d70 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
 8005d66:	3301      	adds	r3, #1
 8005d68:	73fb      	strb	r3, [r7, #15]
 8005d6a:	7bfb      	ldrb	r3, [r7, #15]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d0e5      	beq.n	8005d3c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d016      	beq.n	8005da8 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	4798      	blx	r3
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d109      	bne.n	8005da0 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2206      	movs	r2, #6
 8005d90:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d98:	2103      	movs	r1, #3
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005d9e:	e073      	b.n	8005e88 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	220d      	movs	r2, #13
 8005da4:	701a      	strb	r2, [r3, #0]
      break;
 8005da6:	e06f      	b.n	8005e88 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	220d      	movs	r2, #13
 8005dac:	701a      	strb	r2, [r3, #0]
      break;
 8005dae:	e06b      	b.n	8005e88 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d017      	beq.n	8005dea <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	4798      	blx	r3
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005dca:	7bbb      	ldrb	r3, [r7, #14]
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d103      	bne.n	8005dda <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	220b      	movs	r2, #11
 8005dd6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005dd8:	e058      	b.n	8005e8c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8005dda:	7bbb      	ldrb	r3, [r7, #14]
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d154      	bne.n	8005e8c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	220d      	movs	r2, #13
 8005de6:	701a      	strb	r2, [r3, #0]
      break;
 8005de8:	e050      	b.n	8005e8c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	220d      	movs	r2, #13
 8005dee:	701a      	strb	r2, [r3, #0]
      break;
 8005df0:	e04c      	b.n	8005e8c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d049      	beq.n	8005e90 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	4798      	blx	r3
      }
      break;
 8005e08:	e042      	b.n	8005e90 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7ff fd6a 	bl	80058ec <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d009      	beq.n	8005e36 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d005      	beq.n	8005e4c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005e46:	2105      	movs	r1, #5
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d107      	bne.n	8005e68 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7ff fe23 	bl	8005aac <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005e66:	e014      	b.n	8005e92 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f001 fa97 	bl	800739c <USBH_LL_Start>
      break;
 8005e6e:	e010      	b.n	8005e92 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8005e70:	bf00      	nop
 8005e72:	e00e      	b.n	8005e92 <USBH_Process+0x3c6>
      break;
 8005e74:	bf00      	nop
 8005e76:	e00c      	b.n	8005e92 <USBH_Process+0x3c6>
      break;
 8005e78:	bf00      	nop
 8005e7a:	e00a      	b.n	8005e92 <USBH_Process+0x3c6>
    break;
 8005e7c:	bf00      	nop
 8005e7e:	e008      	b.n	8005e92 <USBH_Process+0x3c6>
      break;
 8005e80:	bf00      	nop
 8005e82:	e006      	b.n	8005e92 <USBH_Process+0x3c6>
      break;
 8005e84:	bf00      	nop
 8005e86:	e004      	b.n	8005e92 <USBH_Process+0x3c6>
      break;
 8005e88:	bf00      	nop
 8005e8a:	e002      	b.n	8005e92 <USBH_Process+0x3c6>
      break;
 8005e8c:	bf00      	nop
 8005e8e:	e000      	b.n	8005e92 <USBH_Process+0x3c6>
      break;
 8005e90:	bf00      	nop
  }
  return USBH_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b088      	sub	sp, #32
 8005ea0:	af04      	add	r7, sp, #16
 8005ea2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	785b      	ldrb	r3, [r3, #1]
 8005eb0:	2b07      	cmp	r3, #7
 8005eb2:	f200 81bd 	bhi.w	8006230 <USBH_HandleEnum+0x394>
 8005eb6:	a201      	add	r2, pc, #4	; (adr r2, 8005ebc <USBH_HandleEnum+0x20>)
 8005eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebc:	08005edd 	.word	0x08005edd
 8005ec0:	08005f97 	.word	0x08005f97
 8005ec4:	08006001 	.word	0x08006001
 8005ec8:	0800608b 	.word	0x0800608b
 8005ecc:	080060f5 	.word	0x080060f5
 8005ed0:	08006165 	.word	0x08006165
 8005ed4:	080061ab 	.word	0x080061ab
 8005ed8:	080061f1 	.word	0x080061f1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8005edc:	2108      	movs	r1, #8
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 fa4c 	bl	800637c <USBH_Get_DevDesc>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005ee8:	7bbb      	ldrb	r3, [r7, #14]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d12e      	bne.n	8005f4c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	7919      	ldrb	r1, [r3, #4]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005f12:	9202      	str	r2, [sp, #8]
 8005f14:	2200      	movs	r2, #0
 8005f16:	9201      	str	r2, [sp, #4]
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2280      	movs	r2, #128	; 0x80
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f001 f85a 	bl	8006fd8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	7959      	ldrb	r1, [r3, #5]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005f38:	9202      	str	r2, [sp, #8]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	9201      	str	r2, [sp, #4]
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	4603      	mov	r3, r0
 8005f42:	2200      	movs	r2, #0
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f001 f847 	bl	8006fd8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005f4a:	e173      	b.n	8006234 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005f4c:	7bbb      	ldrb	r3, [r7, #14]
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	f040 8170 	bne.w	8006234 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	d903      	bls.n	8005f76 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	220d      	movs	r2, #13
 8005f72:	701a      	strb	r2, [r3, #0]
      break;
 8005f74:	e15e      	b.n	8006234 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	795b      	ldrb	r3, [r3, #5]
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f001 f87b 	bl	8007078 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	791b      	ldrb	r3, [r3, #4]
 8005f86:	4619      	mov	r1, r3
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f001 f875 	bl	8007078 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	701a      	strb	r2, [r3, #0]
      break;
 8005f94:	e14e      	b.n	8006234 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8005f96:	2112      	movs	r1, #18
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 f9ef 	bl	800637c <USBH_Get_DevDesc>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005fa2:	7bbb      	ldrb	r3, [r7, #14]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d103      	bne.n	8005fb0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005fae:	e143      	b.n	8006238 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005fb0:	7bbb      	ldrb	r3, [r7, #14]
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	f040 8140 	bne.w	8006238 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	d903      	bls.n	8005fda <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	220d      	movs	r2, #13
 8005fd6:	701a      	strb	r2, [r3, #0]
      break;
 8005fd8:	e12e      	b.n	8006238 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	795b      	ldrb	r3, [r3, #5]
 8005fde:	4619      	mov	r1, r3
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f001 f849 	bl	8007078 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	791b      	ldrb	r3, [r3, #4]
 8005fea:	4619      	mov	r1, r3
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f001 f843 	bl	8007078 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	701a      	strb	r2, [r3, #0]
      break;
 8005ffe:	e11b      	b.n	8006238 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006000:	2101      	movs	r1, #1
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fa66 	bl	80064d4 <USBH_SetAddress>
 8006008:	4603      	mov	r3, r0
 800600a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800600c:	7bbb      	ldrb	r3, [r7, #14]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d130      	bne.n	8006074 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8006012:	2002      	movs	r0, #2
 8006014:	f001 fb26 	bl	8007664 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2203      	movs	r2, #3
 8006024:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	7919      	ldrb	r1, [r3, #4]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800603a:	9202      	str	r2, [sp, #8]
 800603c:	2200      	movs	r2, #0
 800603e:	9201      	str	r2, [sp, #4]
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	4603      	mov	r3, r0
 8006044:	2280      	movs	r2, #128	; 0x80
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 ffc6 	bl	8006fd8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	7959      	ldrb	r1, [r3, #5]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006060:	9202      	str	r2, [sp, #8]
 8006062:	2200      	movs	r2, #0
 8006064:	9201      	str	r2, [sp, #4]
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	4603      	mov	r3, r0
 800606a:	2200      	movs	r2, #0
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 ffb3 	bl	8006fd8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006072:	e0e3      	b.n	800623c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006074:	7bbb      	ldrb	r3, [r7, #14]
 8006076:	2b03      	cmp	r3, #3
 8006078:	f040 80e0 	bne.w	800623c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	220d      	movs	r2, #13
 8006080:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	705a      	strb	r2, [r3, #1]
      break;
 8006088:	e0d8      	b.n	800623c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800608a:	2109      	movs	r1, #9
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f99d 	bl	80063cc <USBH_Get_CfgDesc>
 8006092:	4603      	mov	r3, r0
 8006094:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006096:	7bbb      	ldrb	r3, [r7, #14]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d103      	bne.n	80060a4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2204      	movs	r2, #4
 80060a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80060a2:	e0cd      	b.n	8006240 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80060a4:	7bbb      	ldrb	r3, [r7, #14]
 80060a6:	2b03      	cmp	r3, #3
 80060a8:	f040 80ca 	bne.w	8006240 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80060b2:	3301      	adds	r3, #1
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80060c2:	2b03      	cmp	r3, #3
 80060c4:	d903      	bls.n	80060ce <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	220d      	movs	r2, #13
 80060ca:	701a      	strb	r2, [r3, #0]
      break;
 80060cc:	e0b8      	b.n	8006240 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	795b      	ldrb	r3, [r3, #5]
 80060d2:	4619      	mov	r1, r3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 ffcf 	bl	8007078 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	791b      	ldrb	r3, [r3, #4]
 80060de:	4619      	mov	r1, r3
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 ffc9 	bl	8007078 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	701a      	strb	r2, [r3, #0]
      break;
 80060f2:	e0a5      	b.n	8006240 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80060fa:	4619      	mov	r1, r3
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f965 	bl	80063cc <USBH_Get_CfgDesc>
 8006102:	4603      	mov	r3, r0
 8006104:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006106:	7bbb      	ldrb	r3, [r7, #14]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d103      	bne.n	8006114 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2205      	movs	r2, #5
 8006110:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006112:	e097      	b.n	8006244 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006114:	7bbb      	ldrb	r3, [r7, #14]
 8006116:	2b03      	cmp	r3, #3
 8006118:	f040 8094 	bne.w	8006244 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006122:	3301      	adds	r3, #1
 8006124:	b2da      	uxtb	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006132:	2b03      	cmp	r3, #3
 8006134:	d903      	bls.n	800613e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	220d      	movs	r2, #13
 800613a:	701a      	strb	r2, [r3, #0]
      break;
 800613c:	e082      	b.n	8006244 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	795b      	ldrb	r3, [r3, #5]
 8006142:	4619      	mov	r1, r3
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 ff97 	bl	8007078 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	791b      	ldrb	r3, [r3, #4]
 800614e:	4619      	mov	r1, r3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 ff91 	bl	8007078 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	701a      	strb	r2, [r3, #0]
      break;
 8006162:	e06f      	b.n	8006244 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800616a:	2b00      	cmp	r3, #0
 800616c:	d019      	beq.n	80061a2 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800617a:	23ff      	movs	r3, #255	; 0xff
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 f949 	bl	8006414 <USBH_Get_StringDesc>
 8006182:	4603      	mov	r3, r0
 8006184:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006186:	7bbb      	ldrb	r3, [r7, #14]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d103      	bne.n	8006194 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2206      	movs	r2, #6
 8006190:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006192:	e059      	b.n	8006248 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006194:	7bbb      	ldrb	r3, [r7, #14]
 8006196:	2b03      	cmp	r3, #3
 8006198:	d156      	bne.n	8006248 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2206      	movs	r2, #6
 800619e:	705a      	strb	r2, [r3, #1]
      break;
 80061a0:	e052      	b.n	8006248 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2206      	movs	r2, #6
 80061a6:	705a      	strb	r2, [r3, #1]
      break;
 80061a8:	e04e      	b.n	8006248 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d019      	beq.n	80061e8 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80061c0:	23ff      	movs	r3, #255	; 0xff
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f926 	bl	8006414 <USBH_Get_StringDesc>
 80061c8:	4603      	mov	r3, r0
 80061ca:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80061cc:	7bbb      	ldrb	r3, [r7, #14]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d103      	bne.n	80061da <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2207      	movs	r2, #7
 80061d6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80061d8:	e038      	b.n	800624c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80061da:	7bbb      	ldrb	r3, [r7, #14]
 80061dc:	2b03      	cmp	r3, #3
 80061de:	d135      	bne.n	800624c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2207      	movs	r2, #7
 80061e4:	705a      	strb	r2, [r3, #1]
      break;
 80061e6:	e031      	b.n	800624c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2207      	movs	r2, #7
 80061ec:	705a      	strb	r2, [r3, #1]
      break;
 80061ee:	e02d      	b.n	800624c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d017      	beq.n	800622a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006206:	23ff      	movs	r3, #255	; 0xff
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f903 	bl	8006414 <USBH_Get_StringDesc>
 800620e:	4603      	mov	r3, r0
 8006210:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006212:	7bbb      	ldrb	r3, [r7, #14]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d102      	bne.n	800621e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006218:	2300      	movs	r3, #0
 800621a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800621c:	e018      	b.n	8006250 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800621e:	7bbb      	ldrb	r3, [r7, #14]
 8006220:	2b03      	cmp	r3, #3
 8006222:	d115      	bne.n	8006250 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8006224:	2300      	movs	r3, #0
 8006226:	73fb      	strb	r3, [r7, #15]
      break;
 8006228:	e012      	b.n	8006250 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	73fb      	strb	r3, [r7, #15]
      break;
 800622e:	e00f      	b.n	8006250 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8006230:	bf00      	nop
 8006232:	e00e      	b.n	8006252 <USBH_HandleEnum+0x3b6>
      break;
 8006234:	bf00      	nop
 8006236:	e00c      	b.n	8006252 <USBH_HandleEnum+0x3b6>
      break;
 8006238:	bf00      	nop
 800623a:	e00a      	b.n	8006252 <USBH_HandleEnum+0x3b6>
      break;
 800623c:	bf00      	nop
 800623e:	e008      	b.n	8006252 <USBH_HandleEnum+0x3b6>
      break;
 8006240:	bf00      	nop
 8006242:	e006      	b.n	8006252 <USBH_HandleEnum+0x3b6>
      break;
 8006244:	bf00      	nop
 8006246:	e004      	b.n	8006252 <USBH_HandleEnum+0x3b6>
      break;
 8006248:	bf00      	nop
 800624a:	e002      	b.n	8006252 <USBH_HandleEnum+0x3b6>
      break;
 800624c:	bf00      	nop
 800624e:	e000      	b.n	8006252 <USBH_HandleEnum+0x3b6>
      break;
 8006250:	bf00      	nop
  }
  return Status;
 8006252:	7bfb      	ldrb	r3, [r7, #15]
}
 8006254:	4618      	mov	r0, r3
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800626e:	bf00      	nop
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b082      	sub	sp, #8
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006288:	1c5a      	adds	r2, r3, #1
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 f804 	bl	800629e <USBH_HandleSof>
}
 8006296:	bf00      	nop
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b082      	sub	sp, #8
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b0b      	cmp	r3, #11
 80062ae:	d10a      	bne.n	80062c6 <USBH_HandleSof+0x28>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d005      	beq.n	80062c6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	4798      	blx	r3
  }
}
 80062c6:	bf00      	nop
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b083      	sub	sp, #12
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80062de:	bf00      	nop
}
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80062fa:	bf00      	nop
}
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006306:	b480      	push	{r7}
 8006308:	b083      	sub	sp, #12
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f001 f83c 	bl	80073d2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	791b      	ldrb	r3, [r3, #4]
 800635e:	4619      	mov	r1, r3
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fe89 	bl	8007078 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	795b      	ldrb	r3, [r3, #5]
 800636a:	4619      	mov	r1, r3
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 fe83 	bl	8007078 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af02      	add	r7, sp, #8
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	460b      	mov	r3, r1
 8006386:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800638e:	78fb      	ldrb	r3, [r7, #3]
 8006390:	b29b      	uxth	r3, r3
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	4613      	mov	r3, r2
 8006396:	f44f 7280 	mov.w	r2, #256	; 0x100
 800639a:	2100      	movs	r1, #0
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f864 	bl	800646a <USBH_GetDescriptor>
 80063a2:	4603      	mov	r3, r0
 80063a4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80063a6:	7bfb      	ldrb	r3, [r7, #15]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10a      	bne.n	80063c2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f203 3026 	addw	r0, r3, #806	; 0x326
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80063b8:	78fa      	ldrb	r2, [r7, #3]
 80063ba:	b292      	uxth	r2, r2
 80063bc:	4619      	mov	r1, r3
 80063be:	f000 f919 	bl	80065f4 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80063c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	460b      	mov	r3, r1
 80063d6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	331c      	adds	r3, #28
 80063dc:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80063de:	887b      	ldrh	r3, [r7, #2]
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063e8:	2100      	movs	r1, #0
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f83d 	bl	800646a <USBH_GetDescriptor>
 80063f0:	4603      	mov	r3, r0
 80063f2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d107      	bne.n	800640a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80063fa:	887b      	ldrh	r3, [r7, #2]
 80063fc:	461a      	mov	r2, r3
 80063fe:	68b9      	ldr	r1, [r7, #8]
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f985 	bl	8006710 <USBH_ParseCfgDesc>
 8006406:	4603      	mov	r3, r0
 8006408:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800640a:	7bfb      	ldrb	r3, [r7, #15]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b088      	sub	sp, #32
 8006418:	af02      	add	r7, sp, #8
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	607a      	str	r2, [r7, #4]
 800641e:	461a      	mov	r2, r3
 8006420:	460b      	mov	r3, r1
 8006422:	72fb      	strb	r3, [r7, #11]
 8006424:	4613      	mov	r3, r2
 8006426:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8006428:	7afb      	ldrb	r3, [r7, #11]
 800642a:	b29b      	uxth	r3, r3
 800642c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006430:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006438:	893b      	ldrh	r3, [r7, #8]
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	460b      	mov	r3, r1
 800643e:	2100      	movs	r1, #0
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 f812 	bl	800646a <USBH_GetDescriptor>
 8006446:	4603      	mov	r3, r0
 8006448:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800644a:	7dfb      	ldrb	r3, [r7, #23]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d107      	bne.n	8006460 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006456:	893a      	ldrh	r2, [r7, #8]
 8006458:	6879      	ldr	r1, [r7, #4]
 800645a:	4618      	mov	r0, r3
 800645c:	f000 fb1e 	bl	8006a9c <USBH_ParseStringDesc>
  }

  return status;
 8006460:	7dfb      	ldrb	r3, [r7, #23]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b084      	sub	sp, #16
 800646e:	af00      	add	r7, sp, #0
 8006470:	60f8      	str	r0, [r7, #12]
 8006472:	607b      	str	r3, [r7, #4]
 8006474:	460b      	mov	r3, r1
 8006476:	72fb      	strb	r3, [r7, #11]
 8006478:	4613      	mov	r3, r2
 800647a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	789b      	ldrb	r3, [r3, #2]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d11c      	bne.n	80064be <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006484:	7afb      	ldrb	r3, [r7, #11]
 8006486:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800648a:	b2da      	uxtb	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2206      	movs	r2, #6
 8006494:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	893a      	ldrh	r2, [r7, #8]
 800649a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800649c:	893b      	ldrh	r3, [r7, #8]
 800649e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80064a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064a6:	d104      	bne.n	80064b2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f240 4209 	movw	r2, #1033	; 0x409
 80064ae:	829a      	strh	r2, [r3, #20]
 80064b0:	e002      	b.n	80064b8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	8b3a      	ldrh	r2, [r7, #24]
 80064bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80064be:	8b3b      	ldrh	r3, [r7, #24]
 80064c0:	461a      	mov	r2, r3
 80064c2:	6879      	ldr	r1, [r7, #4]
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f000 fb36 	bl	8006b36 <USBH_CtlReq>
 80064ca:	4603      	mov	r3, r0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	460b      	mov	r3, r1
 80064de:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	789b      	ldrb	r3, [r3, #2]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d10f      	bne.n	8006508 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2205      	movs	r2, #5
 80064f2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80064f4:	78fb      	ldrb	r3, [r7, #3]
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006508:	2200      	movs	r2, #0
 800650a:	2100      	movs	r1, #0
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 fb12 	bl	8006b36 <USBH_CtlReq>
 8006512:	4603      	mov	r3, r0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3708      	adds	r7, #8
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	460b      	mov	r3, r1
 8006526:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	789b      	ldrb	r3, [r3, #2]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d10e      	bne.n	800654e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2209      	movs	r2, #9
 800653a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	887a      	ldrh	r2, [r7, #2]
 8006540:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800654e:	2200      	movs	r2, #0
 8006550:	2100      	movs	r1, #0
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 faef 	bl	8006b36 <USBH_CtlReq>
 8006558:	4603      	mov	r3, r0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b082      	sub	sp, #8
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	460b      	mov	r3, r1
 800656c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	789b      	ldrb	r3, [r3, #2]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d10f      	bne.n	8006596 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2203      	movs	r2, #3
 8006580:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006582:	78fb      	ldrb	r3, [r7, #3]
 8006584:	b29a      	uxth	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006596:	2200      	movs	r2, #0
 8006598:	2100      	movs	r1, #0
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 facb 	bl	8006b36 <USBH_CtlReq>
 80065a0:	4603      	mov	r3, r0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b082      	sub	sp, #8
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
 80065b2:	460b      	mov	r3, r1
 80065b4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	789b      	ldrb	r3, [r3, #2]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d10f      	bne.n	80065de <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2202      	movs	r2, #2
 80065c2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80065d0:	78fb      	ldrb	r3, [r7, #3]
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80065de:	2200      	movs	r2, #0
 80065e0:	2100      	movs	r1, #0
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 faa7 	bl	8006b36 <USBH_CtlReq>
 80065e8:	4603      	mov	r3, r0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
	...

080065f4 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	4613      	mov	r3, r2
 8006600:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	781a      	ldrb	r2, [r3, #0]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	785a      	ldrb	r2, [r3, #1]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	3302      	adds	r3, #2
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	461a      	mov	r2, r3
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	3303      	adds	r3, #3
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	021b      	lsls	r3, r3, #8
 8006622:	b29b      	uxth	r3, r3
 8006624:	4313      	orrs	r3, r2
 8006626:	b29a      	uxth	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	791a      	ldrb	r2, [r3, #4]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	795a      	ldrb	r2, [r3, #5]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	799a      	ldrb	r2, [r3, #6]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	79da      	ldrb	r2, [r3, #7]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	79db      	ldrb	r3, [r3, #7]
 8006650:	2b20      	cmp	r3, #32
 8006652:	dc0f      	bgt.n	8006674 <USBH_ParseDevDesc+0x80>
 8006654:	2b08      	cmp	r3, #8
 8006656:	db14      	blt.n	8006682 <USBH_ParseDevDesc+0x8e>
 8006658:	3b08      	subs	r3, #8
 800665a:	4a2c      	ldr	r2, [pc, #176]	; (800670c <USBH_ParseDevDesc+0x118>)
 800665c:	fa22 f303 	lsr.w	r3, r2, r3
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	bf14      	ite	ne
 8006668:	2301      	movne	r3, #1
 800666a:	2300      	moveq	r3, #0
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d102      	bne.n	8006678 <USBH_ParseDevDesc+0x84>
 8006672:	e006      	b.n	8006682 <USBH_ParseDevDesc+0x8e>
 8006674:	2b40      	cmp	r3, #64	; 0x40
 8006676:	d104      	bne.n	8006682 <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	79da      	ldrb	r2, [r3, #7]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	71da      	strb	r2, [r3, #7]
      break;
 8006680:	e003      	b.n	800668a <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2240      	movs	r2, #64	; 0x40
 8006686:	71da      	strb	r2, [r3, #7]
      break;
 8006688:	bf00      	nop
  }

  if (length > 8U)
 800668a:	88fb      	ldrh	r3, [r7, #6]
 800668c:	2b08      	cmp	r3, #8
 800668e:	d936      	bls.n	80066fe <USBH_ParseDevDesc+0x10a>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	3308      	adds	r3, #8
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	3309      	adds	r3, #9
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	021b      	lsls	r3, r3, #8
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	4313      	orrs	r3, r2
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	330a      	adds	r3, #10
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	461a      	mov	r2, r3
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	330b      	adds	r3, #11
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	021b      	lsls	r3, r3, #8
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	4313      	orrs	r3, r2
 80066be:	b29a      	uxth	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	330c      	adds	r3, #12
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	461a      	mov	r2, r3
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	330d      	adds	r3, #13
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	021b      	lsls	r3, r3, #8
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	4313      	orrs	r3, r2
 80066d8:	b29a      	uxth	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	7b9a      	ldrb	r2, [r3, #14]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	7bda      	ldrb	r2, [r3, #15]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	7c1a      	ldrb	r2, [r3, #16]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	7c5a      	ldrb	r2, [r3, #17]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	745a      	strb	r2, [r3, #17]
  }
}
 80066fe:	bf00      	nop
 8006700:	3714      	adds	r7, #20
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	01000101 	.word	0x01000101

08006710 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b08c      	sub	sp, #48	; 0x30
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	4613      	mov	r3, r2
 800671c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006724:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006726:	2300      	movs	r3, #0
 8006728:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8006736:	2300      	movs	r3, #0
 8006738:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	781a      	ldrb	r2, [r3, #0]
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	785a      	ldrb	r2, [r3, #1]
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	3302      	adds	r3, #2
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	461a      	mov	r2, r3
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	3303      	adds	r3, #3
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	021b      	lsls	r3, r3, #8
 8006760:	b29b      	uxth	r3, r3
 8006762:	4313      	orrs	r3, r2
 8006764:	b29b      	uxth	r3, r3
 8006766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800676a:	bf28      	it	cs
 800676c:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006770:	b29a      	uxth	r2, r3
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	791a      	ldrb	r2, [r3, #4]
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	795a      	ldrb	r2, [r3, #5]
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	799a      	ldrb	r2, [r3, #6]
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	79da      	ldrb	r2, [r3, #7]
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	7a1a      	ldrb	r2, [r3, #8]
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	2b09      	cmp	r3, #9
 80067a4:	d002      	beq.n	80067ac <USBH_ParseCfgDesc+0x9c>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80067a6:	6a3b      	ldr	r3, [r7, #32]
 80067a8:	2209      	movs	r2, #9
 80067aa:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80067ac:	88fb      	ldrh	r3, [r7, #6]
 80067ae:	2b09      	cmp	r3, #9
 80067b0:	f240 809d 	bls.w	80068ee <USBH_ParseCfgDesc+0x1de>
  {
    ptr = USB_LEN_CFG_DESC;
 80067b4:	2309      	movs	r3, #9
 80067b6:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80067b8:	2300      	movs	r3, #0
 80067ba:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80067bc:	e081      	b.n	80068c2 <USBH_ParseCfgDesc+0x1b2>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80067be:	f107 0316 	add.w	r3, r7, #22
 80067c2:	4619      	mov	r1, r3
 80067c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067c6:	f000 f99c 	bl	8006b02 <USBH_GetNextDesc>
 80067ca:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80067cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ce:	785b      	ldrb	r3, [r3, #1]
 80067d0:	2b04      	cmp	r3, #4
 80067d2:	d176      	bne.n	80068c2 <USBH_ParseCfgDesc+0x1b2>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80067d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	2b09      	cmp	r3, #9
 80067da:	d002      	beq.n	80067e2 <USBH_ParseCfgDesc+0xd2>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80067dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067de:	2209      	movs	r2, #9
 80067e0:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80067e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067e6:	221a      	movs	r2, #26
 80067e8:	fb02 f303 	mul.w	r3, r2, r3
 80067ec:	3308      	adds	r3, #8
 80067ee:	6a3a      	ldr	r2, [r7, #32]
 80067f0:	4413      	add	r3, r2
 80067f2:	3302      	adds	r3, #2
 80067f4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80067f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067f8:	69f8      	ldr	r0, [r7, #28]
 80067fa:	f000 f87e 	bl	80068fa <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80067fe:	2300      	movs	r3, #0
 8006800:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006804:	2300      	movs	r3, #0
 8006806:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006808:	e043      	b.n	8006892 <USBH_ParseCfgDesc+0x182>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800680a:	f107 0316 	add.w	r3, r7, #22
 800680e:	4619      	mov	r1, r3
 8006810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006812:	f000 f976 	bl	8006b02 <USBH_GetNextDesc>
 8006816:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681a:	785b      	ldrb	r3, [r3, #1]
 800681c:	2b05      	cmp	r3, #5
 800681e:	d138      	bne.n	8006892 <USBH_ParseCfgDesc+0x182>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	795b      	ldrb	r3, [r3, #5]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d10f      	bne.n	8006848 <USBH_ParseCfgDesc+0x138>
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	799b      	ldrb	r3, [r3, #6]
 800682c:	2b02      	cmp	r3, #2
 800682e:	d10b      	bne.n	8006848 <USBH_ParseCfgDesc+0x138>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	79db      	ldrb	r3, [r3, #7]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10f      	bne.n	8006858 <USBH_ParseCfgDesc+0x148>
 8006838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	2b09      	cmp	r3, #9
 800683e:	d00b      	beq.n	8006858 <USBH_ParseCfgDesc+0x148>
              {
                pdesc->bLength = 0x09U;
 8006840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006842:	2209      	movs	r2, #9
 8006844:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006846:	e007      	b.n	8006858 <USBH_ParseCfgDesc+0x148>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8006848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	2b07      	cmp	r3, #7
 800684e:	d004      	beq.n	800685a <USBH_ParseCfgDesc+0x14a>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8006850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006852:	2207      	movs	r2, #7
 8006854:	701a      	strb	r2, [r3, #0]
 8006856:	e000      	b.n	800685a <USBH_ParseCfgDesc+0x14a>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006858:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800685a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800685e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006862:	3201      	adds	r2, #1
 8006864:	00d2      	lsls	r2, r2, #3
 8006866:	211a      	movs	r1, #26
 8006868:	fb01 f303 	mul.w	r3, r1, r3
 800686c:	4413      	add	r3, r2
 800686e:	3308      	adds	r3, #8
 8006870:	6a3a      	ldr	r2, [r7, #32]
 8006872:	4413      	add	r3, r2
 8006874:	3304      	adds	r3, #4
 8006876:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8006878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800687a:	69b9      	ldr	r1, [r7, #24]
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f000 f86b 	bl	8006958 <USBH_ParseEPDesc>
 8006882:	4603      	mov	r3, r0
 8006884:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8006888:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800688c:	3301      	adds	r3, #1
 800688e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	791b      	ldrb	r3, [r3, #4]
 8006896:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800689a:	429a      	cmp	r2, r3
 800689c:	d204      	bcs.n	80068a8 <USBH_ParseCfgDesc+0x198>
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	885a      	ldrh	r2, [r3, #2]
 80068a2:	8afb      	ldrh	r3, [r7, #22]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d8b0      	bhi.n	800680a <USBH_ParseCfgDesc+0xfa>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	791b      	ldrb	r3, [r3, #4]
 80068ac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d201      	bcs.n	80068b8 <USBH_ParseCfgDesc+0x1a8>
        {
          return USBH_NOT_SUPPORTED;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e01c      	b.n	80068f2 <USBH_ParseCfgDesc+0x1e2>
        }

        if_ix++;
 80068b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068bc:	3301      	adds	r3, #1
 80068be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80068c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d805      	bhi.n	80068d6 <USBH_ParseCfgDesc+0x1c6>
 80068ca:	6a3b      	ldr	r3, [r7, #32]
 80068cc:	885a      	ldrh	r2, [r3, #2]
 80068ce:	8afb      	ldrh	r3, [r7, #22]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	f63f af74 	bhi.w	80067be <USBH_ParseCfgDesc+0xae>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	791b      	ldrb	r3, [r3, #4]
 80068da:	2b02      	cmp	r3, #2
 80068dc:	bf28      	it	cs
 80068de:	2302      	movcs	r3, #2
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d201      	bcs.n	80068ee <USBH_ParseCfgDesc+0x1de>
    {
      return USBH_NOT_SUPPORTED;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e001      	b.n	80068f2 <USBH_ParseCfgDesc+0x1e2>
    }
  }

  return status;
 80068ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3730      	adds	r7, #48	; 0x30
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b083      	sub	sp, #12
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
 8006902:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	781a      	ldrb	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	785a      	ldrb	r2, [r3, #1]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	789a      	ldrb	r2, [r3, #2]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	78da      	ldrb	r2, [r3, #3]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	791a      	ldrb	r2, [r3, #4]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	795a      	ldrb	r2, [r3, #5]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	799a      	ldrb	r2, [r3, #6]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	79da      	ldrb	r2, [r3, #7]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	7a1a      	ldrb	r2, [r3, #8]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	721a      	strb	r2, [r3, #8]
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8006958:	b480      	push	{r7}
 800695a:	b087      	sub	sp, #28
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006964:	2300      	movs	r3, #0
 8006966:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	781a      	ldrb	r2, [r3, #0]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	785a      	ldrb	r2, [r3, #1]
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	789a      	ldrb	r2, [r3, #2]
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	78da      	ldrb	r2, [r3, #3]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	3304      	adds	r3, #4
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	3305      	adds	r3, #5
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	021b      	lsls	r3, r3, #8
 8006998:	b29b      	uxth	r3, r3
 800699a:	4313      	orrs	r3, r2
 800699c:	b29a      	uxth	r2, r3
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	799a      	ldrb	r2, [r3, #6]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	889b      	ldrh	r3, [r3, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d102      	bne.n	80069b8 <USBH_ParseEPDesc+0x60>
  {
    status = USBH_NOT_SUPPORTED;
 80069b2:	2303      	movs	r3, #3
 80069b4:	75fb      	strb	r3, [r7, #23]
 80069b6:	e031      	b.n	8006a1c <USBH_ParseEPDesc+0xc4>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	889b      	ldrh	r3, [r3, #4]
 80069bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80069c0:	f023 0307 	bic.w	r3, r3, #7
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	889b      	ldrh	r3, [r3, #4]
 80069ce:	b21a      	sxth	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	3304      	adds	r3, #4
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	4619      	mov	r1, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	3305      	adds	r3, #5
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	021b      	lsls	r3, r3, #8
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	430b      	orrs	r3, r1
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10f      	bne.n	8006a0e <USBH_ParseEPDesc+0xb6>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	3304      	adds	r3, #4
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	4619      	mov	r1, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	3305      	adds	r3, #5
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	021b      	lsls	r3, r3, #8
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	430b      	orrs	r3, r1
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	b21b      	sxth	r3, r3
 8006a06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a0a:	b21b      	sxth	r3, r3
 8006a0c:	e001      	b.n	8006a12 <USBH_ParseEPDesc+0xba>
 8006a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a12:	4313      	orrs	r3, r2
 8006a14:	b21b      	sxth	r3, r3
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d116      	bne.n	8006a54 <USBH_ParseEPDesc+0xfc>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	78db      	ldrb	r3, [r3, #3]
 8006a2a:	f003 0303 	and.w	r3, r3, #3
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d005      	beq.n	8006a3e <USBH_ParseEPDesc+0xe6>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	78db      	ldrb	r3, [r3, #3]
 8006a36:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	d127      	bne.n	8006a8e <USBH_ParseEPDesc+0x136>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	799b      	ldrb	r3, [r3, #6]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <USBH_ParseEPDesc+0xf6>
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	799b      	ldrb	r3, [r3, #6]
 8006a4a:	2b10      	cmp	r3, #16
 8006a4c:	d91f      	bls.n	8006a8e <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	75fb      	strb	r3, [r7, #23]
 8006a52:	e01c      	b.n	8006a8e <USBH_ParseEPDesc+0x136>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	78db      	ldrb	r3, [r3, #3]
 8006a58:	f003 0303 	and.w	r3, r3, #3
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d10a      	bne.n	8006a76 <USBH_ParseEPDesc+0x11e>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	799b      	ldrb	r3, [r3, #6]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d003      	beq.n	8006a70 <USBH_ParseEPDesc+0x118>
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	799b      	ldrb	r3, [r3, #6]
 8006a6c:	2b10      	cmp	r3, #16
 8006a6e:	d90e      	bls.n	8006a8e <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 8006a70:	2303      	movs	r3, #3
 8006a72:	75fb      	strb	r3, [r7, #23]
 8006a74:	e00b      	b.n	8006a8e <USBH_ParseEPDesc+0x136>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	78db      	ldrb	r3, [r3, #3]
 8006a7a:	f003 0303 	and.w	r3, r3, #3
 8006a7e:	2b03      	cmp	r3, #3
 8006a80:	d105      	bne.n	8006a8e <USBH_ParseEPDesc+0x136>
    {
      if (ep_descriptor->bInterval == 0U)
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	799b      	ldrb	r3, [r3, #6]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8006a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	371c      	adds	r7, #28
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	3301      	adds	r3, #1
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	2b03      	cmp	r3, #3
 8006ab2:	d120      	bne.n	8006af6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	1e9a      	subs	r2, r3, #2
 8006aba:	88fb      	ldrh	r3, [r7, #6]
 8006abc:	4293      	cmp	r3, r2
 8006abe:	bf28      	it	cs
 8006ac0:	4613      	movcs	r3, r2
 8006ac2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	3302      	adds	r3, #2
 8006ac8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006aca:	2300      	movs	r3, #0
 8006acc:	82fb      	strh	r3, [r7, #22]
 8006ace:	e00b      	b.n	8006ae8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006ad0:	8afb      	ldrh	r3, [r7, #22]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	781a      	ldrb	r2, [r3, #0]
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006ae2:	8afb      	ldrh	r3, [r7, #22]
 8006ae4:	3302      	adds	r3, #2
 8006ae6:	82fb      	strh	r3, [r7, #22]
 8006ae8:	8afa      	ldrh	r2, [r7, #22]
 8006aea:	8abb      	ldrh	r3, [r7, #20]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d3ef      	bcc.n	8006ad0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	2200      	movs	r2, #0
 8006af4:	701a      	strb	r2, [r3, #0]
  }
}
 8006af6:	bf00      	nop
 8006af8:	371c      	adds	r7, #28
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b085      	sub	sp, #20
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	881b      	ldrh	r3, [r3, #0]
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	7812      	ldrb	r2, [r2, #0]
 8006b14:	4413      	add	r3, r2
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4413      	add	r3, r2
 8006b26:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006b28:	68fb      	ldr	r3, [r7, #12]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b086      	sub	sp, #24
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	60f8      	str	r0, [r7, #12]
 8006b3e:	60b9      	str	r1, [r7, #8]
 8006b40:	4613      	mov	r3, r2
 8006b42:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006b44:	2301      	movs	r3, #1
 8006b46:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	789b      	ldrb	r3, [r3, #2]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d002      	beq.n	8006b56 <USBH_CtlReq+0x20>
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d00f      	beq.n	8006b74 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006b54:	e027      	b.n	8006ba6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	68ba      	ldr	r2, [r7, #8]
 8006b5a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	88fa      	ldrh	r2, [r7, #6]
 8006b60:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2201      	movs	r2, #1
 8006b66:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	75fb      	strb	r3, [r7, #23]
      break;
 8006b72:	e018      	b.n	8006ba6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f000 f81b 	bl	8006bb0 <USBH_HandleControl>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d002      	beq.n	8006b8a <USBH_CtlReq+0x54>
 8006b84:	7dfb      	ldrb	r3, [r7, #23]
 8006b86:	2b03      	cmp	r3, #3
 8006b88:	d106      	bne.n	8006b98 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	761a      	strb	r2, [r3, #24]
      break;
 8006b96:	e005      	b.n	8006ba4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006b98:	7dfb      	ldrb	r3, [r7, #23]
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d102      	bne.n	8006ba4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	709a      	strb	r2, [r3, #2]
      break;
 8006ba4:	bf00      	nop
  }
  return status;
 8006ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3718      	adds	r7, #24
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af02      	add	r7, sp, #8
 8006bb6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	7e1b      	ldrb	r3, [r3, #24]
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	2b0a      	cmp	r3, #10
 8006bc8:	f200 8156 	bhi.w	8006e78 <USBH_HandleControl+0x2c8>
 8006bcc:	a201      	add	r2, pc, #4	; (adr r2, 8006bd4 <USBH_HandleControl+0x24>)
 8006bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd2:	bf00      	nop
 8006bd4:	08006c01 	.word	0x08006c01
 8006bd8:	08006c1b 	.word	0x08006c1b
 8006bdc:	08006c85 	.word	0x08006c85
 8006be0:	08006cab 	.word	0x08006cab
 8006be4:	08006ce3 	.word	0x08006ce3
 8006be8:	08006d0d 	.word	0x08006d0d
 8006bec:	08006d5f 	.word	0x08006d5f
 8006bf0:	08006d81 	.word	0x08006d81
 8006bf4:	08006dbd 	.word	0x08006dbd
 8006bf8:	08006de3 	.word	0x08006de3
 8006bfc:	08006e21 	.word	0x08006e21
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f103 0110 	add.w	r1, r3, #16
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	795b      	ldrb	r3, [r3, #5]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 f943 	bl	8006e98 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2202      	movs	r2, #2
 8006c16:	761a      	strb	r2, [r3, #24]
      break;
 8006c18:	e139      	b.n	8006e8e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	795b      	ldrb	r3, [r3, #5]
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fcc5 	bl	80075b0 <USBH_LL_GetURBState>
 8006c26:	4603      	mov	r3, r0
 8006c28:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006c2a:	7bbb      	ldrb	r3, [r7, #14]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d11e      	bne.n	8006c6e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	7c1b      	ldrb	r3, [r3, #16]
 8006c34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c38:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	8adb      	ldrh	r3, [r3, #22]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00a      	beq.n	8006c58 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006c42:	7b7b      	ldrb	r3, [r7, #13]
 8006c44:	2b80      	cmp	r3, #128	; 0x80
 8006c46:	d103      	bne.n	8006c50 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2203      	movs	r2, #3
 8006c4c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006c4e:	e115      	b.n	8006e7c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2205      	movs	r2, #5
 8006c54:	761a      	strb	r2, [r3, #24]
      break;
 8006c56:	e111      	b.n	8006e7c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006c58:	7b7b      	ldrb	r3, [r7, #13]
 8006c5a:	2b80      	cmp	r3, #128	; 0x80
 8006c5c:	d103      	bne.n	8006c66 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2209      	movs	r2, #9
 8006c62:	761a      	strb	r2, [r3, #24]
      break;
 8006c64:	e10a      	b.n	8006e7c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2207      	movs	r2, #7
 8006c6a:	761a      	strb	r2, [r3, #24]
      break;
 8006c6c:	e106      	b.n	8006e7c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006c6e:	7bbb      	ldrb	r3, [r7, #14]
 8006c70:	2b04      	cmp	r3, #4
 8006c72:	d003      	beq.n	8006c7c <USBH_HandleControl+0xcc>
 8006c74:	7bbb      	ldrb	r3, [r7, #14]
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	f040 8100 	bne.w	8006e7c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	220b      	movs	r2, #11
 8006c80:	761a      	strb	r2, [r3, #24]
      break;
 8006c82:	e0fb      	b.n	8006e7c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6899      	ldr	r1, [r3, #8]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	899a      	ldrh	r2, [r3, #12]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	791b      	ldrb	r3, [r3, #4]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f93a 	bl	8006f16 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2204      	movs	r2, #4
 8006ca6:	761a      	strb	r2, [r3, #24]
      break;
 8006ca8:	e0f1      	b.n	8006e8e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	791b      	ldrb	r3, [r3, #4]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 fc7d 	bl	80075b0 <USBH_LL_GetURBState>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006cba:	7bbb      	ldrb	r3, [r7, #14]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d102      	bne.n	8006cc6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2209      	movs	r2, #9
 8006cc4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006cc6:	7bbb      	ldrb	r3, [r7, #14]
 8006cc8:	2b05      	cmp	r3, #5
 8006cca:	d102      	bne.n	8006cd2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006cd0:	e0d6      	b.n	8006e80 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006cd2:	7bbb      	ldrb	r3, [r7, #14]
 8006cd4:	2b04      	cmp	r3, #4
 8006cd6:	f040 80d3 	bne.w	8006e80 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	220b      	movs	r2, #11
 8006cde:	761a      	strb	r2, [r3, #24]
      break;
 8006ce0:	e0ce      	b.n	8006e80 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6899      	ldr	r1, [r3, #8]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	899a      	ldrh	r2, [r3, #12]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	795b      	ldrb	r3, [r3, #5]
 8006cee:	2001      	movs	r0, #1
 8006cf0:	9000      	str	r0, [sp, #0]
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f8ea 	bl	8006ecc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2206      	movs	r2, #6
 8006d08:	761a      	strb	r2, [r3, #24]
      break;
 8006d0a:	e0c0      	b.n	8006e8e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	795b      	ldrb	r3, [r3, #5]
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fc4c 	bl	80075b0 <USBH_LL_GetURBState>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006d1c:	7bbb      	ldrb	r3, [r7, #14]
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d103      	bne.n	8006d2a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2207      	movs	r2, #7
 8006d26:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006d28:	e0ac      	b.n	8006e84 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006d2a:	7bbb      	ldrb	r3, [r7, #14]
 8006d2c:	2b05      	cmp	r3, #5
 8006d2e:	d105      	bne.n	8006d3c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	220c      	movs	r2, #12
 8006d34:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006d36:	2303      	movs	r3, #3
 8006d38:	73fb      	strb	r3, [r7, #15]
      break;
 8006d3a:	e0a3      	b.n	8006e84 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006d3c:	7bbb      	ldrb	r3, [r7, #14]
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d103      	bne.n	8006d4a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2205      	movs	r2, #5
 8006d46:	761a      	strb	r2, [r3, #24]
      break;
 8006d48:	e09c      	b.n	8006e84 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006d4a:	7bbb      	ldrb	r3, [r7, #14]
 8006d4c:	2b04      	cmp	r3, #4
 8006d4e:	f040 8099 	bne.w	8006e84 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	220b      	movs	r2, #11
 8006d56:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006d58:	2302      	movs	r3, #2
 8006d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d5c:	e092      	b.n	8006e84 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	791b      	ldrb	r3, [r3, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	2100      	movs	r1, #0
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f8d5 	bl	8006f16 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2208      	movs	r2, #8
 8006d7c:	761a      	strb	r2, [r3, #24]

      break;
 8006d7e:	e086      	b.n	8006e8e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	791b      	ldrb	r3, [r3, #4]
 8006d84:	4619      	mov	r1, r3
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fc12 	bl	80075b0 <USBH_LL_GetURBState>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006d90:	7bbb      	ldrb	r3, [r7, #14]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d105      	bne.n	8006da2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	220d      	movs	r2, #13
 8006d9a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006da0:	e072      	b.n	8006e88 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8006da2:	7bbb      	ldrb	r3, [r7, #14]
 8006da4:	2b04      	cmp	r3, #4
 8006da6:	d103      	bne.n	8006db0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	220b      	movs	r2, #11
 8006dac:	761a      	strb	r2, [r3, #24]
      break;
 8006dae:	e06b      	b.n	8006e88 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8006db0:	7bbb      	ldrb	r3, [r7, #14]
 8006db2:	2b05      	cmp	r3, #5
 8006db4:	d168      	bne.n	8006e88 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8006db6:	2303      	movs	r3, #3
 8006db8:	73fb      	strb	r3, [r7, #15]
      break;
 8006dba:	e065      	b.n	8006e88 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	795b      	ldrb	r3, [r3, #5]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	9200      	str	r2, [sp, #0]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f87f 	bl	8006ecc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	220a      	movs	r2, #10
 8006dde:	761a      	strb	r2, [r3, #24]
      break;
 8006de0:	e055      	b.n	8006e8e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	795b      	ldrb	r3, [r3, #5]
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 fbe1 	bl	80075b0 <USBH_LL_GetURBState>
 8006dee:	4603      	mov	r3, r0
 8006df0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006df2:	7bbb      	ldrb	r3, [r7, #14]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d105      	bne.n	8006e04 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	220d      	movs	r2, #13
 8006e00:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006e02:	e043      	b.n	8006e8c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006e04:	7bbb      	ldrb	r3, [r7, #14]
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d103      	bne.n	8006e12 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2209      	movs	r2, #9
 8006e0e:	761a      	strb	r2, [r3, #24]
      break;
 8006e10:	e03c      	b.n	8006e8c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8006e12:	7bbb      	ldrb	r3, [r7, #14]
 8006e14:	2b04      	cmp	r3, #4
 8006e16:	d139      	bne.n	8006e8c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	220b      	movs	r2, #11
 8006e1c:	761a      	strb	r2, [r3, #24]
      break;
 8006e1e:	e035      	b.n	8006e8c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	7e5b      	ldrb	r3, [r3, #25]
 8006e24:	3301      	adds	r3, #1
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	765a      	strb	r2, [r3, #25]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	7e5b      	ldrb	r3, [r3, #25]
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d806      	bhi.n	8006e42 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006e40:	e025      	b.n	8006e8e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e48:	2106      	movs	r1, #6
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	795b      	ldrb	r3, [r3, #5]
 8006e58:	4619      	mov	r1, r3
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f90c 	bl	8007078 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	791b      	ldrb	r3, [r3, #4]
 8006e64:	4619      	mov	r1, r3
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f906 	bl	8007078 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006e72:	2302      	movs	r3, #2
 8006e74:	73fb      	strb	r3, [r7, #15]
      break;
 8006e76:	e00a      	b.n	8006e8e <USBH_HandleControl+0x2de>

    default:
      break;
 8006e78:	bf00      	nop
 8006e7a:	e008      	b.n	8006e8e <USBH_HandleControl+0x2de>
      break;
 8006e7c:	bf00      	nop
 8006e7e:	e006      	b.n	8006e8e <USBH_HandleControl+0x2de>
      break;
 8006e80:	bf00      	nop
 8006e82:	e004      	b.n	8006e8e <USBH_HandleControl+0x2de>
      break;
 8006e84:	bf00      	nop
 8006e86:	e002      	b.n	8006e8e <USBH_HandleControl+0x2de>
      break;
 8006e88:	bf00      	nop
 8006e8a:	e000      	b.n	8006e8e <USBH_HandleControl+0x2de>
      break;
 8006e8c:	bf00      	nop
  }

  return status;
 8006e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b088      	sub	sp, #32
 8006e9c:	af04      	add	r7, sp, #16
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006ea6:	79f9      	ldrb	r1, [r7, #7]
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	9303      	str	r3, [sp, #12]
 8006eac:	2308      	movs	r3, #8
 8006eae:	9302      	str	r3, [sp, #8]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	9301      	str	r3, [sp, #4]
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	2300      	movs	r3, #0
 8006eba:	2200      	movs	r2, #0
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f000 fb46 	bl	800754e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b088      	sub	sp, #32
 8006ed0:	af04      	add	r7, sp, #16
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	461a      	mov	r2, r3
 8006eda:	460b      	mov	r3, r1
 8006edc:	80fb      	strh	r3, [r7, #6]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006eec:	2300      	movs	r3, #0
 8006eee:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006ef0:	7979      	ldrb	r1, [r7, #5]
 8006ef2:	7e3b      	ldrb	r3, [r7, #24]
 8006ef4:	9303      	str	r3, [sp, #12]
 8006ef6:	88fb      	ldrh	r3, [r7, #6]
 8006ef8:	9302      	str	r3, [sp, #8]
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	9301      	str	r3, [sp, #4]
 8006efe:	2301      	movs	r3, #1
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	2300      	movs	r3, #0
 8006f04:	2200      	movs	r2, #0
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f000 fb21 	bl	800754e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b088      	sub	sp, #32
 8006f1a:	af04      	add	r7, sp, #16
 8006f1c:	60f8      	str	r0, [r7, #12]
 8006f1e:	60b9      	str	r1, [r7, #8]
 8006f20:	4611      	mov	r1, r2
 8006f22:	461a      	mov	r2, r3
 8006f24:	460b      	mov	r3, r1
 8006f26:	80fb      	strh	r3, [r7, #6]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006f2c:	7979      	ldrb	r1, [r7, #5]
 8006f2e:	2300      	movs	r3, #0
 8006f30:	9303      	str	r3, [sp, #12]
 8006f32:	88fb      	ldrh	r3, [r7, #6]
 8006f34:	9302      	str	r3, [sp, #8]
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	9301      	str	r3, [sp, #4]
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	2300      	movs	r3, #0
 8006f40:	2201      	movs	r2, #1
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f000 fb03 	bl	800754e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006f48:	2300      	movs	r3, #0

}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b088      	sub	sp, #32
 8006f56:	af04      	add	r7, sp, #16
 8006f58:	60f8      	str	r0, [r7, #12]
 8006f5a:	60b9      	str	r1, [r7, #8]
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	461a      	mov	r2, r3
 8006f60:	460b      	mov	r3, r1
 8006f62:	80fb      	strh	r3, [r7, #6]
 8006f64:	4613      	mov	r3, r2
 8006f66:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006f72:	2300      	movs	r3, #0
 8006f74:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006f76:	7979      	ldrb	r1, [r7, #5]
 8006f78:	7e3b      	ldrb	r3, [r7, #24]
 8006f7a:	9303      	str	r3, [sp, #12]
 8006f7c:	88fb      	ldrh	r3, [r7, #6]
 8006f7e:	9302      	str	r3, [sp, #8]
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	9301      	str	r3, [sp, #4]
 8006f84:	2301      	movs	r3, #1
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	2302      	movs	r3, #2
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 fade 	bl	800754e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b088      	sub	sp, #32
 8006fa0:	af04      	add	r7, sp, #16
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	4611      	mov	r1, r2
 8006fa8:	461a      	mov	r2, r3
 8006faa:	460b      	mov	r3, r1
 8006fac:	80fb      	strh	r3, [r7, #6]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006fb2:	7979      	ldrb	r1, [r7, #5]
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	9303      	str	r3, [sp, #12]
 8006fb8:	88fb      	ldrh	r3, [r7, #6]
 8006fba:	9302      	str	r3, [sp, #8]
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	9301      	str	r3, [sp, #4]
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f000 fac0 	bl	800754e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b086      	sub	sp, #24
 8006fdc:	af04      	add	r7, sp, #16
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	4608      	mov	r0, r1
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	70fb      	strb	r3, [r7, #3]
 8006fea:	460b      	mov	r3, r1
 8006fec:	70bb      	strb	r3, [r7, #2]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006ff2:	7878      	ldrb	r0, [r7, #1]
 8006ff4:	78ba      	ldrb	r2, [r7, #2]
 8006ff6:	78f9      	ldrb	r1, [r7, #3]
 8006ff8:	8b3b      	ldrh	r3, [r7, #24]
 8006ffa:	9302      	str	r3, [sp, #8]
 8006ffc:	7d3b      	ldrb	r3, [r7, #20]
 8006ffe:	9301      	str	r3, [sp, #4]
 8007000:	7c3b      	ldrb	r3, [r7, #16]
 8007002:	9300      	str	r3, [sp, #0]
 8007004:	4603      	mov	r3, r0
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 fa53 	bl	80074b2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b082      	sub	sp, #8
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	460b      	mov	r3, r1
 8007020:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007022:	78fb      	ldrb	r3, [r7, #3]
 8007024:	4619      	mov	r1, r3
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fa72 	bl	8007510 <USBH_LL_ClosePipe>

  return USBH_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3708      	adds	r7, #8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b084      	sub	sp, #16
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	460b      	mov	r3, r1
 8007040:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f836 	bl	80070b4 <USBH_GetFreePipe>
 8007048:	4603      	mov	r3, r0
 800704a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800704c:	89fb      	ldrh	r3, [r7, #14]
 800704e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007052:	4293      	cmp	r3, r2
 8007054:	d00a      	beq.n	800706c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007056:	78fa      	ldrb	r2, [r7, #3]
 8007058:	89fb      	ldrh	r3, [r7, #14]
 800705a:	f003 030f 	and.w	r3, r3, #15
 800705e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007062:	6879      	ldr	r1, [r7, #4]
 8007064:	33e0      	adds	r3, #224	; 0xe0
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	440b      	add	r3, r1
 800706a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800706c:	89fb      	ldrh	r3, [r7, #14]
 800706e:	b2db      	uxtb	r3, r3
}
 8007070:	4618      	mov	r0, r3
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	460b      	mov	r3, r1
 8007082:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007084:	78fb      	ldrb	r3, [r7, #3]
 8007086:	2b0f      	cmp	r3, #15
 8007088:	d80d      	bhi.n	80070a6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800708a:	78fb      	ldrb	r3, [r7, #3]
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	33e0      	adds	r3, #224	; 0xe0
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	78fb      	ldrb	r3, [r7, #3]
 8007098:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800709c:	6879      	ldr	r1, [r7, #4]
 800709e:	33e0      	adds	r3, #224	; 0xe0
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	440b      	add	r3, r1
 80070a4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80070bc:	2300      	movs	r3, #0
 80070be:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80070c0:	2300      	movs	r3, #0
 80070c2:	73fb      	strb	r3, [r7, #15]
 80070c4:	e00f      	b.n	80070e6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80070c6:	7bfb      	ldrb	r3, [r7, #15]
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	33e0      	adds	r3, #224	; 0xe0
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4413      	add	r3, r2
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d102      	bne.n	80070e0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80070da:	7bfb      	ldrb	r3, [r7, #15]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	e007      	b.n	80070f0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80070e0:	7bfb      	ldrb	r3, [r7, #15]
 80070e2:	3301      	adds	r3, #1
 80070e4:	73fb      	strb	r3, [r7, #15]
 80070e6:	7bfb      	ldrb	r3, [r7, #15]
 80070e8:	2b0f      	cmp	r3, #15
 80070ea:	d9ec      	bls.n	80070c6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80070ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3714      	adds	r7, #20
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007100:	2201      	movs	r2, #1
 8007102:	490e      	ldr	r1, [pc, #56]	; (800713c <MX_USB_HOST_Init+0x40>)
 8007104:	480e      	ldr	r0, [pc, #56]	; (8007140 <MX_USB_HOST_Init+0x44>)
 8007106:	f7fe fbb7 	bl	8005878 <USBH_Init>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d001      	beq.n	8007114 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007110:	f7f9 faae 	bl	8000670 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007114:	490b      	ldr	r1, [pc, #44]	; (8007144 <MX_USB_HOST_Init+0x48>)
 8007116:	480a      	ldr	r0, [pc, #40]	; (8007140 <MX_USB_HOST_Init+0x44>)
 8007118:	f7fe fc3c 	bl	8005994 <USBH_RegisterClass>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d001      	beq.n	8007126 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007122:	f7f9 faa5 	bl	8000670 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007126:	4806      	ldr	r0, [pc, #24]	; (8007140 <MX_USB_HOST_Init+0x44>)
 8007128:	f7fe fcc0 	bl	8005aac <USBH_Start>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007132:	f7f9 fa9d 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007136:	bf00      	nop
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	0800715d 	.word	0x0800715d
 8007140:	200070d8 	.word	0x200070d8
 8007144:	2000000c 	.word	0x2000000c

08007148 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800714c:	4802      	ldr	r0, [pc, #8]	; (8007158 <MX_USB_HOST_Process+0x10>)
 800714e:	f7fe fcbd 	bl	8005acc <USBH_Process>
}
 8007152:	bf00      	nop
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	200070d8 	.word	0x200070d8

0800715c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	460b      	mov	r3, r1
 8007166:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007168:	78fb      	ldrb	r3, [r7, #3]
 800716a:	3b01      	subs	r3, #1
 800716c:	2b04      	cmp	r3, #4
 800716e:	d819      	bhi.n	80071a4 <USBH_UserProcess+0x48>
 8007170:	a201      	add	r2, pc, #4	; (adr r2, 8007178 <USBH_UserProcess+0x1c>)
 8007172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007176:	bf00      	nop
 8007178:	080071a5 	.word	0x080071a5
 800717c:	08007195 	.word	0x08007195
 8007180:	080071a5 	.word	0x080071a5
 8007184:	0800719d 	.word	0x0800719d
 8007188:	0800718d 	.word	0x0800718d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800718c:	4b09      	ldr	r3, [pc, #36]	; (80071b4 <USBH_UserProcess+0x58>)
 800718e:	2203      	movs	r2, #3
 8007190:	701a      	strb	r2, [r3, #0]
  break;
 8007192:	e008      	b.n	80071a6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007194:	4b07      	ldr	r3, [pc, #28]	; (80071b4 <USBH_UserProcess+0x58>)
 8007196:	2202      	movs	r2, #2
 8007198:	701a      	strb	r2, [r3, #0]
  break;
 800719a:	e004      	b.n	80071a6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800719c:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <USBH_UserProcess+0x58>)
 800719e:	2201      	movs	r2, #1
 80071a0:	701a      	strb	r2, [r3, #0]
  break;
 80071a2:	e000      	b.n	80071a6 <USBH_UserProcess+0x4a>

  default:
  break;
 80071a4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80071a6:	bf00      	nop
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	200074b0 	.word	0x200074b0

080071b8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b08a      	sub	sp, #40	; 0x28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071c0:	f107 0314 	add.w	r3, r7, #20
 80071c4:	2200      	movs	r2, #0
 80071c6:	601a      	str	r2, [r3, #0]
 80071c8:	605a      	str	r2, [r3, #4]
 80071ca:	609a      	str	r2, [r3, #8]
 80071cc:	60da      	str	r2, [r3, #12]
 80071ce:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071d8:	d147      	bne.n	800726a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071da:	2300      	movs	r3, #0
 80071dc:	613b      	str	r3, [r7, #16]
 80071de:	4b25      	ldr	r3, [pc, #148]	; (8007274 <HAL_HCD_MspInit+0xbc>)
 80071e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e2:	4a24      	ldr	r2, [pc, #144]	; (8007274 <HAL_HCD_MspInit+0xbc>)
 80071e4:	f043 0301 	orr.w	r3, r3, #1
 80071e8:	6313      	str	r3, [r2, #48]	; 0x30
 80071ea:	4b22      	ldr	r3, [pc, #136]	; (8007274 <HAL_HCD_MspInit+0xbc>)
 80071ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ee:	f003 0301 	and.w	r3, r3, #1
 80071f2:	613b      	str	r3, [r7, #16]
 80071f4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80071f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80071fc:	2300      	movs	r3, #0
 80071fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007200:	2300      	movs	r3, #0
 8007202:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007204:	f107 0314 	add.w	r3, r7, #20
 8007208:	4619      	mov	r1, r3
 800720a:	481b      	ldr	r0, [pc, #108]	; (8007278 <HAL_HCD_MspInit+0xc0>)
 800720c:	f7f9 fdc2 	bl	8000d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007210:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007216:	2302      	movs	r3, #2
 8007218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800721a:	2300      	movs	r3, #0
 800721c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800721e:	2300      	movs	r3, #0
 8007220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007222:	230a      	movs	r3, #10
 8007224:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007226:	f107 0314 	add.w	r3, r7, #20
 800722a:	4619      	mov	r1, r3
 800722c:	4812      	ldr	r0, [pc, #72]	; (8007278 <HAL_HCD_MspInit+0xc0>)
 800722e:	f7f9 fdb1 	bl	8000d94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007232:	4b10      	ldr	r3, [pc, #64]	; (8007274 <HAL_HCD_MspInit+0xbc>)
 8007234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007236:	4a0f      	ldr	r2, [pc, #60]	; (8007274 <HAL_HCD_MspInit+0xbc>)
 8007238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800723c:	6353      	str	r3, [r2, #52]	; 0x34
 800723e:	2300      	movs	r3, #0
 8007240:	60fb      	str	r3, [r7, #12]
 8007242:	4b0c      	ldr	r3, [pc, #48]	; (8007274 <HAL_HCD_MspInit+0xbc>)
 8007244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007246:	4a0b      	ldr	r2, [pc, #44]	; (8007274 <HAL_HCD_MspInit+0xbc>)
 8007248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800724c:	6453      	str	r3, [r2, #68]	; 0x44
 800724e:	4b09      	ldr	r3, [pc, #36]	; (8007274 <HAL_HCD_MspInit+0xbc>)
 8007250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007256:	60fb      	str	r3, [r7, #12]
 8007258:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800725a:	2200      	movs	r2, #0
 800725c:	2100      	movs	r1, #0
 800725e:	2043      	movs	r0, #67	; 0x43
 8007260:	f7f9 fd61 	bl	8000d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007264:	2043      	movs	r0, #67	; 0x43
 8007266:	f7f9 fd7a 	bl	8000d5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800726a:	bf00      	nop
 800726c:	3728      	adds	r7, #40	; 0x28
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	40023800 	.word	0x40023800
 8007278:	40020000 	.word	0x40020000

0800727c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800728a:	4618      	mov	r0, r3
 800728c:	f7fe fff5 	bl	800627a <USBH_LL_IncTimer>
}
 8007290:	bf00      	nop
 8007292:	3708      	adds	r7, #8
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7ff f82d 	bl	8006306 <USBH_LL_Connect>
}
 80072ac:	bf00      	nop
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7ff f836 	bl	8006334 <USBH_LL_Disconnect>
}
 80072c8:	bf00      	nop
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	460b      	mov	r3, r1
 80072da:	70fb      	strb	r3, [r7, #3]
 80072dc:	4613      	mov	r3, r2
 80072de:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7fe ffe7 	bl	80062ce <USBH_LL_PortEnabled>
}
 8007300:	bf00      	nop
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007316:	4618      	mov	r0, r3
 8007318:	f7fe ffe7 	bl	80062ea <USBH_LL_PortDisabled>
}
 800731c:	bf00      	nop
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007332:	2b01      	cmp	r3, #1
 8007334:	d12a      	bne.n	800738c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007336:	4a18      	ldr	r2, [pc, #96]	; (8007398 <USBH_LL_Init+0x74>)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a15      	ldr	r2, [pc, #84]	; (8007398 <USBH_LL_Init+0x74>)
 8007342:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007346:	4b14      	ldr	r3, [pc, #80]	; (8007398 <USBH_LL_Init+0x74>)
 8007348:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800734c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800734e:	4b12      	ldr	r3, [pc, #72]	; (8007398 <USBH_LL_Init+0x74>)
 8007350:	2208      	movs	r2, #8
 8007352:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007354:	4b10      	ldr	r3, [pc, #64]	; (8007398 <USBH_LL_Init+0x74>)
 8007356:	2201      	movs	r2, #1
 8007358:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800735a:	4b0f      	ldr	r3, [pc, #60]	; (8007398 <USBH_LL_Init+0x74>)
 800735c:	2200      	movs	r2, #0
 800735e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007360:	4b0d      	ldr	r3, [pc, #52]	; (8007398 <USBH_LL_Init+0x74>)
 8007362:	2202      	movs	r2, #2
 8007364:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007366:	4b0c      	ldr	r3, [pc, #48]	; (8007398 <USBH_LL_Init+0x74>)
 8007368:	2200      	movs	r2, #0
 800736a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800736c:	480a      	ldr	r0, [pc, #40]	; (8007398 <USBH_LL_Init+0x74>)
 800736e:	f7f9 fec6 	bl	80010fe <HAL_HCD_Init>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d001      	beq.n	800737c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007378:	f7f9 f97a 	bl	8000670 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800737c:	4806      	ldr	r0, [pc, #24]	; (8007398 <USBH_LL_Init+0x74>)
 800737e:	f7fa faaa 	bl	80018d6 <HAL_HCD_GetCurrentFrame>
 8007382:	4603      	mov	r3, r0
 8007384:	4619      	mov	r1, r3
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f7fe ff68 	bl	800625c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	200074b4 	.word	0x200074b4

0800739c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073a4:	2300      	movs	r3, #0
 80073a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80073a8:	2300      	movs	r3, #0
 80073aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7fa fa19 	bl	80017ea <HAL_HCD_Start>
 80073b8:	4603      	mov	r3, r0
 80073ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 f95c 	bl	800767c <USBH_Get_USB_Status>
 80073c4:	4603      	mov	r3, r0
 80073c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b084      	sub	sp, #16
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80073de:	2300      	movs	r3, #0
 80073e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7fa fa21 	bl	8001830 <HAL_HCD_Stop>
 80073ee:	4603      	mov	r3, r0
 80073f0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
 80073f4:	4618      	mov	r0, r3
 80073f6:	f000 f941 	bl	800767c <USBH_Get_USB_Status>
 80073fa:	4603      	mov	r3, r0
 80073fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007410:	2301      	movs	r3, #1
 8007412:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800741a:	4618      	mov	r0, r3
 800741c:	f7fa fa69 	bl	80018f2 <HAL_HCD_GetCurrentSpeed>
 8007420:	4603      	mov	r3, r0
 8007422:	2b02      	cmp	r3, #2
 8007424:	d00c      	beq.n	8007440 <USBH_LL_GetSpeed+0x38>
 8007426:	2b02      	cmp	r3, #2
 8007428:	d80d      	bhi.n	8007446 <USBH_LL_GetSpeed+0x3e>
 800742a:	2b00      	cmp	r3, #0
 800742c:	d002      	beq.n	8007434 <USBH_LL_GetSpeed+0x2c>
 800742e:	2b01      	cmp	r3, #1
 8007430:	d003      	beq.n	800743a <USBH_LL_GetSpeed+0x32>
 8007432:	e008      	b.n	8007446 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007434:	2300      	movs	r3, #0
 8007436:	73fb      	strb	r3, [r7, #15]
    break;
 8007438:	e008      	b.n	800744c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800743a:	2301      	movs	r3, #1
 800743c:	73fb      	strb	r3, [r7, #15]
    break;
 800743e:	e005      	b.n	800744c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007440:	2302      	movs	r3, #2
 8007442:	73fb      	strb	r3, [r7, #15]
    break;
 8007444:	e002      	b.n	800744c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007446:	2301      	movs	r3, #1
 8007448:	73fb      	strb	r3, [r7, #15]
    break;
 800744a:	bf00      	nop
  }
  return  speed;
 800744c:	7bfb      	ldrb	r3, [r7, #15]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b084      	sub	sp, #16
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800745e:	2300      	movs	r3, #0
 8007460:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800746c:	4618      	mov	r0, r3
 800746e:	f7fa f9fc 	bl	800186a <HAL_HCD_ResetPort>
 8007472:	4603      	mov	r3, r0
 8007474:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007476:	7bfb      	ldrb	r3, [r7, #15]
 8007478:	4618      	mov	r0, r3
 800747a:	f000 f8ff 	bl	800767c <USBH_Get_USB_Status>
 800747e:	4603      	mov	r3, r0
 8007480:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007482:	7bbb      	ldrb	r3, [r7, #14]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800749e:	78fa      	ldrb	r2, [r7, #3]
 80074a0:	4611      	mov	r1, r2
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7fa fa03 	bl	80018ae <HAL_HCD_HC_GetXferCount>
 80074a8:	4603      	mov	r3, r0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80074b2:	b590      	push	{r4, r7, lr}
 80074b4:	b089      	sub	sp, #36	; 0x24
 80074b6:	af04      	add	r7, sp, #16
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	4608      	mov	r0, r1
 80074bc:	4611      	mov	r1, r2
 80074be:	461a      	mov	r2, r3
 80074c0:	4603      	mov	r3, r0
 80074c2:	70fb      	strb	r3, [r7, #3]
 80074c4:	460b      	mov	r3, r1
 80074c6:	70bb      	strb	r3, [r7, #2]
 80074c8:	4613      	mov	r3, r2
 80074ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80074d0:	2300      	movs	r3, #0
 80074d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80074da:	787c      	ldrb	r4, [r7, #1]
 80074dc:	78ba      	ldrb	r2, [r7, #2]
 80074de:	78f9      	ldrb	r1, [r7, #3]
 80074e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80074e2:	9302      	str	r3, [sp, #8]
 80074e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80074e8:	9301      	str	r3, [sp, #4]
 80074ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80074ee:	9300      	str	r3, [sp, #0]
 80074f0:	4623      	mov	r3, r4
 80074f2:	f7f9 fe66 	bl	80011c2 <HAL_HCD_HC_Init>
 80074f6:	4603      	mov	r3, r0
 80074f8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
 80074fc:	4618      	mov	r0, r3
 80074fe:	f000 f8bd 	bl	800767c <USBH_Get_USB_Status>
 8007502:	4603      	mov	r3, r0
 8007504:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007506:	7bbb      	ldrb	r3, [r7, #14]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	bd90      	pop	{r4, r7, pc}

08007510 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	460b      	mov	r3, r1
 800751a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800751c:	2300      	movs	r3, #0
 800751e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007520:	2300      	movs	r3, #0
 8007522:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800752a:	78fa      	ldrb	r2, [r7, #3]
 800752c:	4611      	mov	r1, r2
 800752e:	4618      	mov	r0, r3
 8007530:	f7f9 fed6 	bl	80012e0 <HAL_HCD_HC_Halt>
 8007534:	4603      	mov	r3, r0
 8007536:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	4618      	mov	r0, r3
 800753c:	f000 f89e 	bl	800767c <USBH_Get_USB_Status>
 8007540:	4603      	mov	r3, r0
 8007542:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007544:	7bbb      	ldrb	r3, [r7, #14]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800754e:	b590      	push	{r4, r7, lr}
 8007550:	b089      	sub	sp, #36	; 0x24
 8007552:	af04      	add	r7, sp, #16
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	4608      	mov	r0, r1
 8007558:	4611      	mov	r1, r2
 800755a:	461a      	mov	r2, r3
 800755c:	4603      	mov	r3, r0
 800755e:	70fb      	strb	r3, [r7, #3]
 8007560:	460b      	mov	r3, r1
 8007562:	70bb      	strb	r3, [r7, #2]
 8007564:	4613      	mov	r3, r2
 8007566:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007568:	2300      	movs	r3, #0
 800756a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800756c:	2300      	movs	r3, #0
 800756e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007576:	787c      	ldrb	r4, [r7, #1]
 8007578:	78ba      	ldrb	r2, [r7, #2]
 800757a:	78f9      	ldrb	r1, [r7, #3]
 800757c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007580:	9303      	str	r3, [sp, #12]
 8007582:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007584:	9302      	str	r3, [sp, #8]
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007588:	9301      	str	r3, [sp, #4]
 800758a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	4623      	mov	r3, r4
 8007592:	f7f9 fec9 	bl	8001328 <HAL_HCD_HC_SubmitRequest>
 8007596:	4603      	mov	r3, r0
 8007598:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800759a:	7bfb      	ldrb	r3, [r7, #15]
 800759c:	4618      	mov	r0, r3
 800759e:	f000 f86d 	bl	800767c <USBH_Get_USB_Status>
 80075a2:	4603      	mov	r3, r0
 80075a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3714      	adds	r7, #20
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd90      	pop	{r4, r7, pc}

080075b0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	460b      	mov	r3, r1
 80075ba:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80075c2:	78fa      	ldrb	r2, [r7, #3]
 80075c4:	4611      	mov	r1, r2
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7fa f95d 	bl	8001886 <HAL_HCD_HC_GetURBState>
 80075cc:	4603      	mov	r3, r0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b082      	sub	sp, #8
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	460b      	mov	r3, r1
 80075e0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d103      	bne.n	80075f4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80075ec:	78fb      	ldrb	r3, [r7, #3]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f000 f870 	bl	80076d4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80075f4:	20c8      	movs	r0, #200	; 0xc8
 80075f6:	f7f9 fa97 	bl	8000b28 <HAL_Delay>
  return USBH_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	460b      	mov	r3, r1
 800760e:	70fb      	strb	r3, [r7, #3]
 8007610:	4613      	mov	r3, r2
 8007612:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800761a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800761c:	78fb      	ldrb	r3, [r7, #3]
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	212c      	movs	r1, #44	; 0x2c
 8007622:	fb01 f303 	mul.w	r3, r1, r3
 8007626:	4413      	add	r3, r2
 8007628:	333b      	adds	r3, #59	; 0x3b
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d009      	beq.n	8007644 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007630:	78fb      	ldrb	r3, [r7, #3]
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	212c      	movs	r1, #44	; 0x2c
 8007636:	fb01 f303 	mul.w	r3, r1, r3
 800763a:	4413      	add	r3, r2
 800763c:	3354      	adds	r3, #84	; 0x54
 800763e:	78ba      	ldrb	r2, [r7, #2]
 8007640:	701a      	strb	r2, [r3, #0]
 8007642:	e008      	b.n	8007656 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007644:	78fb      	ldrb	r3, [r7, #3]
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	212c      	movs	r1, #44	; 0x2c
 800764a:	fb01 f303 	mul.w	r3, r1, r3
 800764e:	4413      	add	r3, r2
 8007650:	3355      	adds	r3, #85	; 0x55
 8007652:	78ba      	ldrb	r2, [r7, #2]
 8007654:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f7f9 fa5b 	bl	8000b28 <HAL_Delay>
}
 8007672:	bf00      	nop
 8007674:	3708      	adds	r7, #8
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
	...

0800767c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	4603      	mov	r3, r0
 8007684:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800768a:	79fb      	ldrb	r3, [r7, #7]
 800768c:	2b03      	cmp	r3, #3
 800768e:	d817      	bhi.n	80076c0 <USBH_Get_USB_Status+0x44>
 8007690:	a201      	add	r2, pc, #4	; (adr r2, 8007698 <USBH_Get_USB_Status+0x1c>)
 8007692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007696:	bf00      	nop
 8007698:	080076a9 	.word	0x080076a9
 800769c:	080076af 	.word	0x080076af
 80076a0:	080076b5 	.word	0x080076b5
 80076a4:	080076bb 	.word	0x080076bb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80076a8:	2300      	movs	r3, #0
 80076aa:	73fb      	strb	r3, [r7, #15]
    break;
 80076ac:	e00b      	b.n	80076c6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80076ae:	2302      	movs	r3, #2
 80076b0:	73fb      	strb	r3, [r7, #15]
    break;
 80076b2:	e008      	b.n	80076c6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80076b4:	2301      	movs	r3, #1
 80076b6:	73fb      	strb	r3, [r7, #15]
    break;
 80076b8:	e005      	b.n	80076c6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80076ba:	2302      	movs	r3, #2
 80076bc:	73fb      	strb	r3, [r7, #15]
    break;
 80076be:	e002      	b.n	80076c6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80076c0:	2302      	movs	r3, #2
 80076c2:	73fb      	strb	r3, [r7, #15]
    break;
 80076c4:	bf00      	nop
  }
  return usb_status;
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	4603      	mov	r3, r0
 80076dc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80076de:	79fb      	ldrb	r3, [r7, #7]
 80076e0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80076e2:	79fb      	ldrb	r3, [r7, #7]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d102      	bne.n	80076ee <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80076e8:	2300      	movs	r3, #0
 80076ea:	73fb      	strb	r3, [r7, #15]
 80076ec:	e001      	b.n	80076f2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80076ee:	2301      	movs	r3, #1
 80076f0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
 80076f4:	461a      	mov	r2, r3
 80076f6:	2101      	movs	r1, #1
 80076f8:	4803      	ldr	r0, [pc, #12]	; (8007708 <MX_DriverVbusFS+0x34>)
 80076fa:	f7f9 fce7 	bl	80010cc <HAL_GPIO_WritePin>
}
 80076fe:	bf00      	nop
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	40020800 	.word	0x40020800

0800770c <malloc>:
 800770c:	4b02      	ldr	r3, [pc, #8]	; (8007718 <malloc+0xc>)
 800770e:	4601      	mov	r1, r0
 8007710:	6818      	ldr	r0, [r3, #0]
 8007712:	f000 b82d 	b.w	8007770 <_malloc_r>
 8007716:	bf00      	nop
 8007718:	2000002c 	.word	0x2000002c

0800771c <free>:
 800771c:	4b02      	ldr	r3, [pc, #8]	; (8007728 <free+0xc>)
 800771e:	4601      	mov	r1, r0
 8007720:	6818      	ldr	r0, [r3, #0]
 8007722:	f000 b8e5 	b.w	80078f0 <_free_r>
 8007726:	bf00      	nop
 8007728:	2000002c 	.word	0x2000002c

0800772c <sbrk_aligned>:
 800772c:	b570      	push	{r4, r5, r6, lr}
 800772e:	4e0f      	ldr	r6, [pc, #60]	; (800776c <sbrk_aligned+0x40>)
 8007730:	460c      	mov	r4, r1
 8007732:	6831      	ldr	r1, [r6, #0]
 8007734:	4605      	mov	r5, r0
 8007736:	b911      	cbnz	r1, 800773e <sbrk_aligned+0x12>
 8007738:	f000 f89e 	bl	8007878 <_sbrk_r>
 800773c:	6030      	str	r0, [r6, #0]
 800773e:	4621      	mov	r1, r4
 8007740:	4628      	mov	r0, r5
 8007742:	f000 f899 	bl	8007878 <_sbrk_r>
 8007746:	1c43      	adds	r3, r0, #1
 8007748:	d103      	bne.n	8007752 <sbrk_aligned+0x26>
 800774a:	f04f 34ff 	mov.w	r4, #4294967295
 800774e:	4620      	mov	r0, r4
 8007750:	bd70      	pop	{r4, r5, r6, pc}
 8007752:	1cc4      	adds	r4, r0, #3
 8007754:	f024 0403 	bic.w	r4, r4, #3
 8007758:	42a0      	cmp	r0, r4
 800775a:	d0f8      	beq.n	800774e <sbrk_aligned+0x22>
 800775c:	1a21      	subs	r1, r4, r0
 800775e:	4628      	mov	r0, r5
 8007760:	f000 f88a 	bl	8007878 <_sbrk_r>
 8007764:	3001      	adds	r0, #1
 8007766:	d1f2      	bne.n	800774e <sbrk_aligned+0x22>
 8007768:	e7ef      	b.n	800774a <sbrk_aligned+0x1e>
 800776a:	bf00      	nop
 800776c:	200077b8 	.word	0x200077b8

08007770 <_malloc_r>:
 8007770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007772:	1ccd      	adds	r5, r1, #3
 8007774:	f025 0503 	bic.w	r5, r5, #3
 8007778:	3508      	adds	r5, #8
 800777a:	2d0c      	cmp	r5, #12
 800777c:	bf38      	it	cc
 800777e:	250c      	movcc	r5, #12
 8007780:	2d00      	cmp	r5, #0
 8007782:	4606      	mov	r6, r0
 8007784:	db01      	blt.n	800778a <_malloc_r+0x1a>
 8007786:	42a9      	cmp	r1, r5
 8007788:	d903      	bls.n	8007792 <_malloc_r+0x22>
 800778a:	230c      	movs	r3, #12
 800778c:	6033      	str	r3, [r6, #0]
 800778e:	2000      	movs	r0, #0
 8007790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007792:	4f2e      	ldr	r7, [pc, #184]	; (800784c <_malloc_r+0xdc>)
 8007794:	f000 f85c 	bl	8007850 <__malloc_lock>
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	461c      	mov	r4, r3
 800779c:	bb34      	cbnz	r4, 80077ec <_malloc_r+0x7c>
 800779e:	4629      	mov	r1, r5
 80077a0:	4630      	mov	r0, r6
 80077a2:	f7ff ffc3 	bl	800772c <sbrk_aligned>
 80077a6:	1c43      	adds	r3, r0, #1
 80077a8:	4604      	mov	r4, r0
 80077aa:	d14d      	bne.n	8007848 <_malloc_r+0xd8>
 80077ac:	683c      	ldr	r4, [r7, #0]
 80077ae:	4621      	mov	r1, r4
 80077b0:	2900      	cmp	r1, #0
 80077b2:	d140      	bne.n	8007836 <_malloc_r+0xc6>
 80077b4:	2c00      	cmp	r4, #0
 80077b6:	d041      	beq.n	800783c <_malloc_r+0xcc>
 80077b8:	6823      	ldr	r3, [r4, #0]
 80077ba:	4630      	mov	r0, r6
 80077bc:	18e7      	adds	r7, r4, r3
 80077be:	f000 f85b 	bl	8007878 <_sbrk_r>
 80077c2:	4287      	cmp	r7, r0
 80077c4:	d13a      	bne.n	800783c <_malloc_r+0xcc>
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	3503      	adds	r5, #3
 80077ca:	1aed      	subs	r5, r5, r3
 80077cc:	f025 0503 	bic.w	r5, r5, #3
 80077d0:	3508      	adds	r5, #8
 80077d2:	2d0c      	cmp	r5, #12
 80077d4:	bf38      	it	cc
 80077d6:	250c      	movcc	r5, #12
 80077d8:	4629      	mov	r1, r5
 80077da:	4630      	mov	r0, r6
 80077dc:	f7ff ffa6 	bl	800772c <sbrk_aligned>
 80077e0:	3001      	adds	r0, #1
 80077e2:	d02b      	beq.n	800783c <_malloc_r+0xcc>
 80077e4:	6823      	ldr	r3, [r4, #0]
 80077e6:	442b      	add	r3, r5
 80077e8:	6023      	str	r3, [r4, #0]
 80077ea:	e00e      	b.n	800780a <_malloc_r+0x9a>
 80077ec:	6822      	ldr	r2, [r4, #0]
 80077ee:	1b52      	subs	r2, r2, r5
 80077f0:	d41e      	bmi.n	8007830 <_malloc_r+0xc0>
 80077f2:	2a0b      	cmp	r2, #11
 80077f4:	d916      	bls.n	8007824 <_malloc_r+0xb4>
 80077f6:	1961      	adds	r1, r4, r5
 80077f8:	42a3      	cmp	r3, r4
 80077fa:	6025      	str	r5, [r4, #0]
 80077fc:	bf18      	it	ne
 80077fe:	6059      	strne	r1, [r3, #4]
 8007800:	6863      	ldr	r3, [r4, #4]
 8007802:	bf08      	it	eq
 8007804:	6039      	streq	r1, [r7, #0]
 8007806:	5162      	str	r2, [r4, r5]
 8007808:	604b      	str	r3, [r1, #4]
 800780a:	4630      	mov	r0, r6
 800780c:	f000 f826 	bl	800785c <__malloc_unlock>
 8007810:	f104 000b 	add.w	r0, r4, #11
 8007814:	1d23      	adds	r3, r4, #4
 8007816:	f020 0007 	bic.w	r0, r0, #7
 800781a:	1ac2      	subs	r2, r0, r3
 800781c:	bf1c      	itt	ne
 800781e:	1a1b      	subne	r3, r3, r0
 8007820:	50a3      	strne	r3, [r4, r2]
 8007822:	e7b5      	b.n	8007790 <_malloc_r+0x20>
 8007824:	6862      	ldr	r2, [r4, #4]
 8007826:	42a3      	cmp	r3, r4
 8007828:	bf0c      	ite	eq
 800782a:	603a      	streq	r2, [r7, #0]
 800782c:	605a      	strne	r2, [r3, #4]
 800782e:	e7ec      	b.n	800780a <_malloc_r+0x9a>
 8007830:	4623      	mov	r3, r4
 8007832:	6864      	ldr	r4, [r4, #4]
 8007834:	e7b2      	b.n	800779c <_malloc_r+0x2c>
 8007836:	460c      	mov	r4, r1
 8007838:	6849      	ldr	r1, [r1, #4]
 800783a:	e7b9      	b.n	80077b0 <_malloc_r+0x40>
 800783c:	230c      	movs	r3, #12
 800783e:	6033      	str	r3, [r6, #0]
 8007840:	4630      	mov	r0, r6
 8007842:	f000 f80b 	bl	800785c <__malloc_unlock>
 8007846:	e7a2      	b.n	800778e <_malloc_r+0x1e>
 8007848:	6005      	str	r5, [r0, #0]
 800784a:	e7de      	b.n	800780a <_malloc_r+0x9a>
 800784c:	200077bc 	.word	0x200077bc

08007850 <__malloc_lock>:
 8007850:	4801      	ldr	r0, [pc, #4]	; (8007858 <__malloc_lock+0x8>)
 8007852:	f000 b84b 	b.w	80078ec <__retarget_lock_acquire_recursive>
 8007856:	bf00      	nop
 8007858:	200078fc 	.word	0x200078fc

0800785c <__malloc_unlock>:
 800785c:	4801      	ldr	r0, [pc, #4]	; (8007864 <__malloc_unlock+0x8>)
 800785e:	f000 b846 	b.w	80078ee <__retarget_lock_release_recursive>
 8007862:	bf00      	nop
 8007864:	200078fc 	.word	0x200078fc

08007868 <memset>:
 8007868:	4402      	add	r2, r0
 800786a:	4603      	mov	r3, r0
 800786c:	4293      	cmp	r3, r2
 800786e:	d100      	bne.n	8007872 <memset+0xa>
 8007870:	4770      	bx	lr
 8007872:	f803 1b01 	strb.w	r1, [r3], #1
 8007876:	e7f9      	b.n	800786c <memset+0x4>

08007878 <_sbrk_r>:
 8007878:	b538      	push	{r3, r4, r5, lr}
 800787a:	4d06      	ldr	r5, [pc, #24]	; (8007894 <_sbrk_r+0x1c>)
 800787c:	2300      	movs	r3, #0
 800787e:	4604      	mov	r4, r0
 8007880:	4608      	mov	r0, r1
 8007882:	602b      	str	r3, [r5, #0]
 8007884:	f7f9 f86c 	bl	8000960 <_sbrk>
 8007888:	1c43      	adds	r3, r0, #1
 800788a:	d102      	bne.n	8007892 <_sbrk_r+0x1a>
 800788c:	682b      	ldr	r3, [r5, #0]
 800788e:	b103      	cbz	r3, 8007892 <_sbrk_r+0x1a>
 8007890:	6023      	str	r3, [r4, #0]
 8007892:	bd38      	pop	{r3, r4, r5, pc}
 8007894:	200078f8 	.word	0x200078f8

08007898 <__errno>:
 8007898:	4b01      	ldr	r3, [pc, #4]	; (80078a0 <__errno+0x8>)
 800789a:	6818      	ldr	r0, [r3, #0]
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	2000002c 	.word	0x2000002c

080078a4 <__libc_init_array>:
 80078a4:	b570      	push	{r4, r5, r6, lr}
 80078a6:	4d0d      	ldr	r5, [pc, #52]	; (80078dc <__libc_init_array+0x38>)
 80078a8:	4c0d      	ldr	r4, [pc, #52]	; (80078e0 <__libc_init_array+0x3c>)
 80078aa:	1b64      	subs	r4, r4, r5
 80078ac:	10a4      	asrs	r4, r4, #2
 80078ae:	2600      	movs	r6, #0
 80078b0:	42a6      	cmp	r6, r4
 80078b2:	d109      	bne.n	80078c8 <__libc_init_array+0x24>
 80078b4:	4d0b      	ldr	r5, [pc, #44]	; (80078e4 <__libc_init_array+0x40>)
 80078b6:	4c0c      	ldr	r4, [pc, #48]	; (80078e8 <__libc_init_array+0x44>)
 80078b8:	f000 f9c2 	bl	8007c40 <_init>
 80078bc:	1b64      	subs	r4, r4, r5
 80078be:	10a4      	asrs	r4, r4, #2
 80078c0:	2600      	movs	r6, #0
 80078c2:	42a6      	cmp	r6, r4
 80078c4:	d105      	bne.n	80078d2 <__libc_init_array+0x2e>
 80078c6:	bd70      	pop	{r4, r5, r6, pc}
 80078c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80078cc:	4798      	blx	r3
 80078ce:	3601      	adds	r6, #1
 80078d0:	e7ee      	b.n	80078b0 <__libc_init_array+0xc>
 80078d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80078d6:	4798      	blx	r3
 80078d8:	3601      	adds	r6, #1
 80078da:	e7f2      	b.n	80078c2 <__libc_init_array+0x1e>
 80078dc:	08007c7c 	.word	0x08007c7c
 80078e0:	08007c7c 	.word	0x08007c7c
 80078e4:	08007c7c 	.word	0x08007c7c
 80078e8:	08007c80 	.word	0x08007c80

080078ec <__retarget_lock_acquire_recursive>:
 80078ec:	4770      	bx	lr

080078ee <__retarget_lock_release_recursive>:
 80078ee:	4770      	bx	lr

080078f0 <_free_r>:
 80078f0:	b538      	push	{r3, r4, r5, lr}
 80078f2:	4605      	mov	r5, r0
 80078f4:	2900      	cmp	r1, #0
 80078f6:	d041      	beq.n	800797c <_free_r+0x8c>
 80078f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078fc:	1f0c      	subs	r4, r1, #4
 80078fe:	2b00      	cmp	r3, #0
 8007900:	bfb8      	it	lt
 8007902:	18e4      	addlt	r4, r4, r3
 8007904:	f7ff ffa4 	bl	8007850 <__malloc_lock>
 8007908:	4a1d      	ldr	r2, [pc, #116]	; (8007980 <_free_r+0x90>)
 800790a:	6813      	ldr	r3, [r2, #0]
 800790c:	b933      	cbnz	r3, 800791c <_free_r+0x2c>
 800790e:	6063      	str	r3, [r4, #4]
 8007910:	6014      	str	r4, [r2, #0]
 8007912:	4628      	mov	r0, r5
 8007914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007918:	f7ff bfa0 	b.w	800785c <__malloc_unlock>
 800791c:	42a3      	cmp	r3, r4
 800791e:	d908      	bls.n	8007932 <_free_r+0x42>
 8007920:	6820      	ldr	r0, [r4, #0]
 8007922:	1821      	adds	r1, r4, r0
 8007924:	428b      	cmp	r3, r1
 8007926:	bf01      	itttt	eq
 8007928:	6819      	ldreq	r1, [r3, #0]
 800792a:	685b      	ldreq	r3, [r3, #4]
 800792c:	1809      	addeq	r1, r1, r0
 800792e:	6021      	streq	r1, [r4, #0]
 8007930:	e7ed      	b.n	800790e <_free_r+0x1e>
 8007932:	461a      	mov	r2, r3
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	b10b      	cbz	r3, 800793c <_free_r+0x4c>
 8007938:	42a3      	cmp	r3, r4
 800793a:	d9fa      	bls.n	8007932 <_free_r+0x42>
 800793c:	6811      	ldr	r1, [r2, #0]
 800793e:	1850      	adds	r0, r2, r1
 8007940:	42a0      	cmp	r0, r4
 8007942:	d10b      	bne.n	800795c <_free_r+0x6c>
 8007944:	6820      	ldr	r0, [r4, #0]
 8007946:	4401      	add	r1, r0
 8007948:	1850      	adds	r0, r2, r1
 800794a:	4283      	cmp	r3, r0
 800794c:	6011      	str	r1, [r2, #0]
 800794e:	d1e0      	bne.n	8007912 <_free_r+0x22>
 8007950:	6818      	ldr	r0, [r3, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	6053      	str	r3, [r2, #4]
 8007956:	4408      	add	r0, r1
 8007958:	6010      	str	r0, [r2, #0]
 800795a:	e7da      	b.n	8007912 <_free_r+0x22>
 800795c:	d902      	bls.n	8007964 <_free_r+0x74>
 800795e:	230c      	movs	r3, #12
 8007960:	602b      	str	r3, [r5, #0]
 8007962:	e7d6      	b.n	8007912 <_free_r+0x22>
 8007964:	6820      	ldr	r0, [r4, #0]
 8007966:	1821      	adds	r1, r4, r0
 8007968:	428b      	cmp	r3, r1
 800796a:	bf04      	itt	eq
 800796c:	6819      	ldreq	r1, [r3, #0]
 800796e:	685b      	ldreq	r3, [r3, #4]
 8007970:	6063      	str	r3, [r4, #4]
 8007972:	bf04      	itt	eq
 8007974:	1809      	addeq	r1, r1, r0
 8007976:	6021      	streq	r1, [r4, #0]
 8007978:	6054      	str	r4, [r2, #4]
 800797a:	e7ca      	b.n	8007912 <_free_r+0x22>
 800797c:	bd38      	pop	{r3, r4, r5, pc}
 800797e:	bf00      	nop
 8007980:	200077bc 	.word	0x200077bc

08007984 <__udivmoddi4>:
 8007984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007988:	9d08      	ldr	r5, [sp, #32]
 800798a:	460c      	mov	r4, r1
 800798c:	2b00      	cmp	r3, #0
 800798e:	d14e      	bne.n	8007a2e <__udivmoddi4+0xaa>
 8007990:	4694      	mov	ip, r2
 8007992:	458c      	cmp	ip, r1
 8007994:	4686      	mov	lr, r0
 8007996:	fab2 f282 	clz	r2, r2
 800799a:	d962      	bls.n	8007a62 <__udivmoddi4+0xde>
 800799c:	b14a      	cbz	r2, 80079b2 <__udivmoddi4+0x2e>
 800799e:	f1c2 0320 	rsb	r3, r2, #32
 80079a2:	4091      	lsls	r1, r2
 80079a4:	fa20 f303 	lsr.w	r3, r0, r3
 80079a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80079ac:	4319      	orrs	r1, r3
 80079ae:	fa00 fe02 	lsl.w	lr, r0, r2
 80079b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80079b6:	fa1f f68c 	uxth.w	r6, ip
 80079ba:	fbb1 f4f7 	udiv	r4, r1, r7
 80079be:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80079c2:	fb07 1114 	mls	r1, r7, r4, r1
 80079c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80079ca:	fb04 f106 	mul.w	r1, r4, r6
 80079ce:	4299      	cmp	r1, r3
 80079d0:	d90a      	bls.n	80079e8 <__udivmoddi4+0x64>
 80079d2:	eb1c 0303 	adds.w	r3, ip, r3
 80079d6:	f104 30ff 	add.w	r0, r4, #4294967295
 80079da:	f080 8113 	bcs.w	8007c04 <__udivmoddi4+0x280>
 80079de:	4299      	cmp	r1, r3
 80079e0:	f240 8110 	bls.w	8007c04 <__udivmoddi4+0x280>
 80079e4:	3c02      	subs	r4, #2
 80079e6:	4463      	add	r3, ip
 80079e8:	1a59      	subs	r1, r3, r1
 80079ea:	fa1f f38e 	uxth.w	r3, lr
 80079ee:	fbb1 f0f7 	udiv	r0, r1, r7
 80079f2:	fb07 1110 	mls	r1, r7, r0, r1
 80079f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80079fa:	fb00 f606 	mul.w	r6, r0, r6
 80079fe:	429e      	cmp	r6, r3
 8007a00:	d90a      	bls.n	8007a18 <__udivmoddi4+0x94>
 8007a02:	eb1c 0303 	adds.w	r3, ip, r3
 8007a06:	f100 31ff 	add.w	r1, r0, #4294967295
 8007a0a:	f080 80fd 	bcs.w	8007c08 <__udivmoddi4+0x284>
 8007a0e:	429e      	cmp	r6, r3
 8007a10:	f240 80fa 	bls.w	8007c08 <__udivmoddi4+0x284>
 8007a14:	4463      	add	r3, ip
 8007a16:	3802      	subs	r0, #2
 8007a18:	1b9b      	subs	r3, r3, r6
 8007a1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8007a1e:	2100      	movs	r1, #0
 8007a20:	b11d      	cbz	r5, 8007a2a <__udivmoddi4+0xa6>
 8007a22:	40d3      	lsrs	r3, r2
 8007a24:	2200      	movs	r2, #0
 8007a26:	e9c5 3200 	strd	r3, r2, [r5]
 8007a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a2e:	428b      	cmp	r3, r1
 8007a30:	d905      	bls.n	8007a3e <__udivmoddi4+0xba>
 8007a32:	b10d      	cbz	r5, 8007a38 <__udivmoddi4+0xb4>
 8007a34:	e9c5 0100 	strd	r0, r1, [r5]
 8007a38:	2100      	movs	r1, #0
 8007a3a:	4608      	mov	r0, r1
 8007a3c:	e7f5      	b.n	8007a2a <__udivmoddi4+0xa6>
 8007a3e:	fab3 f183 	clz	r1, r3
 8007a42:	2900      	cmp	r1, #0
 8007a44:	d146      	bne.n	8007ad4 <__udivmoddi4+0x150>
 8007a46:	42a3      	cmp	r3, r4
 8007a48:	d302      	bcc.n	8007a50 <__udivmoddi4+0xcc>
 8007a4a:	4290      	cmp	r0, r2
 8007a4c:	f0c0 80f1 	bcc.w	8007c32 <__udivmoddi4+0x2ae>
 8007a50:	1a86      	subs	r6, r0, r2
 8007a52:	eb64 0303 	sbc.w	r3, r4, r3
 8007a56:	2001      	movs	r0, #1
 8007a58:	2d00      	cmp	r5, #0
 8007a5a:	d0e6      	beq.n	8007a2a <__udivmoddi4+0xa6>
 8007a5c:	e9c5 6300 	strd	r6, r3, [r5]
 8007a60:	e7e3      	b.n	8007a2a <__udivmoddi4+0xa6>
 8007a62:	2a00      	cmp	r2, #0
 8007a64:	f040 8091 	bne.w	8007b8a <__udivmoddi4+0x206>
 8007a68:	eba1 040c 	sub.w	r4, r1, ip
 8007a6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8007a70:	fa1f f78c 	uxth.w	r7, ip
 8007a74:	2101      	movs	r1, #1
 8007a76:	fbb4 f6f8 	udiv	r6, r4, r8
 8007a7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8007a7e:	fb08 4416 	mls	r4, r8, r6, r4
 8007a82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007a86:	fb07 f006 	mul.w	r0, r7, r6
 8007a8a:	4298      	cmp	r0, r3
 8007a8c:	d908      	bls.n	8007aa0 <__udivmoddi4+0x11c>
 8007a8e:	eb1c 0303 	adds.w	r3, ip, r3
 8007a92:	f106 34ff 	add.w	r4, r6, #4294967295
 8007a96:	d202      	bcs.n	8007a9e <__udivmoddi4+0x11a>
 8007a98:	4298      	cmp	r0, r3
 8007a9a:	f200 80ce 	bhi.w	8007c3a <__udivmoddi4+0x2b6>
 8007a9e:	4626      	mov	r6, r4
 8007aa0:	1a1c      	subs	r4, r3, r0
 8007aa2:	fa1f f38e 	uxth.w	r3, lr
 8007aa6:	fbb4 f0f8 	udiv	r0, r4, r8
 8007aaa:	fb08 4410 	mls	r4, r8, r0, r4
 8007aae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007ab2:	fb00 f707 	mul.w	r7, r0, r7
 8007ab6:	429f      	cmp	r7, r3
 8007ab8:	d908      	bls.n	8007acc <__udivmoddi4+0x148>
 8007aba:	eb1c 0303 	adds.w	r3, ip, r3
 8007abe:	f100 34ff 	add.w	r4, r0, #4294967295
 8007ac2:	d202      	bcs.n	8007aca <__udivmoddi4+0x146>
 8007ac4:	429f      	cmp	r7, r3
 8007ac6:	f200 80b1 	bhi.w	8007c2c <__udivmoddi4+0x2a8>
 8007aca:	4620      	mov	r0, r4
 8007acc:	1bdb      	subs	r3, r3, r7
 8007ace:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8007ad2:	e7a5      	b.n	8007a20 <__udivmoddi4+0x9c>
 8007ad4:	f1c1 0620 	rsb	r6, r1, #32
 8007ad8:	408b      	lsls	r3, r1
 8007ada:	fa22 f706 	lsr.w	r7, r2, r6
 8007ade:	431f      	orrs	r7, r3
 8007ae0:	fa20 fc06 	lsr.w	ip, r0, r6
 8007ae4:	fa04 f301 	lsl.w	r3, r4, r1
 8007ae8:	ea43 030c 	orr.w	r3, r3, ip
 8007aec:	40f4      	lsrs	r4, r6
 8007aee:	fa00 f801 	lsl.w	r8, r0, r1
 8007af2:	0c38      	lsrs	r0, r7, #16
 8007af4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8007af8:	fbb4 fef0 	udiv	lr, r4, r0
 8007afc:	fa1f fc87 	uxth.w	ip, r7
 8007b00:	fb00 441e 	mls	r4, r0, lr, r4
 8007b04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8007b08:	fb0e f90c 	mul.w	r9, lr, ip
 8007b0c:	45a1      	cmp	r9, r4
 8007b0e:	fa02 f201 	lsl.w	r2, r2, r1
 8007b12:	d90a      	bls.n	8007b2a <__udivmoddi4+0x1a6>
 8007b14:	193c      	adds	r4, r7, r4
 8007b16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8007b1a:	f080 8085 	bcs.w	8007c28 <__udivmoddi4+0x2a4>
 8007b1e:	45a1      	cmp	r9, r4
 8007b20:	f240 8082 	bls.w	8007c28 <__udivmoddi4+0x2a4>
 8007b24:	f1ae 0e02 	sub.w	lr, lr, #2
 8007b28:	443c      	add	r4, r7
 8007b2a:	eba4 0409 	sub.w	r4, r4, r9
 8007b2e:	fa1f f983 	uxth.w	r9, r3
 8007b32:	fbb4 f3f0 	udiv	r3, r4, r0
 8007b36:	fb00 4413 	mls	r4, r0, r3, r4
 8007b3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8007b3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8007b42:	45a4      	cmp	ip, r4
 8007b44:	d907      	bls.n	8007b56 <__udivmoddi4+0x1d2>
 8007b46:	193c      	adds	r4, r7, r4
 8007b48:	f103 30ff 	add.w	r0, r3, #4294967295
 8007b4c:	d268      	bcs.n	8007c20 <__udivmoddi4+0x29c>
 8007b4e:	45a4      	cmp	ip, r4
 8007b50:	d966      	bls.n	8007c20 <__udivmoddi4+0x29c>
 8007b52:	3b02      	subs	r3, #2
 8007b54:	443c      	add	r4, r7
 8007b56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8007b5a:	fba0 9302 	umull	r9, r3, r0, r2
 8007b5e:	eba4 040c 	sub.w	r4, r4, ip
 8007b62:	429c      	cmp	r4, r3
 8007b64:	46ce      	mov	lr, r9
 8007b66:	469c      	mov	ip, r3
 8007b68:	d352      	bcc.n	8007c10 <__udivmoddi4+0x28c>
 8007b6a:	d04f      	beq.n	8007c0c <__udivmoddi4+0x288>
 8007b6c:	b155      	cbz	r5, 8007b84 <__udivmoddi4+0x200>
 8007b6e:	ebb8 030e 	subs.w	r3, r8, lr
 8007b72:	eb64 040c 	sbc.w	r4, r4, ip
 8007b76:	fa04 f606 	lsl.w	r6, r4, r6
 8007b7a:	40cb      	lsrs	r3, r1
 8007b7c:	40cc      	lsrs	r4, r1
 8007b7e:	431e      	orrs	r6, r3
 8007b80:	e9c5 6400 	strd	r6, r4, [r5]
 8007b84:	2100      	movs	r1, #0
 8007b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b8a:	f1c2 0320 	rsb	r3, r2, #32
 8007b8e:	fa20 f103 	lsr.w	r1, r0, r3
 8007b92:	fa0c fc02 	lsl.w	ip, ip, r2
 8007b96:	fa24 f303 	lsr.w	r3, r4, r3
 8007b9a:	4094      	lsls	r4, r2
 8007b9c:	430c      	orrs	r4, r1
 8007b9e:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8007ba2:	fa00 fe02 	lsl.w	lr, r0, r2
 8007ba6:	fa1f f78c 	uxth.w	r7, ip
 8007baa:	fbb3 f0f8 	udiv	r0, r3, r8
 8007bae:	fb08 3110 	mls	r1, r8, r0, r3
 8007bb2:	0c23      	lsrs	r3, r4, #16
 8007bb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007bb8:	fb00 f107 	mul.w	r1, r0, r7
 8007bbc:	4299      	cmp	r1, r3
 8007bbe:	d908      	bls.n	8007bd2 <__udivmoddi4+0x24e>
 8007bc0:	eb1c 0303 	adds.w	r3, ip, r3
 8007bc4:	f100 36ff 	add.w	r6, r0, #4294967295
 8007bc8:	d22c      	bcs.n	8007c24 <__udivmoddi4+0x2a0>
 8007bca:	4299      	cmp	r1, r3
 8007bcc:	d92a      	bls.n	8007c24 <__udivmoddi4+0x2a0>
 8007bce:	3802      	subs	r0, #2
 8007bd0:	4463      	add	r3, ip
 8007bd2:	1a5b      	subs	r3, r3, r1
 8007bd4:	b2a4      	uxth	r4, r4
 8007bd6:	fbb3 f1f8 	udiv	r1, r3, r8
 8007bda:	fb08 3311 	mls	r3, r8, r1, r3
 8007bde:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8007be2:	fb01 f307 	mul.w	r3, r1, r7
 8007be6:	42a3      	cmp	r3, r4
 8007be8:	d908      	bls.n	8007bfc <__udivmoddi4+0x278>
 8007bea:	eb1c 0404 	adds.w	r4, ip, r4
 8007bee:	f101 36ff 	add.w	r6, r1, #4294967295
 8007bf2:	d213      	bcs.n	8007c1c <__udivmoddi4+0x298>
 8007bf4:	42a3      	cmp	r3, r4
 8007bf6:	d911      	bls.n	8007c1c <__udivmoddi4+0x298>
 8007bf8:	3902      	subs	r1, #2
 8007bfa:	4464      	add	r4, ip
 8007bfc:	1ae4      	subs	r4, r4, r3
 8007bfe:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007c02:	e738      	b.n	8007a76 <__udivmoddi4+0xf2>
 8007c04:	4604      	mov	r4, r0
 8007c06:	e6ef      	b.n	80079e8 <__udivmoddi4+0x64>
 8007c08:	4608      	mov	r0, r1
 8007c0a:	e705      	b.n	8007a18 <__udivmoddi4+0x94>
 8007c0c:	45c8      	cmp	r8, r9
 8007c0e:	d2ad      	bcs.n	8007b6c <__udivmoddi4+0x1e8>
 8007c10:	ebb9 0e02 	subs.w	lr, r9, r2
 8007c14:	eb63 0c07 	sbc.w	ip, r3, r7
 8007c18:	3801      	subs	r0, #1
 8007c1a:	e7a7      	b.n	8007b6c <__udivmoddi4+0x1e8>
 8007c1c:	4631      	mov	r1, r6
 8007c1e:	e7ed      	b.n	8007bfc <__udivmoddi4+0x278>
 8007c20:	4603      	mov	r3, r0
 8007c22:	e798      	b.n	8007b56 <__udivmoddi4+0x1d2>
 8007c24:	4630      	mov	r0, r6
 8007c26:	e7d4      	b.n	8007bd2 <__udivmoddi4+0x24e>
 8007c28:	46d6      	mov	lr, sl
 8007c2a:	e77e      	b.n	8007b2a <__udivmoddi4+0x1a6>
 8007c2c:	4463      	add	r3, ip
 8007c2e:	3802      	subs	r0, #2
 8007c30:	e74c      	b.n	8007acc <__udivmoddi4+0x148>
 8007c32:	4606      	mov	r6, r0
 8007c34:	4623      	mov	r3, r4
 8007c36:	4608      	mov	r0, r1
 8007c38:	e70e      	b.n	8007a58 <__udivmoddi4+0xd4>
 8007c3a:	3e02      	subs	r6, #2
 8007c3c:	4463      	add	r3, ip
 8007c3e:	e72f      	b.n	8007aa0 <__udivmoddi4+0x11c>

08007c40 <_init>:
 8007c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c42:	bf00      	nop
 8007c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c46:	bc08      	pop	{r3}
 8007c48:	469e      	mov	lr, r3
 8007c4a:	4770      	bx	lr

08007c4c <_fini>:
 8007c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c4e:	bf00      	nop
 8007c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c52:	bc08      	pop	{r3}
 8007c54:	469e      	mov	lr, r3
 8007c56:	4770      	bx	lr
